"use strict";
var plane_ts;
(function (plane_ts) {
    //
    function modePointRadius(mode) {
        return (mode == plane_ts.Mode.none ? 1 : 2) * plane_ts.Point.radius;
    }
    plane_ts.modePointRadius = modePointRadius;
    function modeLineWidth(mode) {
        return (mode == plane_ts.Mode.none ? plane_ts.defaultLineWidth : plane_ts.OverLineWidth);
    }
    class Canvas {
        view;
        canvas;
        ctx;
        constructor(view, canvas) {
            this.view = view;
            this.canvas = canvas;
            this.ctx = canvas.getContext("2d");
            plane_ts.assert(this.ctx != null);
        }
        getAttributes(shape) {
            let color;
            let line_width;
            if (shape != undefined) {
                color = shape.modeColor();
                line_width = shape.modeLineWidth();
            }
            else {
                color = plane_ts.fgColor;
                line_width = plane_ts.defaultLineWidth;
            }
            return [color, line_width];
        }
        clear() {
            const rc = this.canvas.getBoundingClientRect();
            this.ctx.fillStyle = plane_ts.bgColor;
            this.ctx.fillRect(0, 0, rc.width, rc.height);
        }
        drawLineRaw(p1, p2, color, line_width) {
            const pix1 = this.view.toPixPosition(p1);
            const pix2 = this.view.toPixPosition(p2);
            const ctx = this.ctx;
            ctx.beginPath();
            ctx.moveTo(pix1.x, pix1.y);
            ctx.lineTo(pix2.x, pix2.y);
            ctx.strokeStyle = color;
            ctx.lineWidth = line_width;
            ctx.stroke();
        }
        drawLine(shape, p1, p2) {
            const [color, line_width] = this.getAttributes(shape);
            this.drawLineRaw(p1, p2, color, line_width);
        }
        drawLineWith2Points(line, pointB) {
            const l = plane_ts.View.current.max.distance(plane_ts.View.current.min);
            const p_plus = line.pointA.position.add(line.e.mul(l));
            const p_minus = line.pointA.position.add(line.e.mul(-l));
            switch (line.lineKind) {
                case plane_ts.LineKind.line_segment:
                    this.drawLine(line, line.pointA.position, pointB.position);
                    break;
                case plane_ts.LineKind.ray:
                    this.drawLine(line, line.pointA.position, p_plus);
                    break;
                case plane_ts.LineKind.ray_reverse:
                    this.drawLine(line, line.pointA.position, p_minus);
                    break;
                case plane_ts.LineKind.line:
                    this.drawLine(line, p_minus, p_plus);
                    break;
            }
        }
        drawPolygonRaw(positions, color, line_width, fill = false) {
            const ctx = this.ctx;
            ctx.beginPath();
            if (fill) {
                ctx.globalAlpha = 0.5;
                ctx.fillStyle = color;
            }
            else {
                ctx.strokeStyle = color;
                ctx.lineWidth = line_width;
            }
            for (const [idx, position] of positions.entries()) {
                const pix = this.view.toPixPosition(position);
                if (idx == 0) {
                    ctx.moveTo(pix.x, pix.y);
                }
                else {
                    ctx.lineTo(pix.x, pix.y);
                }
            }
            ctx.closePath();
            if (fill) {
                ctx.fill();
                ctx.globalAlpha = 1;
            }
            else {
                ctx.stroke();
            }
        }
        drawPolygon(shape, positions) {
            const [color, line_width] = this.getAttributes(shape);
            this.drawPolygonRaw(positions, color, line_width);
        }
        drawPartialPolygon(points, mode) {
            const color = plane_ts.getModeColor(mode);
            const radius = modePointRadius(mode);
            const positions = points.map(x => x.position);
            positions.forEach(x => plane_ts.View.current.canvas.drawCircleRaw(x, radius, color));
            const line_width = modeLineWidth(mode);
            plane_ts.View.current.canvas.drawPolygonRaw(positions, color, line_width);
        }
        drawLinesRaw(lines, color, line_width) {
            const ctx = this.ctx;
            for (const [p1, p2] of lines) {
                const pix1 = this.view.toPixPosition(p1);
                const pix2 = this.view.toPixPosition(p2);
                ctx.beginPath();
                ctx.moveTo(pix1.x, pix1.y);
                ctx.lineTo(pix2.x, pix2.y);
                ctx.strokeStyle = color;
                ctx.lineWidth = line_width;
                ctx.stroke();
            }
        }
        drawLines(shape, lines) {
            const [color, line_width] = this.getAttributes(shape);
            this.drawLinesRaw(lines, color, line_width);
        }
        drawArcRaw(center, radius, start_angle, end_angle, color, line_width) {
            const ctx = this.ctx;
            const pix = this.view.toPixPosition(center);
            // flip Y
            start_angle = 2 * Math.PI - start_angle;
            end_angle = 2 * Math.PI - end_angle;
            const radius_pix = this.view.toXPixScale(radius);
            ctx.beginPath();
            ctx.arc(pix.x, pix.y, radius_pix, start_angle, end_angle, true);
            if (line_width == undefined) {
                ctx.fillStyle = color;
                ctx.fill();
            }
            else {
                ctx.lineWidth = line_width;
                ctx.strokeStyle = color;
                ctx.stroke();
            }
        }
        drawCircleRaw(center, radius, color, line_width) {
            this.drawArcRaw(center, radius, 0, 2 * Math.PI, color, line_width);
        }
        drawArc(shape, center, radius, start_angle, end_angle) {
            const [color, line_width] = this.getAttributes(shape);
            this.drawArcRaw(center, radius, start_angle, end_angle, color, line_width);
        }
        drawCircle(shape, center, radius) {
            this.drawArc(shape, center, radius, 0, 2 * Math.PI);
        }
        drawEllipse(center, radius_x, radius_y, rotation, color, line_width) {
            const center_pix = this.view.toPixPosition(center);
            const radius_x_pix = this.view.toXPixScale(radius_x);
            const radius_y_pix = this.view.toXPixScale(radius_y);
            const ctx = this.ctx;
            ctx.beginPath();
            ctx.ellipse(center_pix.x, center_pix.y, radius_x_pix, radius_y_pix, rotation, 0, 2 * Math.PI);
            ctx.lineWidth = line_width;
            ctx.strokeStyle = color;
            ctx.stroke();
        }
        drawText(position, text, color) {
            const pos_pix = this.view.toPixPosition(position);
            const ctx = this.ctx;
            ctx.font = "16px serif";
            ctx.lineWidth = 1;
            ctx.strokeStyle = color;
            ctx.strokeText(text, pos_pix.x, pos_pix.y);
        }
        drawRect(shape, p1, p2) {
            const [color, line_width] = this.getAttributes(shape);
            const pix1 = this.view.toPixPosition(p1);
            const pix2 = this.view.toPixPosition(p2);
            const x = Math.min(pix1.x, pix2.x);
            const y = Math.min(pix1.y, pix2.y);
            const w = Math.abs(pix1.x - pix2.x);
            const h = Math.abs(pix1.y - pix2.y);
            const ctx = this.ctx;
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.lineWidth = line_width;
            ctx.rect(x, y, w, h);
            ctx.stroke();
        }
    }
    plane_ts.Canvas = Canvas;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    plane_ts.idMap = new Map();
    class Widget {
        static refMap = new Map();
        static isLoading = false;
        // static 
        static maxId = 0;
        static processed;
        id;
        order = NaN;
        constructor(obj) {
            if (obj.id != undefined) {
                this.id = obj.id;
                Widget.maxId = Math.max(Widget.maxId, this.id);
                Widget.refMap.set(obj.id, this);
            }
            else {
                this.id = ++Widget.maxId;
            }
            plane_ts.assert(this.id <= Widget.maxId && !plane_ts.idMap.has(this.id));
            plane_ts.idMap.set(this.id, this);
        }
        getProperties() {
            return ["id", "order"];
        }
        makeObj() {
            return {
                id: this.id,
                typeName: this.constructor.name
            };
        }
        toObj() {
            if (Widget.processed.has(this.id)) {
                return { ref: this.id };
            }
            Widget.processed.add(this.id);
            return this.makeObj();
        }
    }
    plane_ts.Widget = Widget;
    function parseObject(obj, parse_other_object) {
        if (obj == undefined || obj == null || typeof obj != "object") {
            return obj;
        }
        // if(obj instanceof Widget || obj instanceof Vec2){
        //     return obj;
        // }
        if (Array.isArray(obj)) {
            let v = obj.map(x => parseObject(x, parse_other_object));
            return v;
        }
        if (obj.ref != undefined) {
            let o = Widget.refMap.get(obj.ref);
            if (o == undefined) {
                throw new plane_ts.MyError("no-ref");
            }
            return o;
        }
        if (obj.typeName == plane_ts.Vec2.name) {
            return new plane_ts.Vec2(obj.x, obj.y);
        }
        for (let [name, val] of Object.entries(obj)) {
            if (name == "bound" && val.ref != undefined && Widget.refMap.get(val.ref) == undefined) {
                plane_ts.msg(`no bound:${obj.id}`);
                obj.bound = undefined;
                continue;
            }
            obj[name] = parseObject(val, parse_other_object);
        }
        switch (obj.typeName) {
            case plane_ts.TextBlock.name:
                return new plane_ts.TextBlock(obj);
            // case Speech.name:
            //     return new Speech(obj);
            // case Simulation.name:
            //     return new Simulation(obj);
            // case ViewPoint.name:
            //     return new ViewPoint(obj);
            // case PackageInfo.name:
            //     return obj;
            // case Variable.name:
            //     return new Variable(obj);
            case plane_ts.Point.name:
                return new plane_ts.Point(obj);
            case plane_ts.LineByPoints.name:
                return new plane_ts.LineByPoints(obj);
            case plane_ts.Polygon.name:
                return new plane_ts.Polygon(obj);
            // case Rect.name:
            //     return new Rect(obj);
            case plane_ts.CircleByPoint.name:
                return new plane_ts.CircleByPoint(obj);
            case plane_ts.CircleByRadius.name:
                return new plane_ts.CircleByRadius(obj);
            case plane_ts.Ellipse.name:
                return new plane_ts.Ellipse(obj);
            case plane_ts.DimensionLine.name:
                return new plane_ts.DimensionLine(obj);
            case plane_ts.LengthSymbol.name:
                return new plane_ts.LengthSymbol(obj);
            // case Triangle.name:
            //     return new Triangle(obj);
            case plane_ts.Midpoint.name:
                return new plane_ts.Midpoint(obj);
            case plane_ts.FootOfPerpendicular.name:
                return new plane_ts.FootOfPerpendicular(obj);
            case plane_ts.PerpendicularLine.name:
                return new plane_ts.PerpendicularLine(obj);
            case plane_ts.ParallelLine.name:
                return new plane_ts.ParallelLine(obj);
            case plane_ts.LineLineIntersection.name:
                return new plane_ts.LineLineIntersection(obj);
            case plane_ts.ArcArcIntersection.name:
                return new plane_ts.ArcArcIntersection(obj);
            case plane_ts.LineArcIntersection.name:
                return new plane_ts.LineArcIntersection(obj);
            case plane_ts.CirclePointTangent.name:
                return new plane_ts.CirclePointTangent(obj);
            case plane_ts.CircleCircleTangent.name:
                return new plane_ts.CircleCircleTangent(obj);
            case plane_ts.ArcByPoint.name:
                return new plane_ts.ArcByPoint(obj);
            case plane_ts.ArcByRadius.name:
            case plane_ts.ArcByLengthSymbol.name:
                return new plane_ts.ArcByLengthSymbol(obj);
            case plane_ts.ArcByCircle.name:
                return new plane_ts.ArcByCircle(obj);
            case plane_ts.Triangle.name:
                return new plane_ts.Triangle(obj);
            case plane_ts.Angle.name:
                return new plane_ts.Angle(obj);
            case plane_ts.AngleBisector.name:
                return new plane_ts.AngleBisector(obj);
            // case Image.name:
            //     return new Image(obj);
            // case WidgetSelection.name:
            // case "ShapeSelection":
            //         return new WidgetSelection(obj);
            // case TextSelection.name:
            //     return new TextSelection(obj);
            // case FuncLine.name:
            //     return new FuncLine(obj);
            //     case Surface.name:
            //         return new Surface(obj);
            case plane_ts.Statement.name:
                return new plane_ts.Statement(obj);
            case plane_ts.TriangleCongruence.name:
                return new plane_ts.TriangleCongruence(obj);
            case plane_ts.TriangleSimilarity.name:
                return new plane_ts.TriangleSimilarity(obj);
            case "EqualLength":
            case plane_ts.LengthEquality.name:
                return new plane_ts.LengthEquality(obj);
            case plane_ts.AngleEquality.name:
                return new plane_ts.AngleEquality(obj);
            case plane_ts.ParallelDetector.name:
                return new plane_ts.ParallelDetector(obj);
            case plane_ts.PropertyChange.name:
                return new plane_ts.PropertyChange(obj);
            case plane_ts.LengthEqualityConstraint.name:
                return new plane_ts.LengthEqualityConstraint(obj);
            case plane_ts.AngleEqualityConstraint.name:
                return new plane_ts.AngleEqualityConstraint(obj);
            case plane_ts.ParallelConstraint.name:
                return new plane_ts.ParallelConstraint(obj);
            case plane_ts.PerpendicularConstraint.name:
                return new plane_ts.PerpendicularConstraint(obj);
            case plane_ts.Motion.name:
                return new plane_ts.Motion(obj);
            case plane_ts.Quadrilateral.name:
                return new plane_ts.Quadrilateral(obj);
            case plane_ts.ParallelogramClassifier.name:
                return new plane_ts.ParallelogramClassifier(obj);
            case plane_ts.RhombusClassifier.name:
                return new plane_ts.RhombusClassifier(obj);
            default:
                if (parse_other_object != undefined) {
                    return parse_other_object(obj);
                }
                throw new plane_ts.MyError(`parse Object: unknown type:[${obj.typeName}]`);
        }
    }
    plane_ts.parseObject = parseObject;
    function saveJson(anchor) {
        const text = plane_ts.getOperationsText();
        const blob = new Blob([text], { type: 'application/json' });
        layout_ts.saveBlob(anchor, "movie", blob);
    }
    plane_ts.saveJson = saveJson;
    function handleFileSelect(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        const files = ev.dataTransfer.files; // FileList object.
        for (let file of files) {
            plane_ts.msg(`drop name:${escape(file.name)} type:${file.type} size:${file.size} mtime:${file.lastModified.toLocaleString()} `);
            const reader = new FileReader();
            reader.onload = () => {
                const json = reader.result;
                const obj = JSON.parse(json);
                plane_ts.assert(false);
                loadData(obj);
                // viewEvent(obj);
            };
            reader.readAsText(file);
            // uploadFile(f);
        }
    }
    plane_ts.handleFileSelect = handleFileSelect;
    function loadData(obj) {
        plane_ts.Plane.one.clearPlane();
        Widget.maxId = -1;
        plane_ts.idMap = new Map();
        Widget.refMap = new Map();
        plane_ts.MathEntity.orderSet.clear();
        const view = plane_ts.View.current;
        for (let [name, val] of Object.entries(obj)) {
            if (name != "shapes") {
                view[name] = parseObject(val);
            }
        }
        view.shapes = [];
        const all_shapes = [];
        plane_ts.initRelations();
        for (const shape_obj of obj.shapes) {
            Widget.isLoading = true;
            const shape = parseObject(shape_obj);
            Widget.isLoading = false;
            view.shapes.push(shape);
            shape.setOrder();
            shape.setRelations();
            shape.getAllShapes(all_shapes);
        }
        const all_real_shapes = view.allRealShapes();
        all_real_shapes.filter(x => x.caption != undefined).forEach(x => x.caption.parent = x);
        all_real_shapes.forEach(x => x.updateCaption());
        view.shapes.filter(x => x instanceof plane_ts.TextBlock).forEach(x => x.updateTextPosition());
        plane_ts.Plane.one.shapes_block.clear();
        view.shapes.forEach(x => plane_ts.addToShapeHistory(x));
    }
    plane_ts.loadData = loadData;
    function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
    }
    plane_ts.handleDragOver = handleDragOver;
})(plane_ts || (plane_ts = {}));
///<reference path="json.ts" />
const Reading = i18n_ts.Reading;
var plane_ts;
(function (plane_ts) {
    //
    plane_ts.fgColor = layout_ts.fgColor;
    plane_ts.bgColor = layout_ts.bgColor;
    plane_ts.dependColor = "blue";
    plane_ts.targetColor = "red";
    plane_ts.defaultLineWidth = 3;
    plane_ts.OverLineWidth = 5;
    let capturedShape;
    let Mode;
    (function (Mode) {
        Mode[Mode["none"] = 0] = "none";
        Mode[Mode["depend"] = 1] = "depend";
        Mode[Mode["depend1"] = 2] = "depend1";
        Mode[Mode["depend2"] = 3] = "depend2";
        Mode[Mode["target"] = 4] = "target";
        Mode[Mode["target1"] = 5] = "target1";
        Mode[Mode["target2"] = 6] = "target2";
    })(Mode = plane_ts.Mode || (plane_ts.Mode = {}));
    const modeColorMap = new Map([
        [Mode.none, plane_ts.fgColor],
        [Mode.depend, plane_ts.dependColor],
        [Mode.depend1, "Aqua"],
        [Mode.depend2, "lime"],
        [Mode.target, plane_ts.targetColor],
        [Mode.target1, "orange"],
        [Mode.target2, "magenta"],
    ]);
    function getModeColor(mode) {
        return modeColorMap.get(mode);
    }
    plane_ts.getModeColor = getModeColor;
    class MathEntity extends plane_ts.Widget {
        static orderSet = new Set();
        setRelationsCount = 0;
        visible = true;
        mode = Mode.none;
        isOver = false;
        mute = false;
        interval = 1;
        constructor(obj) {
            super(obj);
            if (obj.visible != undefined && !obj.visible) {
                this.visible = false;
            }
            if (obj.mute != undefined) {
                this.mute = obj.mute;
            }
            if (obj.interval != undefined) {
                this.interval = obj.interval;
            }
            if (plane_ts.View.current != undefined) {
                plane_ts.View.current.dirty = true;
            }
        }
        makeObj() {
            let obj = super.makeObj();
            if (this.mute) {
                obj.mute = true;
            }
            if (this.interval != 1) {
                obj.interval = this.interval;
            }
            if (!this.visible) {
                obj.visible = false;
            }
            return obj;
        }
        getProperties() {
            return super.getProperties().concat([
                "mute", "visible", "interval"
            ]);
        }
        textReading(text) {
            return new Reading(this, text, []);
        }
        highlight(on) {
            if (on) {
                this.setMode(Mode.target);
            }
            else {
                this.setMode(Mode.none);
            }
        }
        getAllShapes(shapes) {
            shapes.push(this);
        }
        allShapes() {
            const shapes = [];
            this.getAllShapes(shapes);
            return plane_ts.unique(shapes);
        }
        dependencies() {
            return [];
        }
        setOrder() {
            if (MathEntity.orderSet.has(this)) {
                plane_ts.assert(!isNaN(this.order));
                return;
            }
            for (const dep of this.dependencies()) {
                dep.setOrder();
            }
            plane_ts.assert(!MathEntity.orderSet.has(this));
            this.order = MathEntity.orderSet.size;
            MathEntity.orderSet.add(this);
        }
        setMode(mode) {
            this.mode = mode;
            plane_ts.View.current.dirty = true;
        }
        delete(deleted) {
            if (deleted.has(this.id)) {
                return;
            }
            deleted.add(this.id);
            for (let [name, val] of Object.entries(this)) {
                if (val instanceof MathEntity) {
                    val.delete(deleted);
                }
            }
        }
        async play(speech) {
        }
        getTextBlock() {
            if (this instanceof TextBlock) {
                return this;
            }
            else if (this instanceof Shape && this.caption != undefined) {
                return this.caption;
            }
            else {
                return undefined;
            }
        }
        hideTextBlock() {
            const text_block = this.getTextBlock();
            if (text_block != undefined) {
                text_block.div.dataset.display_backup = text_block.div.style.display;
                text_block.div.style.display = "none";
            }
        }
        restoreTextBlock() {
            const text_block = this.getTextBlock();
            if (text_block != undefined && text_block.div.dataset.display_backup != undefined) {
                text_block.div.style.display = text_block.div.dataset.display_backup;
            }
        }
        show() {
        }
        hide() {
        }
        setRelations() {
            this.setRelationsCount++;
        }
    }
    plane_ts.MathEntity = MathEntity;
    class TermRect {
        term;
        span;
        rect;
        constructor(term, span) {
            this.term = term;
            this.span = span;
            this.rect = span.getBoundingClientRect();
        }
    }
    plane_ts.TermRect = TermRect;
    class TextBlock extends MathEntity {
        parent;
        text;
        isTex;
        div;
        offset = new plane_ts.Vec2(0, 0);
        termRects = [];
        constructor(obj) {
            super(obj);
            this.parent = obj.parent;
            this.text = obj.text;
            this.isTex = obj.isTex;
            this.offset = obj.offset;
            this.div = document.createElement("div");
            if (this.getEquation() != undefined) {
                this.div.className = "selectable_tex";
                this.div.addEventListener("click", this.texClick.bind(this));
            }
            else {
                this.div.className = "tex_div";
            }
            this.div.style.fontSize = "x-large";
            this.setVisible(this.visible);
            plane_ts.View.current.board.parentElement.append(this.div);
            if (this.getEquation() == undefined) {
                plane_ts.setCaptionEvent(this);
            }
            this.updateTextPosition();
            plane_ts.textBlockEvent.setTextBlockEvent(this);
        }
        getEquation() {
            if (plane_ts.isEquationTextBlock(this.parent)) {
                return this.parent.equation;
            }
            return undefined;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                text: this.text,
                isTex: this.isTex,
                offset: this.offset
            });
            return obj;
        }
        getProperties() {
            return super.getProperties().concat([
                "text", "isTex", "offset"
            ]);
        }
        getClickedTermRect(x, y) {
            this.termRects.forEach(x => x.span.style.backgroundColor = "transparent");
            const refvar_rects = this.termRects.filter(x => x.term instanceof plane_ts.RefVar);
            for (const term_rect of refvar_rects) {
                const rect = term_rect.rect;
                const span = term_rect.span;
                if (rect.left <= x && x < rect.right && rect.top <= y && y < rect.bottom) {
                    return term_rect;
                }
            }
            throw new plane_ts.MyError();
        }
        async texClick(ev) {
            ev.stopPropagation();
            if (plane_ts.Builder.tool instanceof plane_ts.ExprTransformBuilder) {
                const srcTermRect = this.getClickedTermRect(ev.clientX, ev.clientY);
                const dstTermRect = plane_ts.Builder.tool.getDstTermRect(this.termRects, srcTermRect);
                const dstTerm = dstTermRect.term;
                if (!plane_ts.View.isPlayBack) {
                    const path = dstTerm.getPath();
                    const operation = new plane_ts.ClickTerm(this.id, path.indexes);
                    plane_ts.View.current.addOperation(operation);
                }
                await plane_ts.Builder.tool.termClick(dstTerm, this);
            }
        }
        updateTextDiv() {
            let text = this.text;
            if (text == "" && this.parent instanceof Shape) {
                text = this.parent.name;
            }
            if (this.isTex) {
                if (parser_ts.isGreek(text)) {
                    text = `\\${text}`;
                }
                plane_ts.renderKatexSub(this.div, text);
                if (this.getEquation() != undefined) {
                    const terms = this.getEquation().allTerms();
                    const tex_spans = Array.from(this.div.getElementsByClassName("enclosing"));
                    this.termRects = [];
                    const id_offset = "tex-term-".length;
                    for (const span of tex_spans) {
                        const id = parseInt(span.id.substring(id_offset));
                        const term = terms.find(x => x.id == id);
                        plane_ts.assert(term != undefined);
                        this.termRects.push(new TermRect(term, span));
                    }
                }
            }
            else {
                this.div.innerText = text;
            }
        }
        setVisible(visible) {
            this.visible = visible;
            if (this.visible) {
                this.div.style.color = "";
                this.div.style.display = "";
            }
            else {
                if (plane_ts.Plane.one.editMode) {
                    this.div.style.color = "gray";
                }
                else {
                    this.div.style.display = "none";
                }
            }
        }
        show() {
            this.div.style.display = "";
        }
        hide() {
            this.div.style.display = "none";
        }
        setIsTex(is_tex) {
            this.isTex = is_tex;
            this.updateTextDiv();
        }
        setTextPosition(x, y) {
            this.div.style.left = `${plane_ts.View.current.board.offsetLeft + plane_ts.toXPix(x + this.offset.x)}px`;
            this.div.style.top = `${plane_ts.View.current.board.offsetTop + plane_ts.toYPix(y + this.offset.y)}px`;
        }
        updateTextPosition() {
            this.div.style.left = `${plane_ts.View.current.board.offsetLeft + plane_ts.toXPix(this.offset.x)}px`;
            this.div.style.top = `${plane_ts.View.current.board.offsetTop + plane_ts.toYPix(this.offset.y)}px`;
        }
        setRotation(degree) {
            this.div.style.transform = `rotate(${degree}deg)`;
        }
        getSize() {
            return [this.div.offsetWidth, this.div.offsetHeight];
        }
        captionPointerdown(event) {
            this.div.setPointerCapture(event.pointerId);
            capturedShape = this;
        }
        captionPointermove(event) {
            if (capturedShape != this) {
                return;
            }
            this.offset.x += plane_ts.fromXPixScale(event.movementX);
            this.offset.y -= plane_ts.fromYPixScale(event.movementY);
            this.div.style.left = `${this.div.offsetLeft + event.movementX}px`;
            this.div.style.top = `${this.div.offsetTop + event.movementY}px`;
        }
        captionPointerup(event) {
            this.div.releasePointerCapture(event.pointerId);
            capturedShape = undefined;
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return new Reading(this, "", []);
        }
        delete(deleted) {
            if (deleted.has(this.id)) {
                return;
            }
            super.delete(deleted);
            this.div.remove();
        }
    }
    plane_ts.TextBlock = TextBlock;
    class Shape extends MathEntity {
        name = "";
        color = plane_ts.fgColor;
        lineWidth = plane_ts.defaultLineWidth;
        caption;
        depends = [];
        constraints = [];
        constructor(obj) {
            super(obj);
            if (obj.name != undefined) {
                this.name = obj.name;
            }
            if (obj.color != undefined) {
                this.color = obj.color;
            }
            if (obj.lineWidth != undefined) {
                this.lineWidth = obj.lineWidth;
            }
            this.caption = obj.caption;
            if (this.caption == undefined && this.name != "") {
                this.caption = this.makeCaption(this);
            }
            if (this.caption != undefined) {
                this.caption.parent = this;
                this.caption.updateTextDiv();
            }
        }
        copy() {
            throw new plane_ts.MyError();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                name: this.name
            });
            if (this.color != plane_ts.fgColor) {
                obj.color = this.color;
            }
            if (this.lineWidth != plane_ts.defaultLineWidth) {
                obj.lineWidth = this.lineWidth;
            }
            if (this.caption != undefined) {
                obj.caption = this.caption.makeObj();
            }
            if (this.depends.length != 0) {
                obj.depends = this.depends.map(x => x.id);
            }
            return obj;
        }
        makeCaption(parent) {
            const x = plane_ts.fromXPixScale(10);
            const y = plane_ts.fromYPixScale(20);
            return new TextBlock({ parent, text: "", isTex: false, offset: new plane_ts.Vec2(x, y) });
        }
        setName(name) {
            this.name = name;
            if (this.name == "") {
                if (this.caption != undefined) {
                    this.caption.delete(new Set());
                    this.caption = undefined;
                }
            }
            else {
                if (this.name != "" && this.caption == undefined) {
                    this.caption = this.makeCaption(this);
                }
                this.caption.updateTextDiv();
            }
            plane_ts.View.current.dirty = true;
        }
        getProperties() {
            return super.getProperties().concat([
                "name", "color", "lineWidth", "caption"
            ]);
        }
        isNear(position) {
            return false;
        }
        modeColor() {
            if (this.mode == Mode.none) {
                return this.color;
            }
            else {
                return getModeColor(this.mode);
            }
        }
        modeLineWidth() {
            return (this.isOver ? plane_ts.OverLineWidth : this.lineWidth);
        }
        calc() {
            this.constraints.forEach(x => x.applyConstraint(this));
        }
        updateCaption() {
        }
        shapePointerdown(position) {
        }
        shapePointermove(position, diff) {
        }
        shapePointerup(position) {
        }
        reading() {
            const name = (this.name != "" ? this.name : this.constructor.name);
            return new Reading(this, i18n_ts.token(name), []);
        }
        show() {
            if (this.caption != undefined) {
                this.caption.show();
            }
        }
        hide() {
            if (this.caption != undefined) {
                this.caption.hide();
            }
        }
        delete(deleted) {
            if (deleted.has(this.id)) {
                return;
            }
            super.delete(deleted);
            if (this.caption != undefined) {
                this.caption.delete(deleted);
            }
        }
        addConstraint(constraint) {
            if (!this.constraints.includes(constraint)) {
                this.constraints.push(constraint);
            }
        }
    }
    plane_ts.Shape = Shape;
    class Point extends Shape {
        static tempPoints = [];
        static radiusPix = 4;
        static radius;
        position;
        positionSave;
        bound;
        origin;
        static zero() {
            return Point.fromArgs(plane_ts.Vec2.zero());
        }
        static fromArgs(position) {
            return new Point({ position });
        }
        constructor(obj) {
            super(obj);
            this.position = obj.position;
            if (this.name != "" && this.caption == undefined) {
                this.caption = this.makeCaption(this);
            }
            if (obj.bound != undefined) {
                this.setBound(obj.bound);
            }
            else {
                this.setPosition(obj.position);
            }
            Point.tempPoints.push(this);
        }
        copy() {
            return Point.fromArgs(this.position.copy());
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                position: this.position
            });
            if (this.bound != undefined) {
                obj.bound = this.bound.toObj();
            }
            return obj;
        }
        setPosition(position) {
            this.position = position;
            this.updateCaption();
            plane_ts.View.current.changed.add(this);
            plane_ts.View.current.dirty = true;
        }
        getBounds() {
            const lines = plane_ts.getLinesByPoint(this);
            const circles = plane_ts.getCircleArcsByPoint(this);
            return lines.concat(circles).filter(x => x.order < this.order);
        }
        setBound(bound) {
            this.bound = bound;
            this.bound.adjustPosition(this, this.position);
            this.setRelations();
        }
        updateCaption() {
            if (this.caption != undefined) {
                this.caption.updateTextDiv();
                this.caption.setTextPosition(this.position.x, this.position.y);
            }
        }
        getProperties() {
            return super.getProperties().concat([
                "position"
            ]);
        }
        isNear(position) {
            return plane_ts.View.current.isNear(position.distance(this.position));
        }
        draw() {
            const color = this.modeColor();
            const radius = plane_ts.modePointRadius(this.mode);
            if (this.visible) {
                plane_ts.View.current.canvas.drawCircleRaw(this.position, radius, color);
            }
            else {
                plane_ts.View.current.canvas.drawCircleRaw(this.position, radius, color, plane_ts.defaultLineWidth);
            }
            if (this.isOver) {
                plane_ts.View.current.canvas.drawCircleRaw(this.position, 3 * Point.radius, "gray", plane_ts.defaultLineWidth);
            }
        }
        add(point) {
            return this.position.add(point.position);
        }
        sub(point) {
            return this.position.sub(point.position);
        }
        dot(point) {
            return this.position.dot(point.position);
        }
        distance(p) {
            if (p instanceof Point) {
                return this.position.distance(p.position);
            }
            else {
                return this.position.distance(p);
            }
        }
        shapePointerdown(position) {
            this.positionSave = this.position.copy();
        }
        shapePointermove(position, diff) {
            const bounds = this.getBounds();
            if (2 <= bounds.length) {
                return;
            }
            else if (bounds.length == 1) {
                const bound = bounds[0];
                if (bound instanceof AbstractLine) {
                    this.setPosition(plane_ts.calcFootOfPerpendicular(position, bound));
                }
                else if (bound instanceof CircleArc) {
                    bound.adjustPosition(this, position);
                }
                else {
                    throw new plane_ts.MyError();
                }
            }
            else {
                if (this.positionSave != undefined) {
                    this.setPosition(this.positionSave.add(diff));
                }
                else {
                    this.setPosition(position);
                }
            }
            this.calc();
        }
        shapePointerup(position) {
            this.positionSave = undefined;
        }
        reading() {
            if (this.bound instanceof AbstractLine) {
                return this.textReading(plane_ts.TT("Draw a point on the line."));
            }
            else if (this.bound instanceof Circle) {
                return this.textReading(plane_ts.TT("Draw a point on the circle."));
            }
            else if (this.bound instanceof Arc) {
                return this.textReading(plane_ts.TT("Draw a point on the arc."));
            }
            else {
                return this.textReading(plane_ts.TT("Draw a point."));
            }
        }
        setRelations() {
            super.setRelations();
            if (this.bound instanceof AbstractLine) {
                plane_ts.addPointOnLines(this, this.bound);
            }
            else if (this.bound instanceof CircleArc) {
                plane_ts.addPointOnCircleArcs(this, this.bound);
            }
            else if (this.bound != undefined) {
                throw new plane_ts.MyError();
            }
        }
    }
    plane_ts.Point = Point;
    let LineKind;
    (function (LineKind) {
        LineKind[LineKind["line"] = 0] = "line";
        LineKind[LineKind["ray"] = 1] = "ray";
        LineKind[LineKind["ray_reverse"] = 2] = "ray_reverse";
        LineKind[LineKind["line_segment"] = 3] = "line_segment";
    })(LineKind = plane_ts.LineKind || (plane_ts.LineKind = {}));
    class AbstractLine extends Shape {
        lineKind;
        pointA;
        e;
        constructor(obj) {
            super(obj);
            if (obj.lineKind == undefined) {
                throw new plane_ts.MyError("line kind is undefined.");
            }
            this.lineKind = obj.lineKind;
            this.pointA = obj.pointA;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                lineKind: this.lineKind,
                pointA: this.pointA.toObj()
            });
            return obj;
        }
        dependencies() {
            return super.dependencies().concat([this.pointA]);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA);
        }
        getProperties() {
            return super.getProperties().concat([
                "lineKind"
            ]);
        }
        normal() {
            return this.e.rot90();
        }
        isNear(position) {
            const distance = plane_ts.distanceFromLine(this.normal(), this.pointA.position, position);
            return plane_ts.View.current.isNear(distance);
        }
        draw() {
            const l = plane_ts.View.current.max.distance(plane_ts.View.current.min);
            const p_minus = this.pointA.position.add(this.e.mul(-l));
            const p_plus = this.pointA.position.add(this.e.mul(l));
            switch (this.lineKind) {
                case LineKind.line_segment:
                case LineKind.line:
                    plane_ts.View.current.canvas.drawLine(this, p_minus, p_plus);
                    break;
                case LineKind.ray:
                    plane_ts.View.current.canvas.drawLine(this, this.pointA.position, p_plus);
                    break;
                case LineKind.ray_reverse:
                    plane_ts.View.current.canvas.drawLine(this, this.pointA.position, p_minus);
                    break;
            }
        }
        adjustPosition(point, position) {
            const foot = plane_ts.calcFootOfPerpendicular(point.position, this);
            point.setPosition(foot);
        }
        setRelations() {
            super.setRelations();
            this.pointA.setRelations();
            plane_ts.addPointOnLines(this.pointA, this);
        }
        includesPoint(point) {
            let line_set = plane_ts.pointOnLines.get(point);
            if (line_set != undefined) {
                return line_set.has(this);
            }
            else {
                return false;
            }
        }
    }
    plane_ts.AbstractLine = AbstractLine;
    class LineByPoints extends AbstractLine {
        pointB;
        constructor(obj) {
            super(obj);
            this.pointB = obj.pointB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                pointB: this.pointB.toObj()
            });
            return obj;
        }
        dependencies() {
            return super.dependencies().concat([this.pointB]);
        }
        calc() {
            this.e = this.pointB.sub(this.pointA).unit();
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointB);
        }
        length() {
            return this.pointA.distance(this.pointB);
        }
        isNear(position) {
            if (!super.isNear(position)) {
                return false;
            }
            if (this.lineKind == LineKind.line) {
                return true;
            }
            let n;
            if (this.lineKind == LineKind.ray || this.lineKind == LineKind.line_segment) {
                n = this.e.dot(position.sub(this.pointA.position));
            }
            else if (this.lineKind == LineKind.ray_reverse) {
                n = -this.e.dot(position.sub(this.pointB.position));
            }
            else {
                throw new plane_ts.MyError();
            }
            switch (this.lineKind) {
                case LineKind.ray:
                case LineKind.ray_reverse:
                    return 0 <= n;
                case LineKind.line_segment: {
                    const AB = this.pointA.distance(this.pointB);
                    return 0 <= n && n <= AB;
                }
            }
        }
        draw() {
            plane_ts.View.current.canvas.drawLineWith2Points(this, this.pointB);
        }
        reading() {
            return this.textReading(plane_ts.TT('Draw a line.'));
            /*
                    switch(this.lineKind){
                    case LineKind.line:
                        return new Reading(this, TT('Draw a line through two points.'), []);
                    case LineKind.ray:
                    case LineKind.ray_reverse:
                        return new Reading(this, TT('Draw a half-line through two points.'), []);
                    case LineKind.line_segment:
                        return new Reading(this, TT('Draw a line segment through two points.'), []);
                    default:
                        throw new MyError();
                    }
            */
        }
        setRelations() {
            super.setRelations();
            this.pointB.setRelations();
            plane_ts.addPointOnLines(this.pointB, this);
        }
    }
    plane_ts.LineByPoints = LineByPoints;
    function makeLineSegment(pointA, pointB) {
        return new LineByPoints({ lineKind: LineKind.line_segment, pointA, pointB });
    }
    plane_ts.makeLineSegment = makeLineSegment;
    function makeRay(pointA, pointB) {
        return new LineByPoints({ lineKind: LineKind.ray, pointA, pointB });
    }
    plane_ts.makeRay = makeRay;
    class ParallelLine extends AbstractLine {
        line;
        constructor(obj) {
            super(obj);
            this.line = obj.line;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                line: this.line.toObj()
            });
            return obj;
        }
        dependencies() {
            return super.dependencies().concat([this.line]);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.line);
        }
        calc() {
            this.e = this.line.e.copy();
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw a line through a point that is parallel to another line.'), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addParallelLines(this, this.line);
        }
    }
    plane_ts.ParallelLine = ParallelLine;
    class CircleArcEllipse extends Shape {
        center;
        constructor(obj) {
            super(obj);
            this.center = obj.center;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                center: this.center.toObj(),
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.center);
        }
        dependencies() {
            return [this.center];
        }
    }
    plane_ts.CircleArcEllipse = CircleArcEllipse;
    class CircleArc extends CircleArcEllipse {
        adjustPosition(point, position) {
            const v = position.sub(this.center.position);
            const theta = Math.atan2(v.y, v.x);
            const x = this.radius() * Math.cos(theta);
            const y = this.radius() * Math.sin(theta);
            const new_pos = this.center.position.add(new plane_ts.Vec2(x, y));
            point.setPosition(new_pos);
        }
        includesPoint(point) {
            let circle_arc_set = plane_ts.pointOnCircleArcs.get(point);
            if (circle_arc_set != undefined) {
                return circle_arc_set.has(this);
            }
            else {
                return false;
            }
        }
        setRelations() {
            super.setRelations();
            plane_ts.addCenterOfCircleArcs(this.center, this);
        }
    }
    plane_ts.CircleArc = CircleArc;
    class Circle extends CircleArc {
        constructor(obj) {
            super(obj);
        }
        isNear(position) {
            const r = position.distance(this.center.position);
            return plane_ts.View.current.isNear(Math.abs(r - this.radius()));
        }
        draw() {
            const stroke_color = this.modeColor();
            const line_width = this.modeLineWidth();
            plane_ts.View.current.canvas.drawCircle(this, this.center.position, this.radius());
        }
    }
    plane_ts.Circle = Circle;
    class CircleByPoint extends Circle {
        point;
        constructor(obj) {
            super(obj);
            this.point = obj.point;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                point: this.point.toObj(),
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.point);
        }
        dependencies() {
            return super.dependencies().concat([this.point]);
        }
        calc() {
        }
        radius() {
            return this.center.position.distance(this.point.position);
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw a circle.'), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnCircleArcs(this.point, this);
        }
    }
    plane_ts.CircleByPoint = CircleByPoint;
    class CircleByRadius extends Circle {
        lengthSymbol;
        constructor(obj) {
            super(obj);
            this.lengthSymbol = obj.lengthSymbol;
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                lengthSymbol: this.lengthSymbol.toObj(),
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            this.lengthSymbol.getAllShapes(shapes);
        }
        dependencies() {
            return super.dependencies().concat([this.lengthSymbol]);
        }
        radius() {
            return this.lengthSymbol.length();
        }
        setRelations() {
            super.setRelations();
            if (this.lengthSymbol.circle != undefined) {
                plane_ts.addEqualCircleArcs(this, this.lengthSymbol.circle);
            }
        }
    }
    plane_ts.CircleByRadius = CircleByRadius;
    class Ellipse extends CircleArcEllipse {
        xPoint;
        radiusY;
        constructor(obj) {
            super(obj);
            this.xPoint = obj.xPoint;
            this.radiusY = obj.radiusY;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                xPoint: this.xPoint.toObj(),
                radiusY: this.radiusY
            });
            return obj;
        }
        setRadiusY(radiusY) {
            this.radiusY = radiusY;
            plane_ts.View.current.dirty = true;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.xPoint);
        }
        dependencies() {
            return super.dependencies().concat([this.center, this.xPoint]);
        }
        draw() {
            const radius_x = this.xPoint.position.distance(this.center.position);
            const center_to_x = this.xPoint.sub(this.center);
            const rotation = Math.atan2(-center_to_x.y, center_to_x.x);
            const color = this.modeColor();
            const line_width = (this.isOver || this.mode != Mode.none ? 3 : 1);
            plane_ts.View.current.canvas.drawEllipse(this.center.position, radius_x, this.radiusY, rotation, color, line_width);
        }
    }
    plane_ts.Ellipse = Ellipse;
    class Arc extends CircleArc {
        static getAngles(center, pointA, pointB) {
            const center_pos = (center instanceof Point ? center.position : center);
            const pointA_pos = (pointA instanceof Point ? pointA.position : pointA);
            const pointB_pos = (pointB instanceof Point ? pointB.position : pointB);
            return [pointA_pos, pointB_pos].map(p => p.sub(center_pos)).map(v => Math.atan2(v.y, v.x));
        }
    }
    plane_ts.Arc = Arc;
    class ArcByPoint extends Arc {
        pointA;
        pointB;
        constructor(obj) {
            super(obj);
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj()
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        dependencies() {
            return super.dependencies().concat([this.pointA, this.pointB]);
        }
        calc() {
            this.adjustPosition(this.pointB, this.pointB.position);
        }
        isNear(position) {
            const r = position.distance(this.center.position);
            if (plane_ts.View.current.isNear(Math.abs(r - this.radius()))) {
                const v = position.sub(this.center.position);
                let theta = Math.atan2(v.y, v.x);
                const [startAngle, endAngle] = Arc.getAngles(this.center, this.pointA, this.pointB);
                return plane_ts.isBetweenAngles(startAngle, theta, endAngle);
            }
            return false;
        }
        draw() {
            const [startAngle, endAngle] = Arc.getAngles(this.center, this.pointA, this.pointB);
            plane_ts.View.current.canvas.drawArc(this, this.center.position, this.radius(), startAngle, endAngle);
        }
        radius() {
            return this.center.position.distance(this.pointA.position);
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw an arc.'), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnCircleArcs(this.pointA, this);
            plane_ts.addPointOnCircleArcs(this.pointB, this);
        }
    }
    plane_ts.ArcByPoint = ArcByPoint;
    class ArcByRadius extends Arc {
        startAngle;
        endAngle;
        pointA;
        pointB;
        constructor(obj) {
            super(obj);
            this.startAngle = obj.startAngle;
            this.endAngle = obj.endAngle;
            this.pointA = Point.zero();
            this.pointB = Point.zero();
            this.pointA.visible = false;
            this.pointB.visible = false;
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                startAngle: this.startAngle,
                endAngle: this.endAngle
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        setOrder() {
            if (MathEntity.orderSet.has(this)) {
                return;
            }
            this.order = MathEntity.orderSet.size;
            MathEntity.orderSet.add(this);
            this.pointA.setOrder();
            this.pointB.setOrder();
        }
        positionFromAngle(theta) {
            const length = this.radius();
            const x = this.center.position.x + length * Math.cos(theta);
            const y = this.center.position.y + length * Math.sin(theta);
            return new plane_ts.Vec2(x, y);
        }
        adjustPosition(point, position) {
            const v = position.sub(this.center.position);
            const theta = Math.atan2(v.y, v.x);
            if (point == this.pointA) {
                this.startAngle = theta;
            }
            else {
                this.endAngle = theta;
            }
            const new_pos = this.positionFromAngle(theta);
            point.setPosition(new_pos);
        }
        calc() {
            this.pointA.setPosition(this.positionFromAngle(this.startAngle));
            this.pointB.setPosition(this.positionFromAngle(this.endAngle));
        }
        isNear(position) {
            const r = position.distance(this.center.position);
            if (plane_ts.View.current.isNear(Math.abs(r - this.radius()))) {
                const v = position.sub(this.center.position);
                const th = Math.atan2(v.y, v.x);
                return this.startAngle <= th && th <= this.endAngle;
            }
            return false;
        }
        angles() {
            const v1 = this.pointA.sub(this.center);
            const th1 = Math.atan2(v1.y, v1.x);
            const v2 = this.pointB.sub(this.center);
            const th2 = Math.atan2(v2.y, v2.x);
            return [th1, th2];
        }
        draw() {
            plane_ts.View.current.canvas.drawArc(this, this.center.position, this.radius(), this.startAngle, this.endAngle);
        }
        reading() {
            return new Reading(this, plane_ts.TT("Draw an arc with the same radius."), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnCircleArcs(this.pointA, this);
            plane_ts.addPointOnCircleArcs(this.pointB, this);
        }
    }
    plane_ts.ArcByRadius = ArcByRadius;
    class ArcByLengthSymbol extends ArcByRadius {
        lengthSymbol;
        constructor(obj) {
            super(obj);
            this.lengthSymbol = obj.lengthSymbol;
            this.calc();
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                lengthSymbol: this.lengthSymbol.toObj(),
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            this.lengthSymbol.getAllShapes(shapes);
        }
        dependencies() {
            return super.dependencies().concat([this.lengthSymbol]);
        }
        radius() {
            return this.lengthSymbol.length();
        }
        setRelations() {
            super.setRelations();
            if (this.lengthSymbol.circle != undefined) {
                plane_ts.addEqualCircleArcs(this, this.lengthSymbol.circle);
            }
        }
    }
    plane_ts.ArcByLengthSymbol = ArcByLengthSymbol;
    class ArcByCircle extends ArcByRadius {
        circle;
        constructor(obj) {
            super(obj);
            this.circle = obj.circle;
            this.calc();
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                circle: this.circle.toObj(),
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            this.circle.getAllShapes(shapes);
        }
        dependencies() {
            return super.dependencies().concat([this.circle]);
        }
        radius() {
            return this.circle.radius();
        }
        setRelations() {
            super.setRelations();
            plane_ts.addEqualCircleArcs(this, this.circle);
        }
    }
    plane_ts.ArcByCircle = ArcByCircle;
    class Polygon extends Shape {
        static colorIndex = 0;
        points;
        lines;
        constructor(obj) {
            super(obj);
            this.points = obj.points;
            this.lines = obj.lines;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                points: this.points.map(x => x.toObj()),
                lines: this.lines.map(x => x.toObj())
            });
            return obj;
        }
        dependencies() {
            return super.dependencies().concat(this.lines).concat(this.points);
        }
        shrinkPoints() {
            const positions = this.points.map(x => x.position);
            let center = positions[0];
            positions.slice(1).forEach(x => center = center.add(x));
            center = center.mul(1 / positions.length);
            const shrinked_positions = [];
            for (const position of positions) {
                const v = position.sub(center);
                const len = v.len();
                const diff = plane_ts.View.current.fromXPixScale(1 * plane_ts.OverLineWidth);
                const shrinked_v = v.unit().mul(len - diff);
                const new_position = center.add(shrinked_v);
                shrinked_positions.push(new_position);
            }
            return shrinked_positions;
        }
        draw() {
            const color = this.modeColor();
            if ([Mode.target1, Mode.target2].includes(this.mode)) {
                const positions = this.points.map(x => x.position);
                plane_ts.View.current.canvas.drawPolygonRaw(positions, color, NaN, true);
                return;
            }
            const radius = (this.mode == Mode.none ? 1 : 2) * Point.radius;
            let positions;
            if (this.mode == Mode.none) {
                positions = this.points.map(x => x.position);
            }
            else {
                positions = this.shrinkPoints();
            }
            for (const position of positions) {
                plane_ts.View.current.canvas.drawCircleRaw(position, radius, color);
            }
            const line_width = (this.mode == Mode.none ? plane_ts.defaultLineWidth : plane_ts.OverLineWidth);
            plane_ts.View.current.canvas.drawPolygonRaw(positions, color, line_width, false);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(...this.points, ...this.lines);
        }
        reading() {
            switch (this.points.length) {
                case 3:
                    return new Reading(this, plane_ts.TT('Draw a triangle.'), []);
                case 4:
                    return new Reading(this, plane_ts.TT('Draw a quadrilateral.'), []);
            }
            throw new plane_ts.MyError();
        }
        setRelations() {
            super.setRelations();
            this.points.forEach(x => x.setRelations());
            this.lines.forEach(x => x.setRelations());
            const num_points = this.points.length;
            const lines = plane_ts.range(num_points).map(i => plane_ts.getCommonLineOfPoints(this.points[i], this.points[(i + 1) % num_points]));
            if (lines.some(x => x == undefined)) {
                this.lines.forEach(x => x.setRelations());
                throw new plane_ts.MyError();
            }
            if (plane_ts.range(this.points.length).some(i => lines[i] != this.lines[i])) {
                // msg(`modify lines of ${this.id}:${this.constructor.name}`);
                this.lines = lines;
            }
        }
        isEqual(polygon) {
            return plane_ts.areSetsEqual(this.points, polygon.points);
        }
    }
    plane_ts.Polygon = Polygon;
    class Triangle extends Polygon {
        static fromPoints(points) {
            const lines = plane_ts.range(3).map(i => plane_ts.getCommonLineOfPoints(points[i], points[(i + 1) % 3]));
            if (lines.some(x => x == undefined)) {
                throw new plane_ts.MyError();
            }
            const triangle = new Triangle({ points, lines });
            return triangle;
        }
        angleIndex(angle) {
            const idx = this.points.indexOf(angle.intersection);
            if (idx != -1) {
                const other_points = [0, 1, 2].filter(i => i != idx).map(i => this.points[i]);
                plane_ts.assert(other_points.length == 2);
                for (const [p1, p2] of plane_ts.permutation(other_points)) {
                    if (angle.lineA.includesPoint(p1) && angle.lineB.includesPoint(p2)) {
                        return idx;
                    }
                }
            }
            return -1;
        }
        lengthSymbolIndex(lengthSymbol) {
            for (const [i1, i2] of [[0, 1], [1, 2], [2, 0]]) {
                for (const [p1, p2] of plane_ts.permutation([this.points[i1], this.points[i2]])) {
                    if (lengthSymbol.pointA == p1 && lengthSymbol.pointB == p2) {
                        return i1;
                    }
                }
            }
            return -1;
        }
        key() {
            return this.points.map(x => `${x.id}`).join(":");
        }
        isCongruent(triangle) {
            for (const triangles of plane_ts.congruentTriangles) {
                if (triangles.some(x => x.isEqual(this))) {
                    return triangles.some(x => x.isEqual(triangle));
                }
            }
            return false;
        }
        isSimilar(triangle) {
            if (this.isCongruent(triangle)) {
                return true;
            }
            for (const triangles of plane_ts.similarTriangles) {
                if (triangles.some(x => x.isEqual(this))) {
                    return triangles.some(x => x.isEqual(triangle));
                }
            }
            return false;
        }
    }
    plane_ts.Triangle = Triangle;
    class Quadrilateral extends Polygon {
        isParallelogram() {
            return plane_ts.isParallelogramPoints(this.points);
        }
        diagonalIntersection() {
            const point_pairs = [[this.points[0], this.points[2]], [this.points[1], this.points[3]]];
            const diagonals = point_pairs.map(x => plane_ts.getCommonLineOfPoints(x[0], x[1]));
            if (diagonals.every(x => x != undefined)) {
                return plane_ts.getCommonPointOfLines(diagonals[0], diagonals[1]);
            }
            return undefined;
        }
    }
    plane_ts.Quadrilateral = Quadrilateral;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    const parseMath = parser_ts.parseMath;
    plane_ts.enumSelectionClassName = "enum_selection_item";
    plane_ts.menuDialogs = new Map();
    let TriangleCongruenceReason;
    (function (TriangleCongruenceReason) {
        TriangleCongruenceReason[TriangleCongruenceReason["none"] = 0] = "none";
        TriangleCongruenceReason[TriangleCongruenceReason["side_side_side"] = 1] = "side_side_side";
        TriangleCongruenceReason[TriangleCongruenceReason["side_angle_side"] = 2] = "side_angle_side";
        TriangleCongruenceReason[TriangleCongruenceReason["angle_side_angle"] = 3] = "angle_side_angle";
    })(TriangleCongruenceReason = plane_ts.TriangleCongruenceReason || (plane_ts.TriangleCongruenceReason = {}));
    ;
    let ShapeEquationReason;
    (function (ShapeEquationReason) {
        ShapeEquationReason[ShapeEquationReason["none"] = 50] = "none";
        ShapeEquationReason[ShapeEquationReason["sum_of_angles_is_pi"] = 51] = "sum_of_angles_is_pi";
        ShapeEquationReason[ShapeEquationReason["sum_of_angles_is_equal"] = 52] = "sum_of_angles_is_equal";
        ShapeEquationReason[ShapeEquationReason["sum_of_lengths_is_equal"] = 53] = "sum_of_lengths_is_equal";
        ShapeEquationReason[ShapeEquationReason["sum_of_interior_angles_of_triangle_is_pi"] = 54] = "sum_of_interior_angles_of_triangle_is_pi";
        ShapeEquationReason[ShapeEquationReason["sum_of_interior_angles_of_quadrilateral_is_2pi"] = 55] = "sum_of_interior_angles_of_quadrilateral_is_2pi";
        ShapeEquationReason[ShapeEquationReason["exterior_angle_theorem"] = 56] = "exterior_angle_theorem";
    })(ShapeEquationReason = plane_ts.ShapeEquationReason || (plane_ts.ShapeEquationReason = {}));
    let LengthEqualityReason;
    (function (LengthEqualityReason) {
        LengthEqualityReason[LengthEqualityReason["none"] = 100] = "none";
        LengthEqualityReason[LengthEqualityReason["radii_equal"] = 101] = "radii_equal";
        LengthEqualityReason[LengthEqualityReason["common_circle"] = 102] = "common_circle";
        LengthEqualityReason[LengthEqualityReason["parallel_lines_distance"] = 103] = "parallel_lines_distance";
        LengthEqualityReason[LengthEqualityReason["not_used"] = 104] = "not_used";
        LengthEqualityReason[LengthEqualityReason["congruent_triangles"] = 105] = "congruent_triangles";
        LengthEqualityReason[LengthEqualityReason["parallelogram_opposite_sides"] = 106] = "parallelogram_opposite_sides";
        LengthEqualityReason[LengthEqualityReason["parallelogram_diagonal_bisection"] = 107] = "parallelogram_diagonal_bisection";
        LengthEqualityReason[LengthEqualityReason["equivalence_class"] = 108] = "equivalence_class";
        LengthEqualityReason[LengthEqualityReason["midpoint"] = 109] = "midpoint";
    })(LengthEqualityReason = plane_ts.LengthEqualityReason || (plane_ts.LengthEqualityReason = {}));
    ;
    let ExprTransformReason;
    (function (ExprTransformReason) {
        ExprTransformReason[ExprTransformReason["none"] = 150] = "none";
        ExprTransformReason[ExprTransformReason["transposition"] = 151] = "transposition";
        ExprTransformReason[ExprTransformReason["equality"] = 152] = "equality";
        ExprTransformReason[ExprTransformReason["add_equation"] = 153] = "add_equation";
        ExprTransformReason[ExprTransformReason["substitution"] = 154] = "substitution";
        ExprTransformReason[ExprTransformReason["dividing_equation"] = 155] = "dividing_equation";
        ExprTransformReason[ExprTransformReason["arg_shift"] = 156] = "arg_shift";
    })(ExprTransformReason = plane_ts.ExprTransformReason || (plane_ts.ExprTransformReason = {}));
    let AngleEqualityReason;
    (function (AngleEqualityReason) {
        AngleEqualityReason[AngleEqualityReason["none"] = 200] = "none";
        AngleEqualityReason[AngleEqualityReason["vertical_angles"] = 201] = "vertical_angles";
        AngleEqualityReason[AngleEqualityReason["parallel_line_angles"] = 202] = "parallel_line_angles";
        AngleEqualityReason[AngleEqualityReason["angle_bisector"] = 203] = "angle_bisector";
        AngleEqualityReason[AngleEqualityReason["congruent_triangles"] = 204] = "congruent_triangles";
        AngleEqualityReason[AngleEqualityReason["parallelogram_opposite_angles"] = 205] = "parallelogram_opposite_angles";
        AngleEqualityReason[AngleEqualityReason["similar_triangles"] = 206] = "similar_triangles";
        AngleEqualityReason[AngleEqualityReason["isosceles_triangle_base_angles"] = 207] = "isosceles_triangle_base_angles";
    })(AngleEqualityReason = plane_ts.AngleEqualityReason || (plane_ts.AngleEqualityReason = {}));
    let PropositionReason;
    (function (PropositionReason) {
        PropositionReason[PropositionReason["none"] = 250] = "none";
        PropositionReason[PropositionReason["angle_equality"] = 251] = "angle_equality";
        PropositionReason[PropositionReason["length_equality"] = 252] = "length_equality";
        PropositionReason[PropositionReason["equation"] = 253] = "equation";
    })(PropositionReason = plane_ts.PropositionReason || (plane_ts.PropositionReason = {}));
    let TriangleQuadrilateralClass;
    (function (TriangleQuadrilateralClass) {
        TriangleQuadrilateralClass[TriangleQuadrilateralClass["none"] = 300] = "none";
        TriangleQuadrilateralClass[TriangleQuadrilateralClass["trapezoid"] = 301] = "trapezoid";
        TriangleQuadrilateralClass[TriangleQuadrilateralClass["parallelogram"] = 302] = "parallelogram";
        TriangleQuadrilateralClass[TriangleQuadrilateralClass["rhombus"] = 303] = "rhombus";
        TriangleQuadrilateralClass[TriangleQuadrilateralClass["isoscelesTriangle"] = 304] = "isoscelesTriangle";
    })(TriangleQuadrilateralClass = plane_ts.TriangleQuadrilateralClass || (plane_ts.TriangleQuadrilateralClass = {}));
    let ParallelogramReason;
    (function (ParallelogramReason) {
        ParallelogramReason[ParallelogramReason["none"] = 400] = "none";
        ParallelogramReason[ParallelogramReason["each_opposite_sides_are_equal"] = 401] = "each_opposite_sides_are_equal";
        ParallelogramReason[ParallelogramReason["each_opposite_sides_are_parallel"] = 402] = "each_opposite_sides_are_parallel";
        ParallelogramReason[ParallelogramReason["each_opposite_angles_are_equal"] = 403] = "each_opposite_angles_are_equal";
        ParallelogramReason[ParallelogramReason["one_opposite_sides_are_parallel_and_equal"] = 404] = "one_opposite_sides_are_parallel_and_equal";
        ParallelogramReason[ParallelogramReason["each_diagonal_bisections"] = 405] = "each_diagonal_bisections";
    })(ParallelogramReason = plane_ts.ParallelogramReason || (plane_ts.ParallelogramReason = {}));
    let RhombusReason;
    (function (RhombusReason) {
        RhombusReason[RhombusReason["none"] = 500] = "none";
        RhombusReason[RhombusReason["all_sides_are_equal"] = 501] = "all_sides_are_equal";
    })(RhombusReason = plane_ts.RhombusReason || (plane_ts.RhombusReason = {}));
    let IsoscelesTriangleReason;
    (function (IsoscelesTriangleReason) {
        IsoscelesTriangleReason[IsoscelesTriangleReason["none"] = 520] = "none";
        IsoscelesTriangleReason[IsoscelesTriangleReason["two_sides_are_equal"] = 521] = "two_sides_are_equal";
    })(IsoscelesTriangleReason = plane_ts.IsoscelesTriangleReason || (plane_ts.IsoscelesTriangleReason = {}));
    let ParallelReason;
    (function (ParallelReason) {
        ParallelReason[ParallelReason["none"] = 600] = "none";
        ParallelReason[ParallelReason["parallelogram"] = 601] = "parallelogram";
        ParallelReason[ParallelReason["corresponding_angles_or_alternate_angles_are_equal"] = 602] = "corresponding_angles_or_alternate_angles_are_equal";
        ParallelReason[ParallelReason["supplementary_angles"] = 603] = "supplementary_angles";
    })(ParallelReason = plane_ts.ParallelReason || (plane_ts.ParallelReason = {}));
    let TriangleSimilarityReason;
    (function (TriangleSimilarityReason) {
        TriangleSimilarityReason[TriangleSimilarityReason["none"] = 700] = "none";
        TriangleSimilarityReason[TriangleSimilarityReason["two_equal_angle_pairs"] = 701] = "two_equal_angle_pairs";
    })(TriangleSimilarityReason = plane_ts.TriangleSimilarityReason || (plane_ts.TriangleSimilarityReason = {}));
    ;
    let ShapeType;
    (function (ShapeType) {
        ShapeType[ShapeType["parallelogram"] = 800] = "parallelogram";
        ShapeType[ShapeType["rhombus"] = 801] = "rhombus";
        ShapeType[ShapeType["isosceles_triangle"] = 802] = "isosceles_triangle";
    })(ShapeType = plane_ts.ShapeType || (plane_ts.ShapeType = {}));
    plane_ts.enumToImgName = new Map([
        [TriangleCongruenceReason.side_side_side, "side_side_side"],
        [TriangleCongruenceReason.side_angle_side, "side_angle_side"],
        [TriangleCongruenceReason.angle_side_angle, "angle_side_angle"],
        [ShapeEquationReason.sum_of_angles_is_pi, "sum_of_angles_is_pi"],
        [ShapeEquationReason.sum_of_angles_is_equal, "sum_of_angles_is_equal"],
        [ShapeEquationReason.sum_of_lengths_is_equal, "sum_of_lengths_is_equal"],
        [ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi, "sum_of_interior_angles_of_triangle_is_pi"],
        [ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi, "sum_of_interior_angles_of_quadrilateral_is_2pi"],
        [ShapeEquationReason.exterior_angle_theorem, "exterior_angle_theorem"],
        [LengthEqualityReason.radii_equal, "radii_equal"],
        [LengthEqualityReason.common_circle, "common_circle"],
        [LengthEqualityReason.parallel_lines_distance, "parallel_lines_distance"],
        [LengthEqualityReason.congruent_triangles, "triangle_congruence"],
        [LengthEqualityReason.parallelogram_opposite_sides, "each_opposite_sides_are_equal"],
        [LengthEqualityReason.parallelogram_diagonal_bisection, "each_diagonal_bisections"],
        [LengthEqualityReason.equivalence_class, "equivalence_class"],
        [LengthEqualityReason.midpoint, "midpoint"],
        [ExprTransformReason.transposition, "transposition"],
        [ExprTransformReason.equality, "equality"],
        [ExprTransformReason.add_equation, "add_equation"],
        [ExprTransformReason.substitution, "substitution"],
        [ExprTransformReason.dividing_equation, "dividing_equation"],
        [ExprTransformReason.arg_shift, "arg_shift"],
        [AngleEqualityReason.vertical_angles, "vertical_angles"],
        [AngleEqualityReason.parallel_line_angles, "parallel_line_angles"],
        [AngleEqualityReason.angle_bisector, "angle_bisector"],
        [AngleEqualityReason.congruent_triangles, "triangle_congruence"],
        [AngleEqualityReason.parallelogram_opposite_angles, "each_opposite_angles_are_equal"],
        [AngleEqualityReason.similar_triangles, "triangle_similarity"],
        [AngleEqualityReason.isosceles_triangle_base_angles, "isosceles_triangle_base_angles"],
        [TriangleQuadrilateralClass.trapezoid, ""],
        [TriangleQuadrilateralClass.parallelogram, "quadrilateral_classifier"],
        [TriangleQuadrilateralClass.rhombus, "all_sides_are_equal"],
        [ParallelogramReason.each_opposite_sides_are_equal, "each_opposite_sides_are_equal"],
        [ParallelogramReason.each_opposite_sides_are_parallel, "each_opposite_sides_are_parallel"],
        [ParallelogramReason.each_opposite_angles_are_equal, "each_opposite_angles_are_equal"],
        [ParallelogramReason.one_opposite_sides_are_parallel_and_equal, "one_opposite_sides_are_parallel_and_equal"],
        [ParallelogramReason.each_diagonal_bisections, "each_diagonal_bisections"],
        [RhombusReason.all_sides_are_equal, "all_sides_are_equal"],
        [IsoscelesTriangleReason.two_sides_are_equal, "isosceles_triangle"],
        [ParallelReason.parallelogram, "quadrilateral_classifier"],
        [ParallelReason.corresponding_angles_or_alternate_angles_are_equal, "parallel_line_angles"],
        [ParallelReason.supplementary_angles, "parallel_by_supplementary_angles"],
        [TriangleSimilarityReason.two_equal_angle_pairs, "two_equal_angle_pairs"],
        [ShapeType.parallelogram, "quadrilateral_classifier"],
        [ShapeType.rhombus, "all_sides_are_equal"],
        [ShapeType.isosceles_triangle, "isosceles_triangle"],
        [PropositionReason.angle_equality, "equal_angle"],
        [PropositionReason.length_equality, "equal_length"],
        [PropositionReason.equation, "expr_transform"],
    ]);
    async function makeSelectionDlg() {
        const data = [
            [plane_ts.TT("Reason for length equality"), "length-equality-reason", LengthEqualityReason],
            [plane_ts.TT("Reason for angle equality"), "angle-equality-reason", AngleEqualityReason],
            [plane_ts.TT("Shape type"), "shape-type", ShapeType],
            [plane_ts.TT("Reason for parallelogram"), "parallelogram-reason", ParallelogramReason],
            [plane_ts.TT("Reason for rhombus"), "rhombus-reason", RhombusReason],
            [plane_ts.TT("Reason for isosceles triangle"), "isosceles-triangle-reason", IsoscelesTriangleReason],
            [plane_ts.TT("Reason for parallel"), "parallel-reason", ParallelReason],
            [plane_ts.TT("Equation derived from shapes"), "shape-equation-reason", ShapeEquationReason],
            [plane_ts.TT("Types of formula transformation"), "expr-transform-reason", ExprTransformReason],
            [plane_ts.TT("Types of proposition"), "proposition-reason", PropositionReason],
        ];
        const titles = data.map(x => x[0]);
        const span_id_prefixes = data.map(x => x[1]);
        const dics = data.map(x => x[2]);
        plane_ts.menuDialogs.clear();
        for (const [idx, dic] of dics.entries()) {
            const children = [];
            const title = layout_ts.$label({
                text: titles[idx],
                borderWidth: 5,
                borderStyle: "ridge",
                padding: 5,
            });
            children.push(title);
            for (const [key, value] of Object.entries(dic)) {
                if (isNaN(Number(key))) {
                    if (["none", "not_used"].includes(key)) {
                        continue;
                    }
                    let img_name = plane_ts.enumToImgName.get(value);
                    plane_ts.assert(img_name != undefined && img_name != "");
                    // console.log(`of key:[${key}]${typeof key} value:[${value}]${typeof value} dic[value]:[${dic[value]}]`); 
                    const img = layout_ts.$img({
                        id: `${span_id_prefixes[idx]}-${key}`,
                        className: plane_ts.enumSelectionClassName,
                        imgUrl: `./lib/plane/img/${img_name}.png`,
                        width: "64px",
                        height: "64px",
                        borderWidth: 5,
                        borderStyle: "ridge",
                        horizontalAlign: "center",
                    });
                    img.html().dataset.operation_value = `${value}`;
                    // img.html().style.position = "";
                    children.push(img);
                }
            }
            const grid = layout_ts.$grid({
                children: children
            });
            const dlg = layout_ts.$dialog({
                content: grid
            });
            plane_ts.menuDialogs.set(dic, dlg);
        }
    }
    plane_ts.makeSelectionDlg = makeSelectionDlg;
    class Assumption extends plane_ts.MathEntity {
        equation;
        textBlock;
        constructor(obj) {
            super(obj);
            this.equation = obj.equation;
            this.textBlock = plane_ts.makeEquationTextBlock(this, this.equation);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            if (this.textBlock != undefined) {
                shapes.push(this.textBlock);
            }
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return new Reading(this, "", []);
        }
    }
    plane_ts.Assumption = Assumption;
    class Statement extends plane_ts.Shape {
        static idTimeout;
        reason = 0;
        mathText = "";
        latexBox;
        auxiliaryShapes = [];
        selectedShapes;
        constructor(obj) {
            super(obj);
            this.selectedShapes = obj.shapes;
            if (obj.reason != undefined) {
                this.reason = obj.reason;
            }
            if (obj.auxiliaryShapes != undefined) {
                this.auxiliaryShapes = obj.auxiliaryShapes;
            }
            if (obj.mathText != undefined) {
                this.mathText = obj.mathText;
            }
        }
        dependencies() {
            return this.selectedShapes;
        }
        getProperties() {
            return super.getProperties().concat([
                "reason", "selectedShapes", "auxiliaryShapes", "mathText"
            ]);
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return new Reading(this, "", []);
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                shapes: this.selectedShapes.map(x => x.toObj())
            });
            if (this.reason != 0) {
                obj.reason = this.reason;
            }
            if (this.auxiliaryShapes.length != 0) {
                obj.auxiliaryShapes = this.auxiliaryShapes.map(x => x.toObj());
            }
            if (this.mathText != "") {
                obj.mathText = this.mathText;
            }
            return obj;
        }
        makeTexUI() {
            return new layout_ts.LaTeXBox({
                parent: plane_ts.Plane.one.text_block,
                text: "",
                click: async (ev) => {
                    const position = plane_ts.View.current.eventPosition(ev);
                    await plane_ts.Builder.tool.clickWithMouseEvent(ev, plane_ts.View.current, position, this);
                }
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(...this.selectedShapes);
            shapes.push(...this.auxiliaryShapes);
        }
        showMathText() {
            Statement.idTimeout = undefined;
            let term;
            try {
                term = parseMath(this.mathText);
            }
            catch (e) {
                if (e instanceof parser_ts.SyntaxError) {
                    return;
                }
                throw e;
            }
            const tex_text = term.tex();
            if (this.latexBox == undefined) {
                this.latexBox = this.makeTexUI();
            }
            this.latexBox.setText(tex_text);
        }
        setMode(mode) {
            super.setMode(mode);
            if (this.latexBox != undefined) {
                const color = (mode == plane_ts.Mode.none ? "transparent" : plane_ts.getModeColor(mode));
                this.latexBox.setBorderColor(color);
            }
        }
        draw() {
            const shapes = this.auxiliaryShapes.concat(this.selectedShapes).filter(x => x instanceof plane_ts.Shape);
            shapes.filter(x => x.mode != plane_ts.Mode.none).forEach(x => x.draw());
        }
        show() {
            if (this.latexBox != undefined) {
                this.latexBox.show();
            }
        }
        hide() {
            if (this.latexBox != undefined) {
                this.latexBox.hide();
            }
        }
        async showReasonAndStatement(speech) {
            if (this.reason != 0) {
                await speakReason(speech, this.reason);
                if ([LengthEqualityReason.congruent_triangles, AngleEqualityReason.congruent_triangles].includes(this.reason)) {
                    plane_ts.assert(this.auxiliaryShapes.every(x => x instanceof plane_ts.Triangle));
                    for (const [i, shape] of this.auxiliaryShapes.entries()) {
                        shape.setMode(i == 0 ? plane_ts.Mode.target1 : plane_ts.Mode.target2);
                        await plane_ts.sleep(500);
                    }
                }
                else {
                    await showAuxiliaryShapes(this.reason, this.auxiliaryShapes);
                }
                await speech.waitEnd();
            }
            const reading = this.reading();
            await speech.speak(reading.text);
            if (this instanceof plane_ts.TriangleCongruence) {
                plane_ts.assert(this.selectedShapes.every(x => x instanceof plane_ts.Triangle));
                for (const [i, shape] of this.selectedShapes.entries()) {
                    shape.setMode(i == 0 ? plane_ts.Mode.target1 : plane_ts.Mode.target2);
                    await plane_ts.sleep(500);
                }
            }
            else {
                for (const shape of this.selectedShapes) {
                    shape.setMode(plane_ts.Mode.target);
                    await plane_ts.sleep(500);
                }
            }
            await speech.waitEnd();
        }
        setRelations() {
            super.setRelations();
            this.auxiliaryShapes.forEach(x => x.setRelations());
            this.selectedShapes.forEach(x => x.setRelations());
            plane_ts.usedReasons.add(this.reason);
            // if(this.reason == 0){
            //     msg(`used 0 [${this.constructor.name}]`);
            // }
            // else{
            //     msg(`used [${reasonMsg(this.reason)}]`);
            // }
        }
    }
    plane_ts.Statement = Statement;
    async function speakReason(speech, reason) {
        const reason_msg = plane_ts.reasonMsg(reason);
        await speech.speak(reason_msg);
    }
    plane_ts.speakReason = speakReason;
    async function showAuxiliaryShapes(reason, auxiliaryShapes) {
        switch (reason) {
            case ParallelogramReason.each_opposite_sides_are_equal:
            case ParallelogramReason.each_opposite_sides_are_parallel:
            case ParallelogramReason.each_opposite_angles_are_equal:
            case ParallelogramReason.each_diagonal_bisections:
                plane_ts.assert(auxiliaryShapes.length == 4);
                for (const shape of auxiliaryShapes.slice(0, 2)) {
                    shape.setMode(plane_ts.Mode.depend1);
                }
                await plane_ts.sleep(500);
                for (const shape of auxiliaryShapes.slice(2)) {
                    shape.setMode(plane_ts.Mode.depend2);
                }
                break;
            case ParallelogramReason.one_opposite_sides_are_parallel_and_equal:
            case RhombusReason.all_sides_are_equal:
                auxiliaryShapes.forEach(x => x.setMode(plane_ts.Mode.depend));
                break;
            default:
                for (const shape of auxiliaryShapes) {
                    shape.setMode(plane_ts.Mode.depend);
                    await plane_ts.sleep(500);
                }
                break;
        }
        await plane_ts.sleep(500);
    }
    plane_ts.showAuxiliaryShapes = showAuxiliaryShapes;
})(plane_ts || (plane_ts = {}));
///<reference path="shape.ts" />
///<reference path="statement.ts" />
var plane_ts;
(function (plane_ts) {
    //
    function sortShape(shapes) {
        return shapes.slice().sort((a, b) => a.order - b.order);
    }
    plane_ts.sortShape = sortShape;
    function lastShape(shapes) {
        const sorted_shapes = sortShape(shapes);
        return plane_ts.last(sorted_shapes);
    }
    class Constraint extends plane_ts.Statement {
        textBlock;
        constructor(obj) {
            super(obj);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            if (this.textBlock != undefined) {
                shapes.push(this.textBlock);
            }
        }
        applyConstraint(shape) {
        }
        draw() {
        }
    }
    plane_ts.Constraint = Constraint;
    class LengthEqualityConstraint extends Constraint {
        point;
        lengthSymbolA;
        lengthSymbolB;
        constructor(obj) {
            const data = obj;
            data.shapes = [obj.lengthSymbolA, obj.lengthSymbolB];
            super(data);
            const [lengthSymbolA, lengthSymbolB] = sortShape([obj.lengthSymbolA, obj.lengthSymbolB]);
            let points = [obj.lengthSymbolA, obj.lengthSymbolB].map(x => [x.pointA, x.pointB]).flat();
            this.point = lastShape(points);
            this.point.addConstraint(this);
            this.lengthSymbolA = obj.lengthSymbolA;
            this.lengthSymbolB = obj.lengthSymbolB;
            this.calc();
            plane_ts.LengthSymbol.setEqualLengthKinds(this.selectedShapes);
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                lengthSymbolA: this.lengthSymbolA.toObj(),
                lengthSymbolB: this.lengthSymbolB.toObj(),
            });
        }
        dependencies() {
            return super.dependencies().concat([this.lengthSymbolA]);
        }
        calc() {
            this.point.calc();
        }
        applyConstraint(shape) {
            if (shape != this.point) {
                throw new plane_ts.MyError();
            }
            const length = this.lengthSymbolA.length();
            const anchor = this.getAnchor();
            if (anchor == undefined) {
                // msg(`no anchor for length-Symbol-B:${this.lengthSymbolB.id}`)
                return;
            }
            const dir = this.point.position.sub(anchor.position).unit();
            const theta = Math.atan2(dir.y, dir.x);
            const adjusted_position = anchor.position.add(dir.mul(length));
            this.point.setPosition(adjusted_position);
        }
        getAnchor() {
            if (this.lengthSymbolB.pointA == this.point) {
                return this.lengthSymbolB.pointB;
            }
            else if (this.lengthSymbolB.pointB == this.point) {
                return this.lengthSymbolB.pointA;
            }
            else {
                return undefined;
            }
        }
        reading() {
            return this.textReading(plane_ts.TT("Make the two line segments equal in length."));
        }
        setRelations() {
            super.setRelations();
            plane_ts.addEqualLengths(this.lengthSymbolA, this.lengthSymbolB);
        }
    }
    plane_ts.LengthEqualityConstraint = LengthEqualityConstraint;
    class AngleEqualityConstraint extends Constraint {
        equation;
        constructor(obj) {
            super(obj);
            const angles = this.selectedShapes;
            if (angles.every(x => x.name != "")) {
                plane_ts.assert(angles.length == 2);
                const text = `${angles[0].name} == ${angles[1].name}`;
                this.equation = parser_ts.parseMath(text);
                this.textBlock = plane_ts.makeEquationTextBlock(this, this.equation);
            }
            else {
                plane_ts.Angle.setEqualAngleMarks(angles);
            }
        }
        setRelations() {
            super.setRelations();
            plane_ts.assert(this.selectedShapes.length == 2 && this.selectedShapes.every(x => x instanceof plane_ts.Angle));
            const [angleA, angleB] = this.selectedShapes;
            plane_ts.addEqualAngles(angleA, angleB);
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return new Reading(this, "", []);
        }
    }
    plane_ts.AngleEqualityConstraint = AngleEqualityConstraint;
    class LineConstraint extends Constraint {
        lineA;
        lineB;
        constructor(obj) {
            const data = obj;
            data.shapes = [obj.lineA, obj.lineB];
            super(data);
            plane_ts.assert(obj.lineA.order < obj.lineB.order);
            this.lineA = obj.lineA;
            this.lineB = obj.lineB;
        }
    }
    class ParallelPerpendicularConstraint extends LineConstraint {
        constructor(obj) {
            super(obj);
            this.lineB.pointB.addConstraint(this);
            this.calc();
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                lineA: this.lineA.toObj(),
                lineB: this.lineB.toObj(),
            });
        }
        dependencies() {
            return super.dependencies().concat([this.lineA, this.lineB.pointA]);
        }
        calc() {
            this.lineB.pointB.calc();
        }
        applyConstraint(shape) {
            plane_ts.assert(shape == this.lineB.pointB);
            const AB = this.lineB.pointB.sub(this.lineB.pointA);
            let newAB;
            if (this instanceof ParallelConstraint) {
                newAB = this.lineA.e.project(AB);
            }
            else {
                newAB = this.lineA.e.rot90().project(AB);
            }
            const positionB = this.lineB.pointA.position.add(newAB);
            this.lineB.pointB.setPosition(positionB);
        }
    }
    plane_ts.ParallelPerpendicularConstraint = ParallelPerpendicularConstraint;
    class ParallelConstraint extends ParallelPerpendicularConstraint {
        setRelations() {
            super.setRelations();
            plane_ts.addParallelLines(this.lineA, this.lineB);
        }
    }
    plane_ts.ParallelConstraint = ParallelConstraint;
    class PerpendicularConstraint extends ParallelPerpendicularConstraint {
        setRelations() {
            super.setRelations();
            plane_ts.addPerpendicularPairs(this.lineA, this.lineB);
        }
    }
    plane_ts.PerpendicularConstraint = PerpendicularConstraint;
})(plane_ts || (plane_ts = {}));
///<reference path="shape.ts" />
var plane_ts;
(function (plane_ts) {
    //
    plane_ts.TT = i18n_ts.TT;
    plane_ts.TTs = i18n_ts.TTs;
    class Angle extends plane_ts.Shape {
        static radius1Pix = 20;
        static radius1;
        static numMarks = 5;
        static RightAngleMark = 0;
        static DefaultAngleMark = 1;
        static outerAngleScale = 2;
        angleMark;
        lineA;
        directionA;
        eA;
        lineB;
        directionB;
        eB;
        intersection;
        outerAngle = false;
        constructor(obj) {
            super(obj);
            plane_ts.assert(obj.angleMark != undefined);
            this.setAngleMark(obj.angleMark);
            this.lineA = obj.lineA;
            this.directionA = obj.directionA;
            this.lineB = obj.lineB;
            this.directionB = obj.directionB;
            this.eA = this.lineA.e.mul(this.directionA);
            this.eB = this.lineB.e.mul(this.directionB);
            this.intersection = plane_ts.getCommonPointOfLines(this.lineA, this.lineB);
            if (this.intersection == undefined) {
                throw new plane_ts.MyError();
            }
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                angleMark: this.angleMark,
                lineA: this.lineA.toObj(),
                directionA: this.directionA,
                lineB: this.lineB.toObj(),
                directionB: this.directionB
            });
            return obj;
        }
        getProperties() {
            return super.getProperties().concat([
                "angleMark"
            ]);
        }
        setName(name) {
            super.setName(name);
            this.setCaptionPosition();
        }
        setAngleMark(angle_mark) {
            this.angleMark = angle_mark;
            if (angle_mark == Angle.RightAngleMark) {
                plane_ts.rightAngles.add(this);
            }
        }
        isRightAngle() {
            return this.angleMark == Angle.RightAngleMark;
        }
        dependencies() {
            return [this.lineA, this.lineB];
        }
        startEndAngle() {
            const e1 = this.lineA.e.mul(this.directionA);
            const e2 = this.lineB.e.mul(this.directionB);
            const start = Math.atan2(e1.y, e1.x);
            const end = Math.atan2(e2.y, e2.x);
            return [start, end];
        }
        radiusPlus() {
            return this.outerAngle ? Angle.outerAngleScale * Angle.radius1 : 0;
        }
        isNear(position) {
            const distance = this.intersection.position.distance(position);
            let radius = Angle.radius1 * 1.2;
            let near_radius;
            if (this.outerAngle) {
                const outer_radius = radius + this.radiusPlus();
                near_radius = (radius <= distance && distance < outer_radius);
            }
            else {
                near_radius = distance <= radius;
            }
            if (near_radius) {
                const [start, end] = this.startEndAngle();
                // the vector from the intersection to position.
                const v = position.sub(this.intersection.position);
                const theta = Math.atan2(v.y, v.x);
                const result = plane_ts.inRange(start, theta, end);
                return plane_ts.inRange(start, theta, end);
            }
            return false;
        }
        calc() {
            const idx = plane_ts.View.current.shapes.indexOf(this);
            let shapes = (idx == -1 ? plane_ts.View.current.shapes : plane_ts.View.current.shapes.slice(0, idx));
            this.outerAngle = shapes.some(x => x instanceof Angle && this.intersection == x.intersection && (this.commonLineAA(x) || this.commonLineBB(x)));
            this.setCaptionPosition();
        }
        draw() {
            plane_ts.assert(this.angleMark < Angle.numMarks);
            const [start, end] = this.startEndAngle();
            const center = this.intersection.position;
            if (this.isRightAngle()) {
                const vx = (new plane_ts.Vec2(Angle.radius1, 0)).rot(start);
                const vy = (new plane_ts.Vec2(Angle.radius1, 0)).rot(end);
                const positions = [
                    center, center.add(vx), center.add(vx).add(vy), center.add(vy)
                ];
                plane_ts.View.current.canvas.drawPolygon(this, positions);
            }
            else {
                const scales = [1, 0.6, 1.4, 2.0, 2.5, 3.0];
                for (const i of plane_ts.range(this.angleMark)) {
                    plane_ts.assert(i < scales.length);
                    const radius = Angle.radius1 * scales[i] + this.radiusPlus();
                    plane_ts.View.current.canvas.drawArc(this, center, radius, start, end);
                }
            }
        }
        setCaptionPosition() {
            if (this.caption == undefined) {
                return;
            }
            let [start, end] = this.startEndAngle();
            if (start > end) {
                end += 2 * Math.PI;
            }
            const mid_angle = (start + end) / 2;
            const center = this.intersection.position;
            const radius = Angle.radius1 * 2 + this.radiusPlus();
            const dx = radius * Math.cos(mid_angle);
            const dy = radius * Math.sin(mid_angle);
            const caption_center = center.add(new plane_ts.Vec2(dx, dy));
            const caption_center_pix = plane_ts.View.current.toPixPosition(caption_center);
            const rect = this.caption.div.getBoundingClientRect();
            const x = caption_center_pix.x - 0.5 * rect.width;
            const y = caption_center_pix.y - 0.5 * rect.height;
            this.caption.div.style.left = `${x}px`;
            this.caption.div.style.top = `${y}px`;
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw an angle.'), []);
        }
        setRelations() {
            super.setRelations();
            const key = plane_ts.angleKey(this.lineA, this.directionA, this.lineB, this.directionB, this.intersection);
            plane_ts.angleMap.set(key, this);
        }
        lines() {
            return [this.lineA, this.lineB];
        }
        static setEqualAngleMarks(angles) {
            plane_ts.assert(angles.length == 2 && angles.every(x => x instanceof Angle));
            const named_angle = angles.find(x => x.name != "");
            if (named_angle != undefined) {
                for (const angle of angles) {
                    if (angle != named_angle) {
                        angle.setAngleMark(Angle.DefaultAngleMark);
                        angle.setName(named_angle.name);
                    }
                }
                return;
            }
            for (const [angle1, angle2] of plane_ts.permutation([angles[0], angles[1]])) {
                if (angle1.intersection == angle2.intersection) {
                    if (angle1.lineA == angle2.lineB && angle1.lineB == angle2.lineA) {
                        // msg("Angle Equality:Since the two angles bisect the line, they are right angles.");
                        angles.forEach(x => x.setAngleMark(Angle.RightAngleMark));
                        return;
                    }
                }
            }
            if (angles.some(x => x.isRightAngle())) {
                // msg("Angle Equality:Since one angle is a right angle, the other angle is also a right angle.");
                angles.forEach(x => x.setAngleMark(Angle.RightAngleMark));
            }
            else {
                const max_angleMark = Math.max(...angles.map(x => x.angleMark));
                if (max_angleMark != Angle.DefaultAngleMark) {
                    angles.forEach(x => x.angleMark = max_angleMark);
                }
                else {
                    const all_angles = plane_ts.View.current.allShapes().filter(x => x instanceof Angle);
                    if (all_angles.length == 0) {
                        angles.forEach(x => x.angleMark = Angle.DefaultAngleMark + 1);
                    }
                    else {
                        const max_all_angleMark = Math.max(...all_angles.map(x => x.angleMark));
                        angles.forEach(x => x.angleMark = max_all_angleMark + 1);
                    }
                }
            }
        }
        commonLineAA(angle) {
            return this.lineA == angle.lineA && this.directionA == angle.directionA;
        }
        commonLineConnect(angle) {
            return this.lineA == angle.lineB && this.directionA == -angle.directionB;
        }
        commonLineBA(angle) {
            return this.lineB == angle.lineA && this.directionB == angle.directionA;
        }
        commonLineBB(angle) {
            return this.lineB == angle.lineB && this.directionB == angle.directionB;
        }
    }
    plane_ts.Angle = Angle;
    class DimensionLine extends plane_ts.Shape {
        pointA;
        pointB;
        shift;
        normal;
        shiftVec;
        center;
        text = "";
        constructor(obj) {
            super(obj);
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
            this.shift = obj.shift;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj(),
                shift: this.shift
            });
            return obj;
        }
        setShift(shift) {
            this.shift = shift;
            this.calc();
            plane_ts.View.current.dirty = true;
        }
        getProperties() {
            return super.getProperties().concat([
                "text"
            ]);
        }
        dependencies() {
            return [this.pointA, this.pointB];
        }
        calc() {
            const A = this.pointA.position;
            const B = this.pointB.position;
            const AB = B.sub(A);
            this.normal = AB.rot90().unit();
            this.shiftVec = this.normal.mul(this.shift);
            this.center = A.add(B).mul(0.5).add(this.shiftVec);
            this.updateCaption();
        }
        updateCaption() {
            const [text_width, text_height] = this.caption.getSize();
            const x = this.center.x - plane_ts.fromXPixScale(0.5 * text_width);
            const y = this.center.y + plane_ts.fromYPixScale(0.5 * text_height);
            this.caption.setTextPosition(x, y);
        }
        draw() {
            if (this.caption == undefined) {
                throw new plane_ts.MyError();
            }
            const A = this.pointA.position;
            const B = this.pointB.position;
            const AB = B.sub(A);
            const A_shift = A.add(this.shiftVec);
            const B_shift = B.add(this.shiftVec);
            const shift_pix_len = plane_ts.View.current.toXPixScale(Math.abs(this.shift));
            const ratio = (shift_pix_len + 5) / shift_pix_len;
            const shift_plus = this.shiftVec.mul(ratio);
            const A_shift_plus = A.add(shift_plus);
            const B_shift_plus = B.add(shift_plus);
            const A_shift_inside = A_shift.add(AB.mul(1 / 3));
            const B_shift_inside = B_shift.add(AB.mul(-1 / 3));
            const degree = plane_ts.toDegree(Math.atan2(-AB.y, AB.x));
            this.caption.setRotation(degree);
            plane_ts.View.current.canvas.drawLine(this, A, A_shift_plus);
            plane_ts.View.current.canvas.drawLine(this, B, B_shift_plus);
            plane_ts.View.current.canvas.drawLine(this, A_shift, A_shift_inside);
            plane_ts.View.current.canvas.drawLine(this, B_shift, B_shift_inside);
        }
    }
    plane_ts.DimensionLine = DimensionLine;
    class LengthSymbol extends plane_ts.Shape {
        static DefaultLengthKind = 0;
        pointA;
        pointB;
        lengthKind;
        line;
        circle;
        constructor(obj) {
            super(obj);
            if (obj.lengthKind == undefined) {
                throw new plane_ts.MyError("length kind is undefined.");
            }
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
            this.lengthKind = obj.lengthKind;
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj(),
                lengthKind: this.lengthKind
            });
            return obj;
        }
        getProperties() {
            return super.getProperties().concat([
                "lengthKind",
                "line"
            ]);
        }
        dependencies() {
            return [this.pointA, this.pointB];
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        center() {
            const A = this.pointA.position;
            const B = this.pointB.position;
            return A.add(B).mul(0.5);
        }
        isNear(position) {
            const center = this.center();
            const real_distance = center.distance(position);
            return plane_ts.View.current.isNear(real_distance);
        }
        length() {
            const A = this.pointA.position;
            const B = this.pointB.position;
            return A.distance(B);
        }
        isEqual(lengthSymbol) {
            const equal_length_set = plane_ts.equalLengths.find(x => x.has(this));
            if (equal_length_set != undefined) {
                return equal_length_set.has(lengthSymbol);
            }
            return false;
        }
        draw() {
            plane_ts.View.current.canvas.drawLine(this, this.pointA.position, this.pointB.position);
            const tick_half_length = plane_ts.fromXPixScale(10);
            const A = this.pointA.position;
            const B = this.pointB.position;
            const AB = B.sub(A);
            const e = AB.unit();
            const center = this.center();
            if (this.lengthKind == 0) {
                const e45 = e.rot45();
                const tick_1 = center.add(e45.mul(-tick_half_length));
                const tick_2 = center.add(e45.mul(tick_half_length));
                plane_ts.drawLine(this, tick_1, tick_2);
                return;
            }
            const normal = e.rot90();
            const normal_minus = normal.mul(-tick_half_length);
            const normal_plus = normal.mul(tick_half_length);
            let shifts;
            if (this.lengthKind % 2 == 1) {
                shifts = [0, 1, -1, 2, -2];
            }
            else {
                shifts = [0.5, -0.5, 1.5, -1.5, 2.5, -2.5];
            }
            plane_ts.assert(this.lengthKind < shifts.length);
            for (const idx of plane_ts.range(this.lengthKind)) {
                const shift = shifts[idx];
                const pos = center.add(e.mul(shift * tick_half_length));
                const tick_1 = pos.add(normal_minus);
                const tick_2 = pos.add(normal_plus);
                plane_ts.drawLine(this, tick_1, tick_2);
            }
        }
        findEqualLengthByMidPoint() {
            const all_shapes = plane_ts.View.current.allShapes();
            const length_symbols = all_shapes.filter(x => x instanceof LengthSymbol && x != this && x.line == this.line);
            if (length_symbols.length == 0) {
                // msg(`no length-symbol:${this.id}`);
                // (all_shapes.filter(x => x instanceof LengthSymbol) as LengthSymbol[]).forEach(x => msg(`${x.id} line:${x.line!.id}`))
                return;
            }
            for (const length_symbol of length_symbols) {
                // msg(`length-symbol on line: ${this.id} ${length_symbol.id}`);
                const points = this.points().concat(length_symbol.points());
                const mid_points = all_shapes.filter(x => x instanceof plane_ts.Midpoint && plane_ts.areSetsEqual([x, x.pointA, x.pointB], points));
                for (const mid_point of mid_points) {
                    if (this.points().includes(mid_point) && length_symbol.points().includes(mid_point)) {
                        plane_ts.addEqualLengths(this, length_symbol);
                        // msg(`equal-length-by-midpoint:${this.id} mid:${mid_point.id} ${length_symbol.id}`);
                        return;
                    }
                }
            }
        }
        reading() {
            return this.textReading(plane_ts.TT("Draw a length symbol."));
        }
        setRelations() {
            super.setRelations();
            this.pointA.setRelations();
            this.pointB.setRelations();
            const key = plane_ts.pairKey(this.pointA, this.pointB);
            plane_ts.pointsToLengthSymbol.set(key, this);
            this.line = plane_ts.getCommonLineOfPoints(this.pointA, this.pointB);
            this.circle = undefined;
            for (const [center, point] of [[this.pointA, this.pointB], [this.pointB, this.pointA]]) {
                const circles = plane_ts.Mylist(plane_ts.centerOfCircleArcs.get(center));
                if (circles.length != 0) {
                    this.circle = circles.find(x => x.includesPoint(point));
                    if (this.circle != undefined) {
                        break;
                    }
                }
            }
            this.findEqualLengthByMidPoint();
        }
        points() {
            return [this.pointA, this.pointB];
        }
        static setEqualLengthKinds(lengthSymbols) {
            plane_ts.assert(lengthSymbols.every(x => x instanceof LengthSymbol));
            const max_lengthKind = Math.max(...lengthSymbols.map(x => x.lengthKind));
            if (max_lengthKind != LengthSymbol.DefaultLengthKind) {
                lengthSymbols.forEach(x => x.lengthKind = max_lengthKind);
            }
            else {
                const all_lengthSymbols = plane_ts.View.current.allShapes().filter(x => x instanceof LengthSymbol);
                if (all_lengthSymbols.length == 0) {
                    lengthSymbols.forEach(x => x.lengthKind = LengthSymbol.DefaultLengthKind + 1);
                }
                else {
                    const max_all_lengthKind = Math.max(...all_lengthSymbols.map(x => x.lengthKind));
                    lengthSymbols.forEach(x => x.lengthKind = max_all_lengthKind + 1);
                }
            }
        }
    }
    plane_ts.LengthSymbol = LengthSymbol;
})(plane_ts || (plane_ts = {}));
///<reference path="shape.ts" />
var plane_ts;
(function (plane_ts) {
    function calcFootFrom2Pos(position, pos1, e) {
        const v = position.sub(pos1);
        const h = e.dot(v);
        const foot = pos1.add(e.mul(h));
        return foot;
    }
    plane_ts.calcFootFrom2Pos = calcFootFrom2Pos;
    function calcFootOfPerpendicular(position, line) {
        return calcFootFrom2Pos(position, line.pointA.position, line.e);
    }
    plane_ts.calcFootOfPerpendicular = calcFootOfPerpendicular;
    function distanceFromLine(normal, pointA, position) {
        return Math.abs(normal.dot(position.sub(pointA)));
    }
    plane_ts.distanceFromLine = distanceFromLine;
    class Midpoint extends plane_ts.Point {
        pointA;
        pointB;
        constructor(obj) {
            super(obj);
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj()
            });
            return obj;
        }
        dependencies() {
            return super.dependencies().concat([this.pointA, this.pointB]);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        calc() {
            const position = this.pointA.add(this.pointB).mul(0.5);
            this.setPosition(position);
        }
        reading() {
            return new Reading(this, plane_ts.TT('Find the midpoint of two points.'), []);
        }
        setRelations() {
            super.setRelations();
            const line = plane_ts.getCommonLineOfPoints(this.pointA, this.pointB);
            if (line != undefined) {
                // msg(`add mid point On Lines point:${this.id} line:${line.id}`);
                plane_ts.addPointOnLines(this, line);
            }
        }
    }
    plane_ts.Midpoint = Midpoint;
    class AbstractPerpendicularLine extends plane_ts.AbstractLine {
        line;
        constructor(obj) {
            super(obj);
            this.line = obj.line;
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                line: this.line.toObj(),
            });
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPerpendicularPairs(this, this.line);
        }
    }
    class FootOfPerpendicular extends AbstractPerpendicularLine {
        foot;
        constructor(obj) {
            super(obj);
            this.foot = obj.foot;
            this.calc();
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                foot: this.foot.toObj(),
            });
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.line, this.foot);
        }
        dependencies() {
            return super.dependencies().concat([this.line]);
        }
        setMode(mode) {
            super.setMode(mode);
            this.foot.setMode(mode);
        }
        calc() {
            const foot_pos = calcFootOfPerpendicular(this.pointA.position, this.line);
            this.foot.setPosition(foot_pos);
            this.e = this.line.e.rot90().unit();
        }
        draw() {
            plane_ts.View.current.canvas.drawLineWith2Points(this, this.foot);
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw a perpendicular line from the point to the line.'), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnLines(this.foot, this);
            plane_ts.addPointOnLines(this.foot, this.line);
        }
    }
    plane_ts.FootOfPerpendicular = FootOfPerpendicular;
    class PerpendicularLine extends AbstractPerpendicularLine {
        constructor(obj) {
            super(obj);
            this.calc();
        }
        calc() {
            this.e = this.line.e.rot90().unit();
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw a perpendicular line.'), []);
        }
    }
    plane_ts.PerpendicularLine = PerpendicularLine;
    function calcLineLineIntersection(l1, l2) {
        l1.calc();
        l2.calc();
        if (l1.e == undefined || l2.e == undefined) {
            throw new plane_ts.MyError();
        }
        /*
        l1.p1 + u l1.e = l2.p1 + v l2.e
    
        l1.p1.x + u l1.e.x = l2.p1.x + v l2.e.x
        l1.p1.y + u l1.e.y = l2.p1.y + v l2.e.y
    
        l1.e.x, - l2.e.x   u = l2.p1.x - l1.p1.x
        l1.e.y, - l2.e.y   v = l2.p1.y - l1.p1.y
        
        */
        const m = new plane_ts.Mat2([[l1.e.x, -l2.e.x], [l1.e.y, -l2.e.y]]);
        const v = new plane_ts.Vec2(l2.pointA.position.x - l1.pointA.position.x, l2.pointA.position.y - l1.pointA.position.y);
        const mi = m.inv();
        const uv = mi.dot(v);
        const u = uv.x;
        const position = l1.pointA.position.add(l1.e.mul(u));
        return position;
    }
    plane_ts.calcLineLineIntersection = calcLineLineIntersection;
    class LineLineIntersection extends plane_ts.Point {
        lineA;
        lineB;
        constructor(obj) {
            super(obj);
            this.lineA = obj.lineA;
            this.lineB = obj.lineB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                lineA: this.lineA.toObj(),
                lineB: this.lineB.toObj(),
            });
            return obj;
        }
        dependencies() {
            return [this.lineA, this.lineB];
        }
        calc() {
            const position = calcLineLineIntersection(this.lineA, this.lineB);
            this.setPosition(position);
        }
        reading() {
            return new Reading(this, plane_ts.TT('There is one intersection between the two lines.'), []);
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnLines(this, this.lineA);
            plane_ts.addPointOnLines(this, this.lineB);
        }
    }
    plane_ts.LineLineIntersection = LineLineIntersection;
    class LineArcIntersection extends plane_ts.Shape {
        line;
        arc;
        pointA;
        pointB;
        constructor(obj) {
            super(obj);
            this.line = obj.line;
            this.arc = obj.arc;
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                line: this.line.toObj(),
                arc: this.arc.toObj(),
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj()
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        dependencies() {
            return [this.line, this.arc];
        }
        setMode(mode) {
            this.pointA.setMode(mode);
            this.pointB.setMode(mode);
        }
        calc() {
            // 円/弧の中心
            const center = this.arc.center;
            // 円/弧の中心から線分に垂線をおろして、その足をfootとする。
            const foot = calcFootOfPerpendicular(center.position, this.line);
            // 円/弧の中心から垂線の足までの距離。
            const h = foot.sub(center.position).len();
            // 円/弧の半径
            let r = this.arc.radius();
            if (r < h) {
                // 半径が垂線の足までの距離より小さい場合
                throw new plane_ts.MyError();
            }
            // 垂線の足から交点までの距離
            let t = Math.sqrt(r * r - h * h);
            // 線分の単位方向ベクトル
            this.line.calc();
            let e = this.line.e;
            // 交点の座標
            let positionA = foot.add(e.mul(t));
            let positionB = foot.add(e.mul(-t));
            this.pointA.setPosition(positionA);
            this.pointB.setPosition(positionB);
        }
        draw() {
        }
        reading() {
            if (this.arc instanceof plane_ts.Circle) {
                return new Reading(this, plane_ts.TT('Find the intersection of the circle and the line.'), []);
            }
            else if (this.arc instanceof plane_ts.Arc) {
                return new Reading(this, plane_ts.TT('Find the intersection of the arc and the line.'), []);
            }
            else {
                throw new plane_ts.MyError();
            }
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnLines(this.pointA, this.line);
            plane_ts.addPointOnLines(this.pointB, this.line);
            plane_ts.addPointOnCircleArcs(this.pointA, this.arc);
            plane_ts.addPointOnCircleArcs(this.pointB, this.arc);
        }
    }
    plane_ts.LineArcIntersection = LineArcIntersection;
    class ArcArcIntersection extends plane_ts.Shape {
        arc1;
        arc2;
        pointA;
        pointB;
        constructor(obj) {
            super(obj);
            this.arc1 = obj.arc1;
            this.arc2 = obj.arc2;
            this.pointA = obj.pointA;
            this.pointB = obj.pointB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                arc1: this.arc1.toObj(),
                arc2: this.arc2.toObj(),
                pointA: this.pointA.toObj(),
                pointB: this.pointB.toObj()
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.pointA, this.pointB);
        }
        dependencies() {
            return [this.arc1, this.arc2];
        }
        setMode(mode) {
            this.pointA.setMode(mode);
            this.pointB.setMode(mode);
        }
        calc() {
            // 円/弧の中心
            const c1 = this.arc1.center;
            const c2 = this.arc2.center;
            // 円/弧の半径
            const r1 = this.arc1.radius();
            const r2 = this.arc2.radius();
            // 円/弧の中心の距離
            const L = c1.position.distance(c2.position);
            // r1*r1 - t*t = r2*r2 - (L - t)*(L - t)
            //             = r2*r2 - L*L + 2Lt - t*t
            // r1*r1 = r2*r2 - L*L + 2Lt
            const t = (r1 * r1 - r2 * r2 + L * L) / (2 * L);
            // 円/弧の交点から、円/弧の中心を結ぶ直線におろした垂線の長さの二乗
            const h2 = r1 * r1 - t * t;
            if (h2 < 0) {
                throw new plane_ts.MyError();
            }
            const h = Math.sqrt(h2);
            // c1→c2の単位ベクトル
            const e1 = c2.sub(c1).unit();
            // e1の法線ベクトル
            const e2 = new plane_ts.Vec2(-e1.y, e1.x);
            // 円/弧の交点から、円/弧の中心を結ぶ直線におろした垂線の足
            const foot = c1.position.add(e1.mul(t));
            // 交点の座標
            let positionA = foot.add(e2.mul(h));
            let positionB = foot.add(e2.mul(-h));
            this.pointA.setPosition(positionA);
            this.pointB.setPosition(positionB);
        }
        draw() {
        }
        reading() {
            if (this.arc1 instanceof plane_ts.Circle && this.arc2 instanceof plane_ts.Circle) {
                return new Reading(this, plane_ts.TT('Find the intersection of two circles.'), []);
            }
            else if (this.arc1 instanceof plane_ts.Arc && this.arc2 instanceof plane_ts.Arc) {
                return new Reading(this, plane_ts.TT('Find the intersection of two arcs.'), []);
            }
            else {
                return new Reading(this, plane_ts.TT('Find the intersection of the circle and the arc.'), []);
            }
        }
        setRelations() {
            super.setRelations();
            plane_ts.addPointOnCircleArcs(this.pointA, this.arc1);
            plane_ts.addPointOnCircleArcs(this.pointB, this.arc1);
            plane_ts.addPointOnCircleArcs(this.pointA, this.arc2);
            plane_ts.addPointOnCircleArcs(this.pointB, this.arc2);
        }
    }
    plane_ts.ArcArcIntersection = ArcArcIntersection;
    class Tangent extends plane_ts.Shape {
    }
    plane_ts.Tangent = Tangent;
    class CircleCircleTangent extends Tangent {
        circle1;
        circle2;
        point;
        lines = [];
        constructor(obj) {
            super(obj);
            if (obj.circle1.radius() <= obj.circle2.radius()) {
                this.circle1 = obj.circle1;
                this.circle2 = obj.circle2;
            }
            else {
                this.circle1 = obj.circle2;
                this.circle2 = obj.circle1;
            }
            const data = obj;
            if (data.point != undefined) {
                this.point = data.point;
            }
            else {
                this.point = plane_ts.Point.zero();
            }
            if (data.lines != undefined) {
                this.lines = data.lines;
            }
            else {
                const line_a = plane_ts.makeLineSegment(plane_ts.Point.zero(), plane_ts.Point.zero());
                const line_b = plane_ts.makeLineSegment(plane_ts.Point.zero(), plane_ts.Point.zero());
                this.lines = [line_a, line_b];
            }
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                circle1: this.circle1.toObj(),
                circle2: this.circle2.toObj(),
                point: this.point.toObj(),
                lines: this.lines.map(x => x.toObj())
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.point);
            this.lines.forEach(line => line.getAllShapes(shapes));
        }
        dependencies() {
            return super.dependencies().concat([this.circle1, this.circle2]);
        }
        setMode(mode) {
            this.lines.forEach(x => x.setMode(mode));
        }
        draw() {
            this.point.draw();
            this.lines.forEach(x => x.draw());
        }
        calc() {
            const c1to2 = this.circle1.center.sub(this.circle2.center);
            const dist = c1to2.len();
            const radius1 = this.circle1.radius();
            const radius2 = this.circle2.radius();
            if (radius2 < dist + radius1) {
                const d = (radius1 / (radius2 - radius1)) * dist;
                const position = this.circle1.center.position.add(c1to2.unit().mul(d));
                this.point.setPosition(position);
                this.point.setName("点");
                const tangent_positions_list = [];
                for (const circle of [this.circle1, this.circle2]) {
                    const tangent_positions = calcCirclePointTangent(circle.center.position, circle.radius(), position);
                    tangent_positions_list.push(...tangent_positions);
                }
                this.lines[0].pointA.setPosition(tangent_positions_list[0]);
                this.lines[0].pointB.setPosition(tangent_positions_list[2]);
                this.lines[1].pointA.setPosition(tangent_positions_list[1]);
                this.lines[1].pointB.setPosition(tangent_positions_list[3]);
            }
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw tangents to the two circles.'), []);
        }
    }
    plane_ts.CircleCircleTangent = CircleCircleTangent;
    function calcCirclePointTangent(center, radius, position) {
        const center_point_distance = center.distance(position);
        const tangent_point_distance = Math.sqrt(center_point_distance * center_point_distance - radius * radius);
        const [a, b, c] = [radius, tangent_point_distance, center_point_distance];
        const cos_theta = (b * b + c * c - a * a) / (2 * b * c);
        const theta = Math.acos(cos_theta);
        const pc = center.sub(position);
        const tangent_positions = [];
        for (const th of [theta, -theta]) {
            const v = pc.rot(th).unit().mul(tangent_point_distance);
            const tangent_position = position.add(v);
            tangent_positions.push(tangent_position);
        }
        return tangent_positions;
    }
    class CirclePointTangent extends Tangent {
        circle;
        point;
        tangentPoints = [];
        lines = [];
        constructor(obj) {
            super(obj);
            this.circle = obj.circle;
            this.point = obj.point;
            const data = obj;
            if (data.tangentPoints != undefined) {
                this.tangentPoints = data.tangentPoints;
            }
            else {
                this.tangentPoints = [plane_ts.Point.zero(), plane_ts.Point.zero()];
            }
            if (data.lines != undefined) {
                this.lines = data.lines;
            }
            else {
                const line_a = plane_ts.makeLineSegment(this.point, plane_ts.Point.zero());
                const line_b = plane_ts.makeLineSegment(this.point, plane_ts.Point.zero());
                this.lines = [line_a, line_b];
            }
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                circle: this.circle.toObj(),
                point: this.point.toObj(),
                tangentPoints: this.tangentPoints.map(x => x.toObj()),
                lines: this.lines.map(x => x.toObj())
            });
            return obj;
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.circle, this.point, ...this.tangentPoints, ...this.lines);
        }
        dependencies() {
            return super.dependencies().concat([this.circle, this.point]);
        }
        setMode(mode) {
            this.tangentPoints.forEach(x => x.setMode(mode));
            this.lines.forEach(x => x.setMode(mode));
        }
        draw() {
            this.tangentPoints.forEach(x => x.draw());
            this.lines.forEach(x => x.draw());
        }
        calc() {
            const tangent_positions = calcCirclePointTangent(this.circle.center.position, this.circle.radius(), this.point.position);
            for (const [i, position] of tangent_positions.entries()) {
                this.tangentPoints[i].setPosition(position);
                this.lines[i].pointB.setPosition(position);
            }
        }
        reading() {
            return new Reading(this, plane_ts.TT('Draw a tangent line from the point to the circle.'), [this.point].concat(this.tangentPoints));
        }
    }
    plane_ts.CirclePointTangent = CirclePointTangent;
    class AngleBisector extends plane_ts.AbstractLine {
        lineA;
        directionA;
        lineB;
        directionB;
        constructor(obj) {
            obj.pointA = plane_ts.getCommonPointOfLines(obj.lineA, obj.lineB);
            super(obj);
            this.lineA = obj.lineA;
            this.directionA = obj.directionA;
            this.lineB = obj.lineB;
            this.directionB = obj.directionB;
            this.calc();
        }
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                lineA: this.lineA.toObj(),
                directionA: this.directionA,
                lineB: this.lineB.toObj(),
                directionB: this.directionB
            });
            return obj;
        }
        dependencies() {
            return [this.lineA, this.lineB];
        }
        calc() {
            this.e = this.lineA.e.mul(this.directionA).add(this.lineB.e.mul(this.directionB)).mul(0.5);
        }
        reading() {
            return this.textReading(plane_ts.TT("Draw the angle bisector."));
        }
    }
    plane_ts.AngleBisector = AngleBisector;
    class PropertyChange {
        widget;
        propertyName;
        oldValue;
        newValue;
        constructor(obj) {
            this.widget = obj.widget;
            this.propertyName = obj.propertyName;
            this.oldValue = obj.oldValue;
            this.newValue = obj.newValue;
        }
        makeObj() {
            return {
                typeName: this.constructor.name,
                widget: this.widget.toObj(),
                propertyName: this.propertyName,
                oldValue: plane_ts.anyToObj(this.oldValue),
                newValue: plane_ts.anyToObj(this.newValue)
            };
        }
        restore() {
            plane_ts.setProperty(this.widget, this.propertyName, this.oldValue);
        }
    }
    plane_ts.PropertyChange = PropertyChange;
    class Motion extends plane_ts.MathEntity {
        propertyChanges = [];
        constructor(obj) {
            super(obj);
            this.propertyChanges = obj.propertyChanges;
        }
        makeObj() {
            return Object.assign(super.makeObj(), {
                propertyChanges: this.propertyChanges.map(x => x.makeObj()),
            });
        }
        addPropertyChange(widget, propertyName, oldValue, newValue) {
            plane_ts.msg(`add Property Change ${propertyName} ${oldValue}=>${newValue}`);
            this.propertyChanges.push(new PropertyChange({ widget, propertyName, oldValue, newValue }));
        }
        reading() {
            throw new plane_ts.MyError();
        }
        async animate(speech) {
            const startTime = Date.now();
            while (true) {
                const endTime = Date.now();
                let rate = (endTime - startTime) / 3000;
                if (plane_ts.getPlayMode() == plane_ts.PlayMode.fastForward) {
                    rate *= 3;
                }
                if (1 < rate) {
                    break;
                }
                for (const property_change of this.propertyChanges) {
                    if (property_change.widget instanceof plane_ts.Point && property_change.propertyName == "position") {
                        const point = property_change.widget;
                        const midway_position = plane_ts.Vec2.interpolate(property_change.oldValue, property_change.newValue, rate);
                        point.setPosition(midway_position);
                    }
                }
                plane_ts.View.current.dirty = true;
                plane_ts.View.current.updateShapes();
                await plane_ts.sleep(10);
            }
        }
        restorePropertyChanges() {
            this.propertyChanges.reverse().forEach(x => x.restore());
        }
    }
    plane_ts.Motion = Motion;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    plane_ts.PlayMode = i18n_ts.PlayMode;
    plane_ts.setPlayMode = i18n_ts.setPlayMode;
    plane_ts.getPlayMode = i18n_ts.getPlayMode;
    plane_ts.AbstractSpeech = i18n_ts.AbstractSpeech;
    plane_ts.sleep = i18n_ts.sleep;
    plane_ts.sum = i18n_ts.sum;
    plane_ts.list = i18n_ts.list;
    plane_ts.intersection = i18n_ts.intersection;
    plane_ts.permutation = i18n_ts.permutation;
    plane_ts.circularPermutation = i18n_ts.circularPermutation;
    plane_ts.areSetsEqual = i18n_ts.areSetsEqual;
    plane_ts.isSubSet = i18n_ts.isSubSet;
    plane_ts.check = i18n_ts.check;
    plane_ts.remove = i18n_ts.remove;
    plane_ts.Speech = i18n_ts.Speech;
    plane_ts.renderKatexSub = parser_ts.renderKatexSub;
    plane_ts.operator = parser_ts.operator;
    class T1 {
        set;
        value;
        constructor(set, value) {
            this.set = set;
            this.value = value;
        }
    }
    class T2 {
        array;
        value;
        constructor(array, value) {
            this.array = array;
            this.value = value;
        }
    }
    class T3 {
        array;
        value;
        index;
        constructor(array, value, index) {
            this.array = array;
            this.value = value;
            this.index = index;
        }
    }
    class T4 {
        map;
        key;
        value;
        constructor(map, key, value) {
            this.map = map;
            this.key = key;
            this.value = value;
        }
    }
    class UndoData {
        operations = [];
        shapes = [];
        relationLogs = [];
        historyUIs = [];
    }
    plane_ts.UndoData = UndoData;
    function undoRelations(relationLogs) {
        for (const x of relationLogs.slice().reverse()) {
            if (x instanceof T1) {
                assert(x.set.has(x.value));
                x.set.delete(x.value);
            }
            else if (x instanceof T2) {
                assert(x.array.includes(x.value));
                plane_ts.remove(x.array, x.value);
            }
            else if (x instanceof T3) {
                x.array.splice(x.index, 0, x.value);
            }
            else if (x instanceof T4) {
                assert(x.map.get(x.key) == x.value);
                x.map.delete(x.key);
            }
            else {
                throw new MyError();
            }
        }
    }
    plane_ts.undoRelations = undoRelations;
    function redoRelations(relationLogs) {
        for (const x of relationLogs) {
            if (x instanceof T1) {
                assert(!x.set.has(x.value));
                x.set.add(x.value);
            }
            else if (x instanceof T2) {
                assert(!x.array.includes(x.value));
                x.array.push(x.value);
            }
            else if (x instanceof T3) {
                plane_ts.remove(x.array, x.value);
            }
            else if (x instanceof T4) {
                assert(!x.map.has(x.key));
                x.map.set(x.key, x.value);
            }
            else {
                throw new MyError();
            }
            plane_ts.View.current.relationLogs.push(x);
        }
    }
    plane_ts.redoRelations = redoRelations;
    class MySet {
        data = new Set();
        constructor(data = []) {
            this.data = new Set(data);
        }
        clear() {
            this.data.clear();
        }
        add(value) {
            if (!this.data.has(value)) {
                this.data.add(value);
                plane_ts.View.current.relationLogs.push(new T1(this.data, value));
            }
        }
        has(item) {
            return this.data.has(item);
        }
        values() {
            return this.data.values();
        }
        forEach(callback, thisArg) {
            this.data.forEach(callback, thisArg);
        }
        toArray() {
            return Array.from(this.data);
        }
        [Symbol.iterator]() {
            return this.data.values();
        }
    }
    plane_ts.MySet = MySet;
    class MyArray {
        data = [];
        constructor(initialData = []) {
            this.data = initialData;
        }
        clear() {
            this.data = [];
        }
        filter(callback) {
            const filteredArray = this.data.filter(callback);
            return new MyArray(filteredArray);
        }
        toArray() {
            return this.data;
        }
        some(fnc) {
            return this.data.some(fnc);
        }
        find(fnc) {
            return this.data.find(fnc);
        }
        push(value) {
            this.data.push(value);
            plane_ts.View.current.relationLogs.push(new T2(this.data, value));
        }
        flat() {
            return this.data.flat();
        }
        [Symbol.iterator]() {
            let index = 0;
            const array = this.data;
            return {
                next() {
                    if (index < array.length) {
                        return { value: array[index++], done: false };
                    }
                    else {
                        return { value: undefined, done: true };
                    }
                },
            };
        }
        remove(x) {
            const index = this.data.indexOf(x);
            if (index == -1) {
                throw new MyError();
            }
            else {
                this.data.splice(index, 1);
                const value = this.data[index];
                plane_ts.View.current.relationLogs.push(new T3(this.data, value, index));
            }
        }
    }
    plane_ts.MyArray = MyArray;
    class MyMap {
        map = new Map();
        constructor() { }
        set(key, value) {
            if (!this.map.has(key)) {
                this.map.set(key, value);
                plane_ts.View.current.relationLogs.push(new T4(this.map, key, value));
            }
        }
        get(key) {
            return this.map.get(key);
        }
        clear() {
            this.map.clear();
        }
        entries() {
            return this.map.entries();
        }
        keys() {
            return this.map.keys();
        }
        values() {
            return this.map.values();
        }
    }
    plane_ts.MyMap = MyMap;
    function Mylist(set) {
        if (set == undefined) {
            return [];
        }
        else {
            return set.toArray();
        }
    }
    plane_ts.Mylist = Mylist;
    function MyIntersection(set1, set2) {
        if (set1 == undefined || set2 == undefined) {
            return [];
        }
        return Array.from(set1.values()).filter(x => set2.has(x));
    }
    plane_ts.MyIntersection = MyIntersection;
    const $dic = new Map();
    function $(id) {
        let ele = $dic.get(id);
        if (ele == undefined) {
            ele = document.getElementById(id);
            $dic.set(id, ele);
        }
        return ele;
    }
    plane_ts.$ = $;
    function $div(id) {
        return $(id);
    }
    plane_ts.$div = $div;
    function $inp(id) {
        return $(id);
    }
    plane_ts.$inp = $inp;
    function $dlg(id) {
        return $(id);
    }
    plane_ts.$dlg = $dlg;
    function $sel(id) {
        return $(id);
    }
    plane_ts.$sel = $sel;
    // Define a function that returns a Promise
    async function waitForClick(element) {
        return new Promise((resolve) => {
            const clickHandler = (ev) => {
                element.removeEventListener('click', clickHandler);
                const target = ev.target;
                let result_value = NaN;
                if (target.className == plane_ts.enumSelectionClassName) {
                    result_value = parseInt(target.dataset.operation_value);
                }
                resolve(result_value);
            };
            element.addEventListener('click', clickHandler);
        });
    }
    plane_ts.waitForClick = waitForClick;
    async function showMenu(dlgType) {
        const dlg = plane_ts.menuDialogs.get(dlgType);
        assert(dlg != undefined);
        dlg.showModal();
        let value;
        if (plane_ts.View.isPlayBack) {
            const operation = plane_ts.playBackOperations.next();
            // msg(`show Menu:${operation.dump()}`);
            plane_ts.View.current.addOperation(operation);
            if (operation instanceof plane_ts.EnumSelection) {
                const items = Array.from(dlg.html().getElementsByClassName(plane_ts.enumSelectionClassName));
                const enum_value = `${operation.value}`;
                const item = items.find(x => x.dataset.operation_value == enum_value);
                assert(item != undefined);
                await plane_ts.movePointerAndHighlight(item);
                value = operation.value;
            }
            else {
                throw new MyError();
            }
        }
        else {
            value = await waitForClick(dlg.html());
            plane_ts.View.current.addOperation(new plane_ts.EnumSelection(value));
        }
        dlg.close();
        return value;
    }
    plane_ts.showMenu = showMenu;
    class MyError extends Error {
        constructor(text = "") {
            super(text);
        }
    }
    plane_ts.MyError = MyError;
    function assert(b, msg = "") {
        if (!b) {
            throw new MyError(msg);
        }
    }
    plane_ts.assert = assert;
    function msg(txt) {
        layout_ts.Log.log(txt);
    }
    plane_ts.msg = msg;
    function range(n) {
        return [...Array(n).keys()];
    }
    plane_ts.range = range;
    function last(v) {
        return v[v.length - 1];
    }
    plane_ts.last = last;
    function unique(v) {
        let set = new Set();
        const ret = [];
        for (const x of v) {
            if (!set.has(x)) {
                set.add(x);
                ret.push(x);
            }
        }
        return ret;
    }
    plane_ts.unique = unique;
    function average(v) {
        return plane_ts.sum(v) / v.length;
    }
    plane_ts.average = average;
    async function fetchText(fileURL) {
        const response = await fetch(fileURL);
        const text = await response.text();
        return text;
    }
    plane_ts.fetchText = fetchText;
    function pseudoColor(n) {
        n = Math.max(0, Math.min(1, n));
        let r, g, b;
        if (n < 0.25) {
            b = 1;
            g = n * 4;
            r = 0;
        }
        else if (n < 0.5) {
            b = (0.5 - n) * 4;
            g = 1;
            r = 0;
        }
        else if (n < 0.75) {
            b = 0;
            g = 1;
            r = (n - 0.5) * 4;
        }
        else {
            b = 0;
            g = (1 - n) * 4;
            r = 1;
        }
        return [r, g, b];
    }
    plane_ts.pseudoColor = pseudoColor;
    function toRadian(degree) {
        return degree * Math.PI / 180;
    }
    plane_ts.toRadian = toRadian;
    function toDegree(radian) {
        return radian * 180 / Math.PI;
    }
    plane_ts.toDegree = toDegree;
    function inRange(start, theta, end) {
        const f = (x) => { return 0 <= x ? x : 180 + x; };
        [start, theta, end] = [f(start), f(theta), f(end)];
        [theta, end] = [theta - start, end - start];
        const g = (x) => { return 0 <= x ? x : 360 + x; };
        [theta, end] = [g(theta), g(end)];
        assert(0 <= theta && 0 <= end);
        return theta <= end;
    }
    plane_ts.inRange = inRange;
    function linear(src_min, src_val, src_max, dst_min, dst_max) {
        const ratio = (src_val - src_min) / (src_max - src_min);
        const dst_val = dst_min + ratio * (dst_max - dst_min);
        return dst_val;
    }
    plane_ts.linear = linear;
    function MinMaxXY(p1, p2) {
        const min_x = Math.min(p1.x, p2.x);
        const min_y = Math.min(p1.y, p2.y);
        const max_x = Math.max(p1.x, p2.x);
        const max_y = Math.max(p1.y, p2.y);
        return [min_x, min_y, max_x, max_y];
    }
    plane_ts.MinMaxXY = MinMaxXY;
    function pairKey(a, b) {
        return a.id <= b.id ? `${a.id}:${b.id}` : `${b.id}:${a.id}`;
    }
    plane_ts.pairKey = pairKey;
    async function sleepInFastForward(milliseconds) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, milliseconds);
        });
    }
    plane_ts.sleepInFastForward = sleepInFastForward;
    function normalizeAngle(theta) {
        return 0 <= theta ? theta : theta + 2 * Math.PI;
    }
    function isBetweenAngles(start, theta, end) {
        theta = normalizeAngle(theta - start);
        end = normalizeAngle(end - start);
        assert(0 <= theta && 0 <= end);
        return theta <= end;
    }
    plane_ts.isBetweenAngles = isBetweenAngles;
    function makeName() {
        const points = plane_ts.View.current.allRealShapes().filter(x => x instanceof plane_ts.Point).concat(plane_ts.Point.tempPoints);
        const upper_latin_letters = i18n_ts.upperLatinLetters;
        const idxes = points.map(x => upper_latin_letters.indexOf(x.name));
        let name;
        if (idxes.length == 0) {
            name = upper_latin_letters[0];
        }
        else {
            const max_idx = Math.max(...idxes);
            if (max_idx == -1) {
                name = upper_latin_letters[0];
            }
            else if (max_idx + 1 < upper_latin_letters.length) {
                name = upper_latin_letters[max_idx + 1];
            }
            else {
                throw new MyError();
            }
        }
    }
    function setterName(name) {
        return "set" + name[0].toUpperCase() + name.substring(1);
    }
    function setProperty(obj, property_name, newValue) {
        const setter_name = setterName(property_name);
        if (obj[setter_name] != undefined) {
            obj[setter_name](newValue);
        }
        else {
            obj[property_name] = newValue;
        }
    }
    plane_ts.setProperty = setProperty;
    function anyToObj(obj) {
        if (Array.isArray(obj)) {
            return obj.map(x => anyToObj(x));
        }
        else if (obj instanceof plane_ts.Widget) {
            return obj.toObj();
        }
        else {
            return obj;
        }
    }
    plane_ts.anyToObj = anyToObj;
    function isClockwise(points) {
        assert(points.length == 3);
        const [A, B, C] = points.map(x => x.position);
        const AB = B.sub(A);
        const AC = C.sub(A);
        const cross_product = AB.cross(AC);
        assert(cross_product != 0);
        return 0 < cross_product;
    }
    plane_ts.isClockwise = isClockwise;
    function toClockwisePoints(points) {
        if (points.length == 3) {
            if (isClockwise(points)) {
                return points.slice();
            }
            else {
                return [2, 1, 0].map(i => points[i]);
            }
        }
        if (points.length != 4) {
            throw new MyError();
        }
        const [p1, p2, p3] = toClockwisePoints(points.slice(0, 3));
        const p4 = points[3];
        if (isClockwise([p1, p4, p2])) {
            return [p1, p4, p2, p3];
        }
        else if (isClockwise([p2, p4, p3])) {
            return [p1, p2, p4, p3];
        }
        else if (isClockwise([p3, p4, p1])) {
            return [p3, p4, p1, p2];
        }
        else {
            throw new MyError();
        }
    }
    plane_ts.toClockwisePoints = toClockwisePoints;
    let reasonMsgMap;
    function makeReasonMsgMap() {
        return new Map([
            [plane_ts.TriangleCongruenceReason.side_side_side, plane_ts.TT("Since three pairs of sides of two triangles are equal,")],
            [plane_ts.TriangleCongruenceReason.side_angle_side, plane_ts.TT("Since two pairs of sides of two triangles are equal, and the included angles are equal,")],
            [plane_ts.TriangleCongruenceReason.angle_side_angle, plane_ts.TT("Since two pairs of angles of two triangles are equal, and the included sides are equal,")],
            [plane_ts.ShapeEquationReason.sum_of_angles_is_pi, plane_ts.TT("Since the sum of the angles is π,")],
            [plane_ts.ShapeEquationReason.sum_of_angles_is_equal, plane_ts.TT("Since the sum of the angles is equal,")],
            [plane_ts.ShapeEquationReason.sum_of_lengths_is_equal, plane_ts.TT("Since the sum of the lengths is equal,")],
            [plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi, plane_ts.TT("Since the sum of the interior angles of a triangle is π,")],
            [plane_ts.ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi, plane_ts.TT("Since the sum of the interior angles of a quadrilateral is 2 π,")],
            [plane_ts.ShapeEquationReason.exterior_angle_theorem, plane_ts.TT("Since the exterior angle of a triangle equals the sum of two remote interior angles,")],
            [plane_ts.LengthEqualityReason.radii_equal, plane_ts.TT("Since the two circles have the same radius,")],
            [plane_ts.LengthEqualityReason.common_circle, plane_ts.TT("Since two length symbols are the radii of the same circle,")],
            [plane_ts.LengthEqualityReason.parallel_lines_distance, plane_ts.TT("Since the distance between two parallel lines is constant,")],
            [plane_ts.LengthEqualityReason.not_used, plane_ts.TT("Since the two circles have the same radius,")],
            [plane_ts.LengthEqualityReason.congruent_triangles, plane_ts.TT("Since the two triangles are congruent,")],
            [plane_ts.LengthEqualityReason.parallelogram_opposite_sides, plane_ts.TT("Since the opposite sides of a parallelogram are equal in length,")],
            [plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection, plane_ts.TT("Since the diagonals of a parallelogram intersect at the midpoint,")],
            [plane_ts.LengthEqualityReason.equivalence_class, plane_ts.TT("Since these two length symbols are equal to another length symbol,")],
            [plane_ts.LengthEqualityReason.midpoint, plane_ts.TT("Since the midpoint bisects the line segment,")],
            [plane_ts.AngleEqualityReason.vertical_angles, plane_ts.TT("Since vertical angles are equal,")],
            [plane_ts.AngleEqualityReason.parallel_line_angles, plane_ts.TT("Since the corresponding angles of parallel lines are equal,")],
            [plane_ts.AngleEqualityReason.angle_bisector, plane_ts.TT("Since these angles are formed by the angle bisectors,")],
            [plane_ts.AngleEqualityReason.congruent_triangles, plane_ts.TT("Since the two triangles are congruent,")],
            [plane_ts.AngleEqualityReason.parallelogram_opposite_angles, plane_ts.TT("Since the diagonals of a parallelogram are congruent,")],
            [plane_ts.AngleEqualityReason.similar_triangles, plane_ts.TT("Since the two triangles are similar,")],
            [plane_ts.AngleEqualityReason.isosceles_triangle_base_angles, plane_ts.TT("Since the base angles of an isosceles triangle are equal,")],
            [plane_ts.ParallelogramReason.each_opposite_sides_are_equal, plane_ts.TT("Since each opposite sides are equal,")],
            [plane_ts.ParallelogramReason.each_opposite_sides_are_parallel, plane_ts.TT("Since each opposite sides are parallel,")],
            [plane_ts.ParallelogramReason.each_opposite_angles_are_equal, plane_ts.TT("Since each opposite angles are equal,")],
            [plane_ts.ParallelogramReason.one_opposite_sides_are_parallel_and_equal, plane_ts.TT("Since one opposite sides are parallel and equal,")],
            [plane_ts.ParallelogramReason.each_diagonal_bisections, plane_ts.TT("Since the diagonals intersect at their midpoints,")],
            [plane_ts.RhombusReason.all_sides_are_equal, plane_ts.TT("Since all four sides are equal in length,")],
            [plane_ts.IsoscelesTriangleReason.two_sides_are_equal, plane_ts.TT("Since two sides are equal in length,")],
            [plane_ts.ParallelReason.parallelogram, plane_ts.TT("Since the opposite sides of a parallelogram are parallel,")],
            [plane_ts.ParallelReason.corresponding_angles_or_alternate_angles_are_equal, plane_ts.TT("Since corresponding angles or alternate angles are equal,")],
            [plane_ts.ParallelReason.supplementary_angles, plane_ts.TT("Since the sum of the two interior angles on the same side is π,")],
            [plane_ts.TriangleSimilarityReason.two_equal_angle_pairs, plane_ts.TT("Since both pairs of angles in two triangles are equal,")],
            [plane_ts.ExprTransformReason.transposition, plane_ts.TT("Transpose the term.")],
            [plane_ts.ExprTransformReason.equality, plane_ts.TT("From the above equations,")],
            [plane_ts.ExprTransformReason.add_equation, plane_ts.TT("Add two equations together.")],
            [plane_ts.ExprTransformReason.substitution, plane_ts.TT("Substitute the term.")],
            [plane_ts.ExprTransformReason.dividing_equation, plane_ts.TT("Dividing an equation by the same term.")],
            [plane_ts.ExprTransformReason.arg_shift, plane_ts.TT("Shift the argument.")],
            [0, plane_ts.TT("no reason")],
        ]);
    }
    function reasonMsg(reason) {
        if (reasonMsgMap == undefined) {
            reasonMsgMap = makeReasonMsgMap();
        }
        const text = reasonMsgMap.get(reason);
        if (text != undefined) {
            return text;
        }
        throw new MyError();
    }
    plane_ts.reasonMsg = reasonMsg;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function makeTriangleCongruence(A, B) {
        const sidesA = plane_ts.range(3).map(i => [A.points[i], A.points[(i + 1) % 3]]);
        const sidesB = plane_ts.range(3).map(i => [B.points[i], B.points[(i + 1) % 3]]);
        const auxiliaryShapes = [];
        const equal_side = [false, false, false];
        for (const idx of plane_ts.range(3)) {
            const sideA = sidesA[idx];
            const sideB = sidesB[idx];
            const keyA = plane_ts.pairKey(sideA[0], sideA[1]);
            const keyB = plane_ts.pairKey(sideB[0], sideB[1]);
            const lengthSymbolA = plane_ts.pointsToLengthSymbol.get(keyA);
            const lengthSymbolB = plane_ts.pointsToLengthSymbol.get(keyB);
            if (lengthSymbolA != undefined && lengthSymbolB != undefined) {
                if (plane_ts.isEqualLength(lengthSymbolA, lengthSymbolB)) {
                    auxiliaryShapes.push(lengthSymbolA, lengthSymbolB);
                    equal_side[idx] = true;
                }
            }
        }
        const equal_side_count = equal_side.filter(x => x).length;
        // msg(`equal side count:${equal_side_count}`);
        if (equal_side_count == 3) {
            return new TriangleCongruence({ shapes: [A, B], reason: plane_ts.TriangleCongruenceReason.side_side_side, auxiliaryShapes: auxiliaryShapes });
        }
        else if (equal_side_count == 2) {
            const idx = equal_side.indexOf(false);
            const angle_pointsA = [A.points[(idx + 1) % 3], A.points[(idx + 2) % 3], A.points[idx]];
            const angle_pointsB = [B.points[(idx + 1) % 3], B.points[(idx + 2) % 3], B.points[idx]];
            const angleA = plane_ts.findAngle(angle_pointsA);
            const angleB = plane_ts.findAngle(angle_pointsB);
            if (angleA != undefined && angleB != undefined && plane_ts.isEqualAngle(angleA, angleB)) {
                auxiliaryShapes.push(angleA, angleB);
                return new TriangleCongruence({ shapes: [A, B], reason: plane_ts.TriangleCongruenceReason.side_angle_side, auxiliaryShapes: auxiliaryShapes });
            }
        }
        else if (equal_side_count == 1) {
            const eq_idx = equal_side.indexOf(true);
            for (const idx of [eq_idx, (eq_idx + 2) % 3]) {
                const angle_pointsA = [A.points[idx], A.points[(idx + 1) % 3], A.points[(idx + 2) % 3]];
                const angle_pointsB = [B.points[idx], B.points[(idx + 1) % 3], B.points[(idx + 2) % 3]];
                const angleA = plane_ts.findAngle(angle_pointsA);
                if (angleA == undefined) {
                    return undefined;
                }
                const angleB = plane_ts.findAngle(angle_pointsB);
                if (angleB == undefined) {
                    return undefined;
                }
                if (plane_ts.isEqualAngle(angleA, angleB)) {
                    auxiliaryShapes.push(angleA, angleB);
                }
                else {
                    return undefined;
                }
            }
            return new TriangleCongruence({ shapes: [A, B], reason: plane_ts.TriangleCongruenceReason.angle_side_angle, auxiliaryShapes: auxiliaryShapes });
        }
        return undefined;
    }
    plane_ts.makeTriangleCongruence = makeTriangleCongruence;
    class TriangleCongruence extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
        }
        reading() {
            return this.textReading(plane_ts.TT("the two triangles are congruent."));
        }
        setRelations() {
            super.setRelations();
            const triangles = this.selectedShapes;
            plane_ts.addCongruentTriangles(triangles[0], triangles[1]);
        }
    }
    plane_ts.TriangleCongruence = TriangleCongruence;
})(plane_ts || (plane_ts = {}));
///<reference path="plane_util.ts" />
///<reference path="statement.ts" />
///<reference path="deduction/triangle_congruence.ts" />
var plane_ts;
(function (plane_ts) {
    //
    let perpendicularPairs = new plane_ts.MyArray();
    plane_ts.supplementaryAngles = new plane_ts.MyArray();
    plane_ts.rightAngles = new plane_ts.MySet();
    plane_ts.pointsToLengthSymbol = new plane_ts.MyMap();
    plane_ts.centerOfCircleArcs = new plane_ts.MyMap();
    plane_ts.pointOnCircleArcs = new plane_ts.MyMap();
    plane_ts.pointOnLines = new plane_ts.MyMap();
    plane_ts.angleMap = new plane_ts.MyMap();
    plane_ts.parallelogramClassifiers = new plane_ts.MySet();
    plane_ts.equalLengths = new plane_ts.MyArray();
    plane_ts.equalCircleArcs = new plane_ts.MyArray();
    plane_ts.congruentTriangles = new plane_ts.MyArray();
    plane_ts.similarTriangles = new plane_ts.MyArray();
    plane_ts.isoscelesTriangle = new plane_ts.MyArray();
    plane_ts.propositions = new plane_ts.MyArray();
    plane_ts.reasonToDoc = new Map([
        [plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi, 18],
        [plane_ts.ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi, 21],
        [plane_ts.ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi, 23],
        [plane_ts.AngleEqualityReason.vertical_angles, 17],
        [plane_ts.AngleEqualityReason.parallelogram_opposite_angles, 10],
        [plane_ts.AngleEqualityReason.angle_bisector, 2],
        [plane_ts.AngleEqualityReason.isosceles_triangle_base_angles, 3],
        [plane_ts.LengthEqualityReason.parallel_lines_distance, 16],
        [plane_ts.LengthEqualityReason.parallelogram_opposite_sides, 10],
        [plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection, 11],
        [plane_ts.ParallelogramReason.each_opposite_sides_are_equal, 1],
        [plane_ts.ParallelogramReason.each_opposite_angles_are_equal, 22],
        [plane_ts.ParallelogramReason.one_opposite_sides_are_parallel_and_equal, 12],
        [plane_ts.ParallelogramReason.each_diagonal_bisections, 9],
    ]);
    plane_ts.usedReasons = new Set();
    function addMySetMap(a, b, map) {
        let set = map.get(a);
        if (set == undefined) {
            set = new plane_ts.MySet();
            map.set(a, set);
        }
        set.add(b);
    }
    function addSetMap(a, b, map) {
        let set = map.get(a);
        if (set == undefined) {
            set = new plane_ts.MySet();
            map.set(a, set);
        }
        set.add(b);
    }
    function initRelations() {
        perpendicularPairs.clear();
        plane_ts.supplementaryAngles.clear();
        plane_ts.rightAngles.clear();
        plane_ts.pointsToLengthSymbol.clear();
        plane_ts.centerOfCircleArcs.clear();
        plane_ts.pointOnCircleArcs.clear();
        plane_ts.pointOnLines.clear();
        plane_ts.angleMap.clear();
        plane_ts.parallelogramClassifiers.clear();
        plane_ts.equalLengths.clear();
        plane_ts.equalCircleArcs.clear();
        plane_ts.congruentTriangles.clear();
        plane_ts.similarTriangles.clear();
        plane_ts.isoscelesTriangle.clear();
        plane_ts.propositions.clear();
        plane_ts.View.current.relationLogs = [];
    }
    plane_ts.initRelations = initRelations;
    function recalcRelations(view) {
        initRelations();
        view.shapes.forEach(x => x.setRelations());
    }
    plane_ts.recalcRelations = recalcRelations;
    function addCenterOfCircleArcs(point, circle) {
        addMySetMap(point, circle, plane_ts.centerOfCircleArcs);
        plane_ts.assert(plane_ts.centerOfCircleArcs.get(point) != undefined);
    }
    plane_ts.addCenterOfCircleArcs = addCenterOfCircleArcs;
    function addPointOnCircleArcs(point, circle) {
        addMySetMap(point, circle, plane_ts.pointOnCircleArcs);
        plane_ts.assert(plane_ts.pointOnCircleArcs.get(point) != undefined);
    }
    plane_ts.addPointOnCircleArcs = addPointOnCircleArcs;
    function addPointOnLines(point, line) {
        addMySetMap(point, line, plane_ts.pointOnLines);
        // msg(`add-Point-On-Lines point${point.id} line:${line.id}`);
        plane_ts.assert(plane_ts.pointOnLines.get(point) != undefined);
    }
    plane_ts.addPointOnLines = addPointOnLines;
    function getLinesByPoint(point) {
        const lines = plane_ts.pointOnLines.get(point);
        if (lines == undefined) {
            return [];
        }
        else {
            return lines.toArray();
        }
    }
    plane_ts.getLinesByPoint = getLinesByPoint;
    function getCircleArcsByPoint(point) {
        const circles = plane_ts.pointOnCircleArcs.get(point);
        if (circles == undefined) {
            return [];
        }
        else {
            return circles.toArray();
        }
    }
    plane_ts.getCircleArcsByPoint = getCircleArcsByPoint;
    //------------------------------------------------------------ perpendicular / parallel lines
    function addPerpendicularPairs(line1, line2) {
        if (perpendicularPairs.some(x => x[0].has(line1) && x[1].has(line2) || x[0].has(line2) && x[1].has(line1))) {
            return;
        }
        const pair = perpendicularPairs.find(x => x[0].has(line1) || x[0].has(line2) || x[1].has(line1) || x[1].has(line2));
        if (pair != undefined) {
            const lines = [line1, line2];
            for (const [i, line_set] of pair.entries()) {
                for (const [j, line] of lines.entries()) {
                    if (line_set.has(line)) {
                        pair[1 - i].add(lines[1 - j]);
                        return;
                    }
                }
            }
        }
        perpendicularPairs.push([new plane_ts.MySet([line1]), new plane_ts.MySet([line2])]);
    }
    plane_ts.addPerpendicularPairs = addPerpendicularPairs;
    function addParallelLines(line1, line2) {
        const line_sets = perpendicularPairs.flat().filter(x => x.has(line1) || x.has(line2));
        let line_set;
        switch (line_sets.length) {
            case 0:
                line_set = new plane_ts.MySet();
                perpendicularPairs.push([line_set, new plane_ts.MySet()]);
                break;
            case 1:
                line_set = line_sets[0];
                break;
            default:
                throw new plane_ts.MyError();
        }
        line_set.add(line1);
        line_set.add(line2);
    }
    plane_ts.addParallelLines = addParallelLines;
    function getPerpendicularLines(line) {
        for (const [lines1, lines2] of perpendicularPairs) {
            if (lines1.has(line)) {
                return lines2;
            }
            else if (lines2.has(line)) {
                return lines1;
            }
        }
        return undefined;
    }
    plane_ts.getPerpendicularLines = getPerpendicularLines;
    function getParallelLines(line) {
        return perpendicularPairs.flat().find(x => x.has(line));
    }
    plane_ts.getParallelLines = getParallelLines;
    function isParallel(lineA, lineB) {
        const line_set = getParallelLines(lineA);
        return line_set != undefined && line_set.has(lineB);
    }
    plane_ts.isParallel = isParallel;
    function isPerpendicular(lineA, lineB) {
        const perpendicular_lines = getPerpendicularLines(lineA);
        if (perpendicular_lines == undefined) {
            return false;
        }
        else {
            return perpendicular_lines.has(lineB);
        }
    }
    plane_ts.isPerpendicular = isPerpendicular;
    function areEqualCircleArcs(circle1, circle2) {
        if (circle1 == circle2) {
            return true;
        }
        const circle_set1 = plane_ts.equalCircleArcs.find(x => x.has(circle1));
        const circle_set2 = plane_ts.equalCircleArcs.find(x => x.has(circle2));
        return circle_set1 != undefined && circle_set1 == circle_set2;
    }
    plane_ts.areEqualCircleArcs = areEqualCircleArcs;
    function addEqualCircleArcs(circle1, circle2) {
        const circle_set1 = plane_ts.equalCircleArcs.find(x => x.has(circle1));
        const circle_set2 = plane_ts.equalCircleArcs.find(x => x.has(circle2));
        if (circle_set1 != undefined) {
            if (circle_set2 != undefined) {
                if (circle_set1 != circle_set2) {
                    plane_ts.Mylist(circle_set2).forEach(x => circle_set1.add(x));
                    plane_ts.equalCircleArcs.remove(circle_set2);
                }
            }
            else {
                circle_set1.add(circle2);
            }
        }
        else {
            if (circle_set2 != undefined) {
                circle_set2.add(circle1);
            }
            else {
                const new_set = new plane_ts.MySet([circle1, circle2]);
                plane_ts.equalCircleArcs.push(new_set);
            }
        }
    }
    plane_ts.addEqualCircleArcs = addEqualCircleArcs;
    function getCommonLineOfPoints(pointA, pointB) {
        const linesA = plane_ts.pointOnLines.get(pointA);
        const linesB = plane_ts.pointOnLines.get(pointB);
        if (linesA == undefined || linesB == undefined) {
            return undefined;
        }
        const common_lines = plane_ts.MyIntersection(linesA, linesB);
        switch (common_lines.length) {
            case 0: return undefined;
            case 1: return common_lines[0];
            default: throw new plane_ts.MyError();
        }
    }
    plane_ts.getCommonLineOfPoints = getCommonLineOfPoints;
    function getPointsFromLine(line) {
        const points = Array.from(plane_ts.pointOnLines.entries()).filter(x => x[1].has(line)).map(x => x[0]);
        return new Set(points);
    }
    plane_ts.getPointsFromLine = getPointsFromLine;
    function getCommonPointOfLines(lineA, lineB) {
        const pointsA = getPointsFromLine(lineA);
        const pointsB = getPointsFromLine(lineB);
        const common_points = plane_ts.intersection(pointsA, pointsB);
        if (common_points.length == 1) {
            return common_points[0];
        }
        return undefined;
    }
    plane_ts.getCommonPointOfLines = getCommonPointOfLines;
    function getLineFromPoints(lines, pointA, pointB) {
        return lines.find(x => x.includesPoint(pointA) && x.includesPoint(pointB));
    }
    plane_ts.getLineFromPoints = getLineFromPoints;
    function addCongruentSimilarTriangles(is_congruent, triangle1, triangle2) {
        if (!(triangle1 instanceof plane_ts.Triangle && triangle2 instanceof plane_ts.Triangle)) {
            plane_ts.msg("old Congruent Triangles");
            return;
        }
        const triangles_list = is_congruent ? plane_ts.congruentTriangles : plane_ts.similarTriangles;
        for (const triangles of triangles_list) {
            let equal_triangle1 = triangles.find(x => x.isEqual(triangle1));
            let equal_triangle2 = triangles.find(x => x.isEqual(triangle2));
            let indexes1;
            let indexes2;
            if (equal_triangle1 != undefined) {
                indexes1 = triangle1.points.map(p => equal_triangle1.points.indexOf(p));
            }
            if (equal_triangle2 != undefined) {
                indexes2 = triangle2.points.map(p => equal_triangle2.points.indexOf(p));
            }
            if (indexes1 != undefined) {
                if (indexes2 != undefined) {
                    if (plane_ts.range(3).every(i => indexes1[i] == indexes2[i])) {
                        return;
                    }
                    else {
                        throw new plane_ts.MyError();
                    }
                }
                else {
                    if (plane_ts.range(3).every(i => indexes1[i] == i)) {
                        triangles.push(triangle2);
                        return;
                    }
                    else {
                        throw new plane_ts.MyError();
                    }
                }
            }
            else if (indexes2 != undefined) {
                if (plane_ts.range(3).every(i => indexes2[i] == i)) {
                    triangles.push(triangle1);
                    return;
                }
                else {
                    throw new plane_ts.MyError();
                }
            }
        }
        triangles_list.push(new plane_ts.MyArray([triangle1, triangle2]));
    }
    plane_ts.addCongruentSimilarTriangles = addCongruentSimilarTriangles;
    function addCongruentTriangles(triangle1, triangle2) {
        return addCongruentSimilarTriangles(true, triangle1, triangle2);
    }
    plane_ts.addCongruentTriangles = addCongruentTriangles;
    function addSimilarTriangles(triangle1, triangle2) {
        return addCongruentSimilarTriangles(false, triangle1, triangle2);
    }
    plane_ts.addSimilarTriangles = addSimilarTriangles;
    function findEqualLengthsByPointsPair(As, Bs) {
        for (const length_symbol_set of plane_ts.equalLengths) {
            const length_symbols = Array.from(length_symbol_set);
            const length_symbolA = length_symbols.find(x => plane_ts.areSetsEqual([x.pointA, x.pointB], [As[0], As[1]]));
            if (length_symbolA != undefined) {
                const length_symbolB = length_symbols.find(x => plane_ts.areSetsEqual([x.pointA, x.pointB], [Bs[0], Bs[1]]));
                if (length_symbolB != undefined) {
                    return [length_symbolA, length_symbolB];
                }
                else {
                    return undefined;
                }
            }
        }
        return undefined;
    }
    plane_ts.findEqualLengthsByPointsPair = findEqualLengthsByPointsPair;
    function getParallelogramClassifier(points) {
        return plane_ts.Mylist(plane_ts.parallelogramClassifiers).find(x => plane_ts.areSetsEqual(x.quadrilateral().points, points));
    }
    plane_ts.getParallelogramClassifier = getParallelogramClassifier;
    function getParallelogramsByDiagonalLengthSymbols(lengthSymbolA, lengthSymbolB) {
        if (lengthSymbolA.line == undefined || lengthSymbolA.line != lengthSymbolB.line) {
            plane_ts.msg(plane_ts.TT("length symbols are not on the same line."));
            return [];
        }
        const connection_point = lengthSymbolA.points().find(x => lengthSymbolB.points().includes(x));
        if (connection_point == undefined) {
            plane_ts.msg(plane_ts.TT("no connection point of two length symbols"));
            return [];
        }
        const pointA = lengthSymbolA.points().find(x => x != connection_point);
        const pointB = lengthSymbolB.points().find(x => x != connection_point);
        const parallelograms = [];
        for (const parallelogramClassifier of plane_ts.parallelogramClassifiers) {
            const parallelogram = parallelogramClassifier.quadrilateral();
            const points = parallelogram.points;
            if (plane_ts.areSetsEqual([points[0], points[2]], [pointA, pointB]) || plane_ts.areSetsEqual([points[1], points[3]], [pointA, pointB])) {
                parallelograms.push(parallelogram);
            }
        }
        return parallelograms;
    }
    plane_ts.getParallelogramsByDiagonalLengthSymbols = getParallelogramsByDiagonalLengthSymbols;
    function isParallelogramPoints(points) {
        return getParallelogramClassifier(points) != undefined;
    }
    plane_ts.isParallelogramPoints = isParallelogramPoints;
    function getTrianglesByAngle(angle, triangles) {
        const triangles_with_inner_angle = [];
        LA: for (const triangle of triangles) {
            const angle_points = [angle.intersection];
            for (const line of [angle.lineA, angle.lineB]) {
                const points = triangle.points.filter(point => line.includesPoint(point));
                if (points.length != 2) {
                    continue LA;
                }
                if (points[0] == angle.intersection) {
                    angle_points.push(points[1]);
                }
                else if (points[1] == angle.intersection) {
                    angle_points.push(points[0]);
                }
                else {
                    continue LA;
                }
            }
            plane_ts.assert(angle_points.length == 3);
            if (plane_ts.isClockwise(angle_points)) {
                triangles_with_inner_angle.push(triangle);
            }
        }
        return triangles_with_inner_angle;
    }
    plane_ts.getTrianglesByAngle = getTrianglesByAngle;
    function getTrianglesByLengthSymbol(length_symbol, triangles) {
        const triangles_with_length_symbol = [];
        const Length_symbol_points = [length_symbol.pointA, length_symbol.pointB];
        for (const triangle of triangles) {
            const points = triangle.points.filter(point => Length_symbol_points.includes(point));
            if (points.length == 2) {
                triangles_with_length_symbol.push(triangle);
            }
        }
        return triangles_with_length_symbol;
    }
    plane_ts.getTrianglesByLengthSymbol = getTrianglesByLengthSymbol;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    class Mat {
        dt;
        constructor(dt = undefined) {
            this.dt = this.zeroDt();
            if (dt == undefined) {
                return;
            }
            for (let i = 0; i < dt.length; i++) {
                for (let j = 0; j < dt[0].length; j++) {
                    this.dt[i][j] = dt[i][j];
                }
            }
        }
        dim() {
            return [NaN, NaN];
        }
        zeroDt() {
            let [nrow, ncol] = this.dim();
            return plane_ts.range(nrow).map(x => plane_ts.range(ncol).map(y => 0));
        }
        zeros() {
            return new Mat2(this.zeroDt());
        }
        copy() {
            let [nrow, ncol] = this.dim();
            let m = new Mat2();
            for (let r = 0; r < nrow; r++) {
                for (let c = 0; c < ncol; c++) {
                    m.dt[r][c] = this.dt[r][c];
                }
            }
            return m;
        }
        print(name = "") {
            if (name != "") {
                plane_ts.msg(`${name} = [`);
            }
            else {
                plane_ts.msg("[");
            }
            let [nrow, ncol] = this.dim();
            for (let r = 0; r < nrow; r++) {
                let s = this.dt[r].map(x => x.toFixed(5)).join(", ");
                plane_ts.msg(`\t[ ${s} ]`);
            }
        }
        mul(x) {
            let [nrow, ncol] = this.dim();
            if (typeof (x) == "number") {
                let m = this.copy();
                for (let r = 0; r < nrow; r++) {
                    for (let c = 0; c < ncol; c++) {
                        m.dt[r][c] *= x;
                    }
                }
                return m;
            }
            else {
                let m = this.zeros();
                for (let r = 0; r < nrow; r++) {
                    for (let c = 0; c < ncol; c++) {
                        let sum = 0;
                        for (let k = 0; k < ncol; k++) {
                            sum += this.dt[r][k] * x.dt[k][c];
                        }
                        m.dt[r][c] = sum;
                    }
                }
                return m;
            }
        }
    }
    plane_ts.Mat = Mat;
    class Mat2 extends Mat {
        dim() {
            return [2, 2];
        }
        det() {
            return this.dt[0][0] * this.dt[1][1] - this.dt[0][1] * this.dt[1][0];
        }
        dot(v) {
            return new plane_ts.Vec2(this.dt[0][0] * v.x + this.dt[0][1] * v.y, this.dt[1][0] * v.x + this.dt[1][1] * v.y);
        }
        inv() {
            const det = this.det();
            console.assert(det != 0);
            return new Mat2([[this.dt[1][1] / det, -this.dt[0][1] / det], [-this.dt[1][0] / det, this.dt[0][0] / det]]);
        }
    }
    plane_ts.Mat2 = Mat2;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    class Operation {
        static maxId = 0;
        operationId;
        shapesLength = NaN;
        relationLogsLength = NaN;
        constructor() {
            this.operationId = Operation.maxId++;
        }
        dump() {
            return this.toString();
        }
    }
    plane_ts.Operation = Operation;
    function convertOperations(version, operations) {
        if (version == 2.0) {
            const new_operations = [];
            let idx = 0;
            while (idx < operations.length) {
                const operation = operations[idx];
                new_operations.push(operation);
                if (operation instanceof ToolSelection && ["LengthEqualityBuilder", "AngleEqualityBuilder", "ParallelDetectorBuilder"].includes(operation.toolName)) {
                    plane_ts.assert(operations[idx + 3] instanceof EnumSelection);
                    new_operations.push(operations[idx + 3]);
                    new_operations.push(operations[idx + 1]);
                    new_operations.push(operations[idx + 2]);
                    idx += 4;
                }
                else if (operation instanceof ToolSelection && operation.toolName == "QuadrilateralClassifierBuilder") {
                    plane_ts.assert(operations[idx + 5] instanceof EnumSelection && operations[idx + 6] instanceof EnumSelection);
                    new_operations.push(operations[idx + 5]);
                    new_operations.push(operations[idx + 6]);
                    new_operations.push(operations[idx + 1]);
                    new_operations.push(operations[idx + 2]);
                    new_operations.push(operations[idx + 3]);
                    new_operations.push(operations[idx + 4]);
                    idx += 7;
                }
                else {
                    idx++;
                }
            }
            return new_operations;
        }
        return operations;
    }
    plane_ts.convertOperations = convertOperations;
    async function loadOperationsText(data) {
        let lines;
        if (2 <= data["version"]) {
            lines = data["operations"];
            plane_ts.assert(Array.isArray(lines) && (lines.length == 0 || typeof lines[1] == "string"));
        }
        else {
            plane_ts.msg(`data is empty.`);
            lines = [];
        }
        const view = plane_ts.View.current;
        view.clearView();
        let operations = [];
        let prev_line = "";
        for (let line of lines) {
            line = line.trim().replaceAll(/\s+/g, " ");
            if (line == "") {
                continue;
            }
            if (prev_line == line && line.startsWith("property")) {
                plane_ts.msg(`dup line:[${line}]`);
                continue;
            }
            prev_line = line;
            let operation;
            // msg(`load:${line}`);
            const items = line.split(" ");
            switch (items[0]) {
                case "click":
                    {
                        const x = parseFloat(items[1]);
                        const y = parseFloat(items[2]);
                        let shapeId = NaN;
                        if (4 <= items.length) {
                            shapeId = parseInt(items[3]);
                            plane_ts.assert(!isNaN(shapeId));
                        }
                        operation = new ClickShape(new plane_ts.Vec2(x, y), shapeId);
                    }
                    break;
                case "term":
                    {
                        const textBlock_id = parseInt(items[1]);
                        let indexes;
                        if (items.length == 2) {
                            indexes = [];
                        }
                        else {
                            indexes = items[2].split(":").map(x => parseInt(x));
                        }
                        operation = new ClickTerm(textBlock_id, indexes);
                    }
                    break;
                case "tool":
                    operation = new ToolSelection(items[1]);
                    break;
                case "finish":
                    operation = new ToolFinish(items[1]);
                    break;
                case "enum":
                    {
                        const enum_id = parseInt(items[1]);
                        operation = new EnumSelection(enum_id);
                    }
                    break;
                case "text":
                    {
                        const regex = /text\s+'?([^']+)'?/;
                        const matches = line.match(regex);
                        plane_ts.assert(matches != null);
                        const items2 = Array.from(matches);
                        // msg(`text len:${items2.length} [${items2[1]}]`);
                        const text = items2[1];
                        operation = new TextPrompt(text);
                    }
                    break;
                case "property":
                    {
                        const regex = /property\s+(\d+)\s+([0-9a-zA-Z_]+)\s+'?([^']+)'?/;
                        const matches = line.match(regex);
                        plane_ts.assert(matches != null);
                        const items2 = Array.from(matches);
                        plane_ts.assert(items2.length == 4);
                        const [id, name, value_str] = items2.slice(1);
                        let value;
                        if (line.endsWith("'")) {
                            value = value_str;
                        }
                        else {
                            value = parseFloat(value_str);
                        }
                        operation = new PropertySetting(parseInt(id), name, value);
                    }
                    break;
                default:
                    throw new plane_ts.MyError();
            }
            operations.push(operation);
        }
        operations = plane_ts.convertOperations(data["version"], operations);
        return operations;
    }
    plane_ts.loadOperationsText = loadOperationsText;
    function getOperationsText() {
        const data = {
            version: 2.1,
            operations: plane_ts.View.current.operations.map(x => x.toString())
        };
        const doc_text = JSON.stringify(data, null, 4);
        plane_ts.msg(`operations-text : \n${doc_text}\n`);
        return doc_text;
    }
    plane_ts.getOperationsText = getOperationsText;
    class ClickShape extends Operation {
        position;
        shapeId;
        createdPoint;
        constructor(position, shapeId) {
            super();
            this.position = position;
            this.shapeId = shapeId;
        }
        toString() {
            let shape_str = "";
            if (!isNaN(this.shapeId)) {
                const shape = plane_ts.idMap.get(this.shapeId);
                plane_ts.assert(shape instanceof plane_ts.Shape);
                shape_str = `${this.shapeId} ${shape.constructor.name}`;
            }
            const fnc = (n) => (10 < Math.abs(n) ? n.toFixed(1) : n.toFixed(2));
            const x = fnc(this.position.x);
            const y = fnc(this.position.y);
            return `click ${x} ${y} ${shape_str}`;
        }
        dump() {
            if (this.createdPoint == undefined) {
                return this.toString();
            }
            else {
                return this.toString() + `point:${this.createdPoint.id} ${this.createdPoint.position}`;
            }
        }
    }
    plane_ts.ClickShape = ClickShape;
    class ClickTerm extends Operation {
        textBlock_id;
        indexes;
        constructor(textBlock_id, indexes) {
            super();
            this.textBlock_id = textBlock_id;
            this.indexes = indexes.slice();
        }
        getTextBlockTerm() {
            let textBlock = plane_ts.View.current.allShapes().find(x => x.id == this.textBlock_id);
            if (!(textBlock instanceof plane_ts.TextBlock) || textBlock.getEquation() == undefined) {
                if (textBlock instanceof plane_ts.ShapeEquation) {
                    // !!!!!!!!!!!!!!!!!!!!!!!! ソース修正の副作用の経過措置 !!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    textBlock = textBlock.textBlock;
                    plane_ts.assert(textBlock.getEquation() != undefined);
                }
                else {
                    throw new plane_ts.MyError();
                }
            }
            const path = new parser_ts.Path(this.indexes);
            const term = path.getTerm(textBlock.getEquation());
            return [textBlock, term];
        }
        toString() {
            if (this.indexes.length == 0) {
                plane_ts.msg(`no indexes:term ${this.textBlock_id}`);
            }
            return `term ${this.textBlock_id}  ${this.indexes.join(":")}`;
        }
    }
    plane_ts.ClickTerm = ClickTerm;
    class ToolSelection extends Operation {
        toolName;
        constructor(tool_name) {
            super();
            this.toolName = tool_name;
        }
        toString() {
            return `tool  ${this.toolName}`;
        }
    }
    plane_ts.ToolSelection = ToolSelection;
    class ToolFinish extends Operation {
        toolName;
        constructor(tool_name) {
            super();
            this.toolName = tool_name;
        }
        toString() {
            return `finish  ${this.toolName}`;
        }
    }
    plane_ts.ToolFinish = ToolFinish;
    class EnumSelection extends Operation {
        value;
        constructor(value) {
            super();
            this.value = value;
        }
        toString() {
            return `enum  ${this.value}`;
        }
    }
    plane_ts.EnumSelection = EnumSelection;
    function inputTextPrompt(message) {
        let text;
        if (plane_ts.View.isPlayBack) {
            const operation = plane_ts.playBackOperations.next();
            plane_ts.View.current.addOperation(operation);
            if (operation instanceof TextPrompt) {
                text = operation.text;
            }
            else {
                throw new plane_ts.MyError();
            }
        }
        else {
            text = prompt(message);
            if (text != null) {
                plane_ts.View.current.addOperation(new TextPrompt(text.trim()));
            }
        }
        return text;
    }
    plane_ts.inputTextPrompt = inputTextPrompt;
    class TextPrompt extends Operation {
        text;
        constructor(text) {
            super();
            this.text = text;
        }
        toString() {
            return `text  '${this.text}'`;
        }
    }
    plane_ts.TextPrompt = TextPrompt;
    class PropertySetting extends Operation {
        id;
        name;
        value;
        constructor(id, name, value) {
            super();
            this.id = id;
            this.name = name;
            this.value = value;
            // msg(`========== Property-Setting:${name} [${value}] ==================================================`)
        }
        toString() {
            if (typeof this.value == "string") {
                return `property ${this.id} ${this.name} '${this.value}'`;
            }
            else {
                return `property ${this.id} ${this.name} ${this.value}`;
            }
        }
    }
    plane_ts.PropertySetting = PropertySetting;
    class PlayBack {
        static startIndex = NaN;
        static setStartIndex(shape) {
            if (plane_ts.playBackOperations != undefined) {
                const index = plane_ts.playBackOperations.shapeToIndex.get(shape);
                if (index != undefined) {
                    PlayBack.startIndex = index;
                    plane_ts.msg(`play start:${PlayBack.startIndex}`);
                }
            }
        }
        view;
        operations;
        index;
        shapeToIndex = new Map();
        viewShapesLength;
        constructor(view, operations) {
            this.view = view;
            this.operations = operations.slice();
            this.index = 0;
            this.viewShapesLength = view.shapes.length;
        }
        done() {
            return this.operations.length == this.index;
        }
        next() {
            if (this.index == PlayBack.startIndex && plane_ts.getPlayMode() == plane_ts.PlayMode.fastForward) {
                PlayBack.startIndex = NaN;
                plane_ts.setPlayMode(plane_ts.PlayMode.normal);
            }
            const shapes = this.view.shapes.slice(this.viewShapesLength);
            for (const shape of shapes) {
                this.shapeToIndex.set(shape, this.index);
            }
            this.viewShapesLength = this.view.shapes.length;
            return this.operations[this.index++];
        }
        peek() {
            return this.operations[this.index];
        }
        async play() {
            plane_ts.View.isPlayBack = true;
            const view = plane_ts.View.current;
            let start_shape_idx = view.shapes.length;
            const speech = new i18n_ts.Speech();
            let new_shapes = view.shapes.slice();
            const named_all_shape_map = new Map();
            while (!this.done()) {
                if (plane_ts.getPlayMode() == plane_ts.PlayMode.stop) {
                    // view.operations = operations_copy;
                    break;
                }
                while (this.peek() instanceof EnumSelection) {
                    plane_ts.msg(`wait for show menu`);
                    await plane_ts.sleep(100);
                }
                const operation = this.next();
                view.addOperation(operation);
                if (operation instanceof ClickShape) {
                    await plane_ts.movePointer(operation.position);
                    let shape;
                    if (!isNaN(operation.shapeId)) {
                        shape = plane_ts.idMap.get(operation.shapeId);
                        if (shape instanceof plane_ts.TextBlock) {
                            shape = undefined;
                        }
                        else if (shape instanceof plane_ts.Shape) {
                        }
                        else {
                            plane_ts.msg(`no shape: ${operation.shapeId}`);
                            const ids = Array.from(plane_ts.idMap.keys()).sort();
                            for (const id of ids) {
                                plane_ts.msg(`  ${id} ${plane_ts.idMap.get(id).constructor.name}`);
                            }
                            throw new plane_ts.MyError();
                        }
                    }
                    await plane_ts.Builder.tool.click(view, operation.position, shape);
                }
                else if (operation instanceof ClickTerm) {
                    if (plane_ts.Builder.tool instanceof plane_ts.ExprTransformBuilder) {
                        const [textBlock, term] = operation.getTextBlockTerm();
                        await plane_ts.Builder.tool.termClick(term, textBlock);
                    }
                    else {
                        throw new plane_ts.MyError();
                    }
                }
                else if (operation instanceof ToolSelection) {
                    await plane_ts.moveToolSelectionPointer(operation);
                    await plane_ts.Builder.setToolByName(operation.toolName, false);
                }
                else if (operation instanceof ToolFinish) {
                    plane_ts.assert(plane_ts.Builder.toolName == operation.toolName);
                    await plane_ts.Builder.tool.finish(view);
                }
                else if (operation instanceof PropertySetting) {
                    const shape = view.allShapes().find(x => x.id == operation.id);
                    plane_ts.assert(shape != undefined);
                    if (["name", "lineKind", "angleMark"].includes(operation.name)) {
                        await plane_ts.showPropertyDlg(shape, operation);
                    }
                    else {
                        plane_ts.setProperty(shape, operation.name, operation.value);
                    }
                }
                else {
                    throw new plane_ts.MyError();
                }
                if (plane_ts.Builder.tool.done) {
                    plane_ts.Builder.tool.done = false;
                    const shapes = view.shapes.slice(start_shape_idx);
                    for (const shape of shapes) {
                        let sub_shapes = [];
                        shape.getAllShapes(sub_shapes);
                        sub_shapes = plane_ts.unique(sub_shapes);
                        sub_shapes.forEach(x => x.show());
                        new_shapes = plane_ts.unique(new_shapes.concat(sub_shapes));
                        const named_sub_shapes = sub_shapes.filter(x => x instanceof plane_ts.Shape && x.name != "");
                        named_sub_shapes.forEach(x => named_all_shape_map.set(x.name, x));
                        // shape.allShapes().forEach(x => x.show());
                        shape.setRelations();
                        if (shape.mute) {
                            continue;
                        }
                        await plane_ts.playShape(speech, new_shapes, named_all_shape_map, shape);
                    }
                    start_shape_idx = view.shapes.length;
                    await speech.waitEnd();
                }
                view.dirty = true;
            }
            new_shapes.forEach(x => { x.show(); x.setMode(plane_ts.Mode.none); });
            plane_ts.View.isPlayBack = false;
            plane_ts.setPlayMode(plane_ts.PlayMode.stop);
            PlayBack.startIndex = NaN;
        }
    }
    plane_ts.PlayBack = PlayBack;
    async function typeIntoInput(element, text, delay = 100) {
        for (let i = 0; i < text.length; i++) {
            element.value += text[i];
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    plane_ts.typeIntoInput = typeIntoInput;
    async function movePointerAndHighlight(item) {
        const borderColor = item.style.borderColor;
        await plane_ts.movePointerToElement(item);
        item.style.borderColor = "DeepSkyBlue";
        await plane_ts.sleepInFastForward(100);
        item.style.borderColor = borderColor;
    }
    plane_ts.movePointerAndHighlight = movePointerAndHighlight;
    async function speakAndHighlight(shape, speech, lines) {
        await speech.speak(lines.shift().trim());
        for (const dep of shape.dependencies()) {
            dep.setMode(plane_ts.Mode.depend);
            await plane_ts.sleep(0.5 * 1000 * shape.interval);
        }
        shape.setMode(plane_ts.Mode.target);
        while (lines.length != 0) {
            const line = lines.shift().trim();
            if (line != "") {
                await speech.waitEnd();
                await speech.speak(line);
            }
        }
        await plane_ts.sleep(1000 * shape.interval);
    }
    plane_ts.speakAndHighlight = speakAndHighlight;
    async function playBack(play_mode) {
        const view = plane_ts.View.current;
        const operations_copy = view.operations.slice();
        view.restoreView();
        view.clearView();
        if (!isNaN(PlayBack.startIndex)) {
            play_mode = plane_ts.PlayMode.fastForward;
        }
        plane_ts.setPlayMode(play_mode);
        plane_ts.playBackOperations = new PlayBack(view, operations_copy);
        plane_ts.assert(view.shapes.length == 0);
        await plane_ts.playBackOperations.play();
        view.restoreView();
        view.dirty = true;
        view.updateShapes();
    }
    plane_ts.playBack = playBack;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    class TextBlockEvent {
        startTerm;
        term;
        textBlock;
        downTime = NaN;
        setTextBlockEvent(textBlock) {
            textBlock.div.addEventListener("pointerdown", (ev) => {
                if (this.textBlock != textBlock) {
                    this.textBlock = textBlock;
                }
                if (textBlock.getEquation() == undefined) {
                    plane_ts.msg(`pointer-down:no app`);
                    return;
                }
                this.term = getTermFromPointerEvent(ev, textBlock.getEquation());
                if (this.term == undefined) {
                    plane_ts.msg(`pointer-down: no term`);
                }
                else {
                    this.downTime = Date.now();
                    plane_ts.msg(`pointer-down:${this.term.str()}`);
                }
            });
            textBlock.div.addEventListener("pointerup", (ev) => {
                if (this.term != undefined && this.textBlock == textBlock) {
                    const elapsed_time = Date.now() - this.downTime;
                    plane_ts.msg(`pointer-up:${elapsed_time} ${this.term.str()}`);
                    if (this.startTerm == this.term) {
                        this.startTerm = undefined;
                    }
                    this.term.colorName = (elapsed_time < 500 ? "blue" : "red");
                    const root = this.term.getRoot();
                    if (elapsed_time < 500) {
                        if (this.startTerm != undefined) {
                            const parent = this.startTerm.parent;
                            if (parent != null && this.term.parent == parent && (parent.isAdd() || parent.isMul())) {
                                let idx1 = this.startTerm.argIdx();
                                let idx2 = this.term.argIdx();
                                if (idx2 < idx1) {
                                    [idx1, idx2] = [idx2, idx1];
                                }
                                const args = parent.args.slice(idx1, idx2 + 1);
                                const app = new plane_ts.App(plane_ts.operator(parent.fncName), args);
                                app.colorName = "red";
                                parent.args.splice(idx1, (idx2 + 1 - idx1));
                                parent.insArg(app, idx1);
                                this.term = app;
                            }
                        }
                    }
                    else {
                        this.startTerm = this.term;
                        this.term = undefined;
                    }
                    plane_ts.renderKatexSub(this.textBlock.div, root.tex());
                }
            });
            textBlock.div.addEventListener("contextmenu", (ev) => {
                plane_ts.msg("text-Block-context-menu");
                ev.stopPropagation();
                ev.preventDefault();
            });
        }
        async keyDown(ev) {
            if (this.term == undefined || this.textBlock == undefined) {
                return;
            }
            const div = this.textBlock.div;
            if (ev.key === "Escape") {
                const root = this.term.getRoot();
                root.allTerms().forEach(x => x.colorName = undefined);
                plane_ts.renderKatexSub(div, root.tex());
                this.startTerm = undefined;
                this.term = undefined;
                this.textBlock = undefined;
                return;
            }
            const parent = this.term.parent;
            if (parent != null && (parent.isAdd() || parent.isMul())) {
                plane_ts.msg(`key-down:${ev.key}`);
                let diff;
                if (ev.key == "ArrowRight") {
                    diff = 1;
                }
                else if (ev.key == "ArrowLeft") {
                    diff = -1;
                }
                else {
                    return;
                }
                const new_idx = this.term.argIdx() + diff;
                const root = this.term.getRoot();
                if (new_idx == -1) {
                    if (parent.isAdd() && parent.parent != null && parent.parent.isEq() && 0 < parent.argIdx()) {
                        await algebra_ts.transpose(root, this.term, div, new plane_ts.Speech(), true, false);
                        plane_ts.renderKatexSub(div, root.tex());
                    }
                }
                else if (new_idx < parent.args.length) {
                    this.term.argShift(diff);
                    plane_ts.renderKatexSub(div, root.tex());
                }
                else if (new_idx == parent.args.length) {
                    if (parent.isAdd() && parent.parent != null && parent.parent.isEq() && parent.argIdx() == 0) {
                        await algebra_ts.transpose(root, this.term, div, new plane_ts.Speech(), false, false);
                        plane_ts.renderKatexSub(div, root.tex());
                    }
                }
                else {
                    plane_ts.msg("can not move.");
                }
            }
        }
    }
    plane_ts.TextBlockEvent = TextBlockEvent;
    plane_ts.textBlockEvent = new TextBlockEvent();
    async function initPlane(plane, root) {
        plane_ts.initPlay();
        plane_ts.makeCssClass();
        plane.tool_block.onChange = async (ui) => {
            const button = ui;
            const tool_name = button.button.value;
            await plane_ts.Builder.setToolByName(tool_name, true);
        };
        const canvas = plane_ts.makeCanvas(plane.canvas_block.div);
        const view = new plane_ts.View(canvas);
        viewEvent(view);
        await plane_ts.Builder.setToolByName(plane_ts.SelectionTool.name, false);
        await plane_ts.makeSelectionDlg();
    }
    plane_ts.initPlane = initPlane;
    function viewEvent(view) {
        view.board.addEventListener("pointerdown", view.pointerdown.bind(view));
        view.board.addEventListener('pointermove', view.pointermove.bind(view));
        view.board.addEventListener("pointerup", view.pointerup.bind(view));
        view.board.addEventListener("click", async (ev) => {
            await view.click(ev);
        });
        view.board.addEventListener("dblclick", async (ev) => {
            await view.dblclick(ev);
        });
        view.board.addEventListener("contextmenu", async (ev) => {
            plane_ts.msg("contextmenu");
            ev.stopPropagation();
            ev.preventDefault();
            const position = view.eventPosition(ev);
            const shape = view.getShape(position);
            if (shape != undefined) {
                await plane_ts.showPropertyDlg(shape, undefined);
            }
        });
        document.addEventListener('keydown', async (ev) => {
            if (plane_ts.View.isPlayBack) {
                return;
            }
            await plane_ts.textBlockEvent.keyDown(ev);
            if (ev.key === "Escape") {
                plane_ts.msg("Escape key pressed!");
                const closed = layout_ts.closeDlg();
                if (closed) {
                    return;
                }
                await plane_ts.Builder.builderResetTool(view);
            }
            else if (ev.key == "Enter") {
                if (plane_ts.Builder.tool instanceof plane_ts.ShapeEquationBuilder || plane_ts.Builder.tool instanceof plane_ts.ExprTransformBuilder) {
                    view.addOperation(new plane_ts.ToolFinish(plane_ts.Builder.toolName));
                    await plane_ts.Builder.tool.finish(view);
                }
            }
        });
        window.addEventListener("resize", view.resizeView.bind(view));
        // Passive event listeners
        // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md
        view.board.addEventListener("wheel", view.wheel.bind(view), { "passive": false });
        dropEvent(view);
        window.requestAnimationFrame(view.drawShapes.bind(view));
    }
    plane_ts.viewEvent = viewEvent;
    function getTermFromPointerEvent(ev, app) {
        const terms = app.allTerms();
        let ele = ev.target;
        for (; ele != null; ele = ele.parentElement) {
            if (ele.id.startsWith("tex-term-")) {
                const id_offset = "tex-term-".length;
                const id = parseInt(ele.id.substring(id_offset));
                const term = terms.find(x => x.id == id);
                if (term == undefined) {
                    plane_ts.msg(`get-Term-From-Pointer-Event:no term id:[${id}]`);
                    return undefined;
                }
                return term;
            }
        }
        throw new plane_ts.MyError();
    }
    function dropEvent(view) {
        view.board.addEventListener('dragover', plane_ts.handleDragOver, false);
        view.board.addEventListener('drop', plane_ts.handleFileSelect, false);
    }
    function setCaptionEvent(caption) {
        caption.div.addEventListener("pointerdown", caption.captionPointerdown.bind(caption));
        caption.div.addEventListener("pointermove", caption.captionPointermove.bind(caption));
        caption.div.addEventListener("pointerup", caption.captionPointerup.bind(caption));
        caption.div.addEventListener("click", (ev) => {
            plane_ts.showProperty(caption, 0);
        });
        caption.div.addEventListener("dblclick", (ev) => {
            caption.div.contentEditable = "true";
            caption.div.style.cursor = "text";
            caption.div.focus();
        });
        caption.div.addEventListener("blur", (ev) => {
            caption.div.contentEditable = "false";
            caption.div.style.cursor = "move";
            caption.text = caption.div.innerText;
            const text_area = document.getElementById("text-block-text-area");
            if (text_area != null) {
                text_area.value = caption.text;
            }
        });
    }
    plane_ts.setCaptionEvent = setCaptionEvent;
    function deleteShapeEvent(shape, button) {
        button.addEventListener("click", (ev) => {
            const ok = confirm("Are you sure to delete this shape?");
            if (ok) {
                const idx = plane_ts.View.current.shapes.indexOf(shape);
                if (idx == -1) {
                    throw new plane_ts.MyError();
                }
                const button = plane_ts.Plane.one.shapes_block.children[idx];
                plane_ts.Plane.one.shapes_block.removeChild(button);
                plane_ts.remove(plane_ts.View.current.shapes, shape);
                shape.delete(new Set());
                plane_ts.View.current.dirty = true;
            }
        });
    }
    plane_ts.deleteShapeEvent = deleteShapeEvent;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    const $flex = layout_ts.$flex;
    const $grid = layout_ts.$grid;
    const $block = layout_ts.$block;
    const $button = layout_ts.$button;
    const $popup = layout_ts.$popup;
    const $textarea = layout_ts.$textarea;
    const $label = layout_ts.$label;
    const $input_number = layout_ts.$input_number;
    const $checkbox = layout_ts.$checkbox;
    class Plane {
        menu_block;
        tool_block;
        text_block;
        canvas_block;
        property_block;
        shapes_block;
        narration_box;
        editMode;
        show_axis;
        show_grid;
        snap_to_grid;
        static one;
        constructor() {
            Plane.one = this;
            let params;
            [plane_ts.urlOrigin, , params] = i18n_ts.parseURL();
            this.editMode = (params.get("mode") == "edit");
            const tool_buttons = plane_ts.makeToolButtons();
            Plane.one.show_axis = $checkbox({
                text: "Axis",
                change: async (ev) => {
                    plane_ts.View.current.dirty = true;
                }
            });
            Plane.one.show_grid = $checkbox({
                text: "Grid",
                change: async (ev) => {
                    plane_ts.View.current.dirty = true;
                }
            });
            Plane.one.snap_to_grid = $checkbox({
                text: "Snap to Grid",
            });
            const save_anchor = layout_ts.$anchor({});
            this.menu_block = $flex({
                children: [
                    Plane.one.show_axis,
                    Plane.one.show_grid,
                    Plane.one.snap_to_grid,
                    $button({
                        width: "24px",
                        height: "24px",
                        url: `${plane_ts.urlOrigin}/lib/plane/img/undo.png`,
                        click: async (ev) => {
                            await plane_ts.View.current.undo();
                        }
                    }),
                    $button({
                        width: "24px",
                        height: "24px",
                        url: `${plane_ts.urlOrigin}/lib/plane/img/redo.png`,
                        click: async (ev) => {
                            await plane_ts.View.current.redo();
                        }
                    }),
                    $button({
                        text: "Save",
                        click: async (ev) => {
                            plane_ts.saveJson(save_anchor);
                        }
                    }),
                    save_anchor
                ],
            });
            this.tool_block = $grid({
                id: "tool-block",
                columns: "36px 36px",
                children: tool_buttons,
            });
            this.text_block = $flex({
                id: "text-block",
                children: [],
            });
            this.canvas_block = $block({
                children: [],
                color: plane_ts.fgColor,
                // backgroundColor : "cornsilk"
            });
            this.property_block = $grid({
                id: "property-div",
                columns: "50% 50%",
                children: [],
            });
            this.shapes_block = $flex({
                id: "shapes-block",
                direction: "column",
                children: [],
            });
            this.narration_box = layout_ts.$textbox({
                id: "narration-box",
                text: "",
                color: plane_ts.fgColor,
                padding: 20,
                textAlign: "center",
                fontSize: "48px",
            });
            i18n_ts.onSpeak = (text) => {
                this.narration_box.setText(text);
            };
        }
        clearPlane() {
            // for(const class_name of ["tex_div"]){
            //     const tex_divs = Array.from(this.canvas_block.div.getElementsByClassName(class_name)) as HTMLDivElement[];
            //     tex_divs.forEach(x => x.remove());
            // }
            this.text_block.div.innerHTML = "";
            this.narration_box.div.innerHTML = "";
        }
    }
    plane_ts.Plane = Plane;
    function makeCanvas(div) {
        const canvas = document.createElement("canvas");
        canvas.id = "main-canvas";
        canvas.style.width = "100%";
        canvas.style.height = "100%";
        div.append(canvas);
        return canvas;
    }
    plane_ts.makeCanvas = makeCanvas;
    function makeCssClass() {
        const styles = [
            `.tex_div {
    position: absolute;
    display: inline-block;
    background-color: transparent;
    cursor: move;
    user-select: none;
}`,
            `.selectable_tex {
    position: absolute;
    display: inline-block;
    background-color: transparent;
    cursor: pointer;
    user-select: none;
}`
        ];
        for (const style of styles) {
            const tex_style = document.createElement('style');
            tex_style.innerHTML = style;
            document.getElementsByTagName('head')[0].appendChild(tex_style);
        }
    }
    plane_ts.makeCssClass = makeCssClass;
    function fromXPixScale(pix) {
        return plane_ts.View.current.fromXPixScale(pix);
    }
    plane_ts.fromXPixScale = fromXPixScale;
    function fromYPixScale(pix) {
        return plane_ts.View.current.fromYPixScale(pix);
    }
    plane_ts.fromYPixScale = fromYPixScale;
    function toXPix(n) {
        return plane_ts.View.current.toXPix(n);
    }
    plane_ts.toXPix = toXPix;
    function toYPix(n) {
        return plane_ts.View.current.toYPix(n);
    }
    plane_ts.toYPix = toYPix;
    function toXPixScale(n) {
        return plane_ts.View.current.toXPixScale(n);
    }
    plane_ts.toXPixScale = toXPixScale;
    function toYPixScale(n) {
        return plane_ts.View.current.toYPixScale(n);
    }
    plane_ts.toYPixScale = toYPixScale;
    function drawLine(shape, p1, p2) {
        plane_ts.View.current.canvas.drawLine(shape, p1, p2);
    }
    plane_ts.drawLine = drawLine;
    function makeGrid(plane) {
        const root = $grid({
            rows: "25px 100% 25px 80px",
            children: [
                $grid({
                    children: [
                        plane.menu_block
                    ]
                }),
                $grid({
                    columns: "50px 50% 50% 300px",
                    children: [
                        plane.tool_block,
                        plane.text_block,
                        plane.canvas_block,
                        plane.property_block
                    ]
                }),
                plane.shapes_block,
                plane.narration_box
            ]
        });
        return root;
    }
    plane_ts.makeGrid = makeGrid;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    class Vec2 {
        static nan() {
            return new Vec2(NaN, NaN);
        }
        static zero() {
            return new Vec2(0, 0);
        }
        typeName = "Vec2";
        x;
        y;
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
        getProperties() {
            return ["x", "y"];
        }
        toString() {
            return `(${this.x.toFixed(1)}, ${this.y.toFixed(1)})`;
        }
        /*+++
            app() : App {
                return new App(operator("vec"), [new ConstNum(this.x), new ConstNum(this.y)]);
            }
        */
        copy() {
            return new Vec2(this.x, this.y);
        }
        equals(pt) {
            return this.x == pt.x && this.y == pt.y;
        }
        add(pt) {
            return new Vec2(this.x + pt.x, this.y + pt.y);
        }
        sub(pt) {
            return new Vec2(this.x - pt.x, this.y - pt.y);
        }
        mul(cx, cy = undefined) {
            if (cy == undefined) {
                cy = cx;
            }
            return new Vec2(cx * this.x, cy * this.y);
        }
        len2() {
            return this.x * this.x + this.y * this.y;
        }
        len() {
            return Math.hypot(this.x, this.y);
        }
        distance(pt) {
            return Math.hypot(pt.x - this.x, pt.y - this.y);
        }
        dot(pt) {
            return this.x * pt.x + this.y * pt.y;
        }
        unit() {
            const d = this.len();
            if (d == 0) {
                return new Vec2(0, 0);
            }
            return new Vec2(this.x / d, this.y / d);
        }
        divide(t, pt) {
            const x = (1 - t) * this.x + t * pt.x;
            const y = (1 - t) * this.y + t * pt.y;
            return new Vec2(x, y);
        }
        cross(a) {
            return this.x * a.y - this.y * a.x;
        }
        project(a) {
            return this.mul(this.dot(a));
        }
        rot(th) {
            const cs = Math.cos(th);
            const sn = Math.sin(th);
            return new Vec2(this.x * cs - this.y * sn, this.x * sn + this.y * cs);
        }
        rot90() {
            return new Vec2(-this.y, this.x);
        }
        rot45() {
            const cs = Math.cos(Math.PI / 4);
            return new Vec2(cs * (this.x - this.y), cs * (this.x + this.y));
        }
        static interpolate(p1, p2, rate) {
            plane_ts.assert(0 <= rate && rate <= 1);
            const x = (1 - rate) * p1.x + rate * p2.x;
            const y = (1 - rate) * p1.y + rate * p2.y;
            return new Vec2(x, y);
        }
    }
    plane_ts.Vec2 = Vec2;
})(plane_ts || (plane_ts = {}));
///<reference path="vector.ts" />
var plane_ts;
(function (plane_ts) {
    //
    let pointerMove;
    let pointer;
    let pointerPix = plane_ts.Vec2.zero();
    function initPlay() {
        pointerMove = document.getElementById("pointer_move_img");
        pointer = document.getElementById("pointer_img");
    }
    plane_ts.initPlay = initPlay;
    async function movePointerPix(pix) {
        if (plane_ts.getPlayMode() != plane_ts.PlayMode.fastForward) {
            pointerMove.style.visibility = "visible";
            const step = 20;
            for (const i of plane_ts.range(step)) {
                const x = plane_ts.linear(0, i, step - 1, pointerPix.x, pix.x);
                const y = plane_ts.linear(0, i, step - 1, pointerPix.y, pix.y);
                pointerMove.style.left = `${x}px`;
                pointerMove.style.top = `${y}px`;
                await plane_ts.sleep(10);
            }
            pointerMove.style.visibility = "hidden";
        }
        pointer.style.left = `${pix.x}px`;
        pointer.style.top = `${pix.y}px`;
        pointer.style.visibility = "visible";
        await plane_ts.sleep(500);
        pointer.style.visibility = "hidden";
        pointerPix = pix;
    }
    plane_ts.movePointerPix = movePointerPix;
    async function movePointer(pos) {
        const pix = plane_ts.View.current.toPixPosition(pos);
        const rect = plane_ts.View.current.board.getBoundingClientRect();
        const new_pix = new plane_ts.Vec2(rect.x + pix.x, rect.y + pix.y);
        await movePointerPix(new_pix);
    }
    plane_ts.movePointer = movePointer;
    async function movePointerToElement(ele) {
        const rect = ele.getBoundingClientRect();
        const x = rect.x + 0.5 * rect.width;
        const y = rect.y + 0.5 * rect.height;
        await movePointerPix(new plane_ts.Vec2(x, y));
    }
    plane_ts.movePointerToElement = movePointerToElement;
    async function moveToolSelectionPointer(operation) {
        const id = `${operation.toolName}-radio`;
        const radio = document.getElementById(id);
        plane_ts.assert(radio != null);
        await movePointerToElement(radio);
    }
    plane_ts.moveToolSelectionPointer = moveToolSelectionPointer;
    function removeDiv() {
        for (const class_name of ["tex_div", "selectable_tex"]) {
            const tex_divs = Array.from(document.body.getElementsByClassName(class_name));
            tex_divs.forEach(x => x.remove());
        }
    }
    plane_ts.removeDiv = removeDiv;
    async function playShape(speech, all_shapes, named_all_shape_map, shape) {
        plane_ts.showProperty(shape, 0);
        let highlighted = new Set();
        if (shape instanceof plane_ts.ExprTransform) {
            await shape.speakExprTransform(speech);
        }
        else if (shape instanceof plane_ts.ShapeEquation) {
        }
        else if (shape instanceof plane_ts.Statement) {
            await shape.showReasonAndStatement(speech);
        }
        else if (shape instanceof plane_ts.Motion) {
            await shape.animate(speech);
        }
        else {
            const root_reading = shape.reading();
            if (root_reading.text == "") {
            }
            else if (root_reading.args.length == 0) {
                await plane_ts.speakAndHighlight(shape, speech, [root_reading.text]);
            }
            else {
                const text = root_reading.prepareReading();
                const readings = root_reading.getAllReadings();
                plane_ts.msg(`reading:${shape.constructor.name} ${text}`);
                plane_ts.msg("    " + readings.map(x => `[${x.start}->${x.end}:${x.text}]`).join(" "));
                speech.callback = (idx) => {
                    for (const reading of readings) {
                        if (reading.start <= idx) {
                            if (!highlighted.has(reading)) {
                                plane_ts.msg(`hilight: start:${reading.start} ${reading.text}`);
                                reading.readable.highlight(true);
                                highlighted.add(reading);
                            }
                        }
                    }
                };
                if (text != "") {
                    await speech.speak(plane_ts.TT(text));
                }
            }
        }
        await speech.waitEnd();
        Array.from(highlighted.values()).forEach(x => x.readable.highlight(false));
        speech.callback = undefined;
        if (shape instanceof plane_ts.ShapeEquation || shape instanceof plane_ts.ExprTransform) {
            const [node, text] = parser_ts.makeNodeTextByApp(shape.equation);
            const div_child = shape.textBlock.div.children[0];
            /*
                const id = setInterval(()=>{
                    speech.prevCharIndex++;
                    if(text.length < speech.prevCharIndex){
                        clearInterval(id);
                    }
                }, 100);
            */
            if (i18n_ts.isEdge) {
                await parser_ts.showFlow(speech, shape.equation, shape.textBlock.div, named_all_shape_map);
            }
            else {
                div_child.style.backgroundColor = "blue";
                await speech.speak(text);
            }
            await speech.waitEnd();
            div_child.style.backgroundColor = "";
        }
        else if (shape instanceof plane_ts.TextBlock && shape.isTex) {
            const term = parser_ts.parseMath(shape.text);
            await parser_ts.showFlow(speech, term, shape.div, named_all_shape_map);
        }
        else if (shape instanceof plane_ts.Statement && shape.mathText != "") {
            const term = parser_ts.parseMath(shape.mathText);
            if (shape.latexBox == undefined) {
                shape.latexBox = shape.makeTexUI();
            }
            await parser_ts.showFlow(speech, term, shape.latexBox.div, named_all_shape_map);
        }
        all_shapes.forEach(x => { x.setMode(plane_ts.Mode.none); });
    }
    plane_ts.playShape = playShape;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    const $flex = layout_ts.$flex;
    const $grid = layout_ts.$grid;
    const $block = layout_ts.$block;
    const $button = layout_ts.$button;
    const $popup = layout_ts.$popup;
    const $textarea = layout_ts.$textarea;
    const $label = layout_ts.$label;
    const $input_number = layout_ts.$input_number;
    const $checkbox = layout_ts.$checkbox;
    const $input_text = layout_ts.$input_text;
    const $input_color = layout_ts.$input_color;
    const lineKindImgNames = ["line", "half_line_1", "half_line_2", "line_segment"];
    const propertySettingText = new Map([
        ["angleMark", plane_ts.TT("Set the angle mark.")],
        ["lineKind", plane_ts.TT("Set the line kind.")],
        ["name", plane_ts.TT("Set the name.")],
    ]);
    let used_property_names;
    function appendRow(grid, nest, name, value) {
        const label = $label({
            text: name,
            paddingLeft: `${nest * 10}px`,
        });
        grid.addChild(label);
        grid.addChild(value);
    }
    class Property {
        widgets;
        name;
        constructor(widgets, name) {
            this.widgets = widgets;
            this.name = name;
        }
        setValue(newValue) {
            plane_ts.msg(`set value:${this.name} ${newValue}`);
            for (const widget of this.widgets) {
                const obj = widget;
                const oldValue = obj[this.name];
                plane_ts.setProperty(widget, this.name, newValue);
                if (plane_ts.Builder.tool instanceof plane_ts.MotionBuilder && !(widget instanceof plane_ts.Motion)) {
                    plane_ts.Builder.tool.animation.addPropertyChange(widget, this.name, oldValue, newValue);
                }
            }
            plane_ts.View.current.dirty = true;
        }
    }
    plane_ts.Property = Property;
    class TextAreaProperty extends Property {
        textArea;
        constructor(widgets, name, value) {
            super(widgets, name);
            this.textArea = $textarea({
                id: "text-block-text-area",
                cols: 20,
                rows: name == "mathText" ? 6 : 10,
                value: value,
                change: async (ev) => {
                    this.setValue(this.textArea.getValue());
                    for (const widget of this.widgets) {
                        if (widget instanceof plane_ts.TextBlock && !widget.isTex) {
                            widget.div.innerText = this.textArea.getValue();
                        }
                    }
                }
            });
        }
        ui() {
            return this.textArea;
        }
    }
    plane_ts.TextAreaProperty = TextAreaProperty;
    class InputProperty extends Property {
        constructor(widgets, name, input_type) {
            super(widgets, name);
        }
        valueChanged(widget_id, name, new_value) {
            this.setValue(new_value);
            const operation = plane_ts.View.current.operations.find(x => x instanceof plane_ts.PropertySetting && x.id == widget_id && x.name == name);
            if (operation != undefined) {
                operation.value = new_value;
            }
            else {
                plane_ts.View.current.addOperation(new plane_ts.PropertySetting(widget_id, name, new_value));
            }
        }
    }
    plane_ts.InputProperty = InputProperty;
    class StringProperty extends InputProperty {
        input;
        value = "";
        constructor(widgets, name, value) {
            super(widgets, name, "text");
            this.value = value;
            this.input = $input_text({
                text: value,
                change: async (ev) => {
                    const new_value = this.input.input.value;
                    plane_ts.msg(`change:${this.value}=>${new_value}`);
                    this.valueChanged(widgets[0].id, name, new_value);
                }
            });
        }
        getInput() {
            return this.input.input;
        }
        ui() {
            return this.input;
        }
    }
    class NumberProperty extends InputProperty {
        input;
        constructor(widgets, name, value, step, min, max) {
            super(widgets, name, "number");
            this.input = $input_number({
                step: step,
                value: value,
                min: min,
                max: max,
                change: async (ev) => {
                    const new_value = this.input.getValue();
                    this.valueChanged(widgets[0].id, name, new_value);
                }
            });
        }
        getInput() {
            return this.input.input;
        }
        ui() {
            return this.input;
        }
    }
    class SelectProperty extends Property {
        select;
        constructor(widgets, name, value, option_texts) {
            super(widgets, name);
            this.select = document.createElement("select");
            this.select.style.color = plane_ts.fgColor;
            this.select.style.backgroundColor = plane_ts.bgColor;
            for (const text of option_texts) {
                const option = document.createElement("option");
                option.innerText = text;
                option.style.color = plane_ts.fgColor;
                option.style.backgroundColor = plane_ts.bgColor;
                this.select.append(option);
            }
            plane_ts.assert(0 <= value && value < option_texts.length);
            this.select.selectedIndex = value;
            this.select.addEventListener("change", (ev) => {
                const idx = this.select.selectedIndex;
                this.setValue(idx);
                plane_ts.msg(`select ${idx} ${option_texts[idx]}`);
            });
        }
        ui() {
            throw new plane_ts.MyError();
        }
    }
    class BooleanProperty extends InputProperty {
        input;
        constructor(widgets, name, value) {
            super(widgets, name, "checkbox");
            this.input = $checkbox({
                text: name,
                change: async (ev) => {
                    this.BooleanValueChanged();
                }
            });
            this.input.input.checked = value;
        }
        getInput() {
            return this.input.input;
        }
        BooleanValueChanged() {
            this.setValue(this.input.input.checked);
        }
        ui() {
            return this.input;
        }
    }
    class ColorProperty extends InputProperty {
        input;
        constructor(widgets, name, value) {
            super(widgets, name, "color");
            this.input = $input_color({
                text: value
            });
        }
        getInput() {
            return this.input.input;
        }
        ui() {
            return this.input;
        }
    }
    class ImgSelectionProperty extends Property {
        selectionList;
        constructor(widgets, name, value, img_names) {
            super(widgets, name);
            const img_urls = img_names.map(x => `${plane_ts.urlOrigin}/lib/plane/img/${x}.png`);
            const buttons = [];
            for (const [idx, url] of img_urls.entries()) {
                const radio = layout_ts.$radio({
                    value: `${idx}`,
                    url,
                    width: "36px",
                    height: "36px",
                });
                radio.html().dataset.operation_value = `${idx}`;
                radio.html().dataset.property_name = name;
                buttons.push(radio);
            }
            this.selectionList = layout_ts.$selection({
                children: buttons,
                selectedIndex: value,
                selectionChanged: (index) => {
                    this.setValue(index);
                }
            });
        }
        ui() {
            return this.selectionList;
        }
    }
    plane_ts.ImgSelectionProperty = ImgSelectionProperty;
    class ShapesProperty extends Property {
        static one;
        buttonsUI;
        constructor(widgets, name, value) {
            super(widgets, name);
            if (name == "selectedShapes") {
                ShapesProperty.one = this;
            }
            const buttons = value.map(x => plane_ts.makeShapeButton(x, false));
            for (const button of buttons) {
                button.button.style.position = "";
            }
            if (buttons.length == 0) {
                this.buttonsUI = $label({ text: "" });
            }
            else {
                this.buttonsUI = $grid({
                    columns: buttons.map(x => "auto").join(" "),
                    children: buttons
                });
            }
        }
        ui() {
            return this.buttonsUI;
        }
    }
    plane_ts.ShapesProperty = ShapesProperty;
    function makeConstantProperty(grid, nest, name, text) {
        grid.addChild($label({ text: name }));
        grid.addChild($label({ text: text }));
    }
    function makeTexProperty(grid, nest, name, text) {
        grid.addChild($label({ text: name }));
        grid.addChild(layout_ts.$latex({ text: text }));
    }
    function appendTitle(grid, nest, title) {
        const label = $label({
            text: title,
            paddingLeft: `${nest * 10}px`,
        });
        const filler = $label({
            text: ""
        });
        grid.addChild(label);
        grid.addChild(filler);
    }
    function appendDelete(tbl, shape) {
        const all_dependencies = plane_ts.View.current.allShapes().map(x => x.dependencies()).flat();
        const row = document.createElement("tr");
        const cell = document.createElement("td");
        cell.colSpan = 2;
        const button = document.createElement("button");
        button.innerText = "delete";
        button.style.color = plane_ts.fgColor;
        button.style.backgroundColor = plane_ts.bgColor;
        if (all_dependencies.includes(shape)) {
            button.disabled = true;
        }
        else {
            plane_ts.deleteShapeEvent(shape, button);
        }
        cell.append(button);
        row.append(cell);
        tbl.append(row);
    }
    function showProperty(widget, nest) {
        if (nest == 0) {
            used_property_names = new Set();
        }
        let widgets;
        if (widget instanceof plane_ts.Widget) {
            widgets = [widget];
        }
        else {
            widgets = widget;
        }
        let properties = [];
        for (const [idx, w] of widgets.entries()) {
            const names = w.getProperties();
            if (idx == 0) {
                properties = names;
            }
            else {
                properties = properties.filter(x => names.includes(x));
            }
        }
        const grid = plane_ts.Plane.one.property_block;
        if (nest == 0) {
            grid.clear();
        }
        const constructor_names = plane_ts.unique(widgets.map(x => x.constructor.name));
        for (const constructor_name of constructor_names) {
            appendTitle(grid, nest, constructor_name);
        }
        for (const property_name of properties) {
            plane_ts.assert(typeof property_name == "string");
            if (used_property_names.has(property_name)) {
                continue;
            }
            if (i18n_ts.appMode == i18n_ts.AppMode.play) {
                if (!["name", "reason", "selectedShapes", "auxiliaryShapes"].includes(property_name)) {
                    continue;
                }
            }
            const name = property_name;
            const value = widgets[0][name];
            if (value == undefined) {
                continue;
            }
            let property;
            if (name == "mathText" || name == "text" && widget instanceof plane_ts.TextBlock) {
                property = new TextAreaProperty(widgets, name, value);
            }
            else if (name == "angleMark") {
                const angles = widgets.filter(x => x instanceof plane_ts.Angle);
                const img_names = plane_ts.range(plane_ts.Angle.numMarks).map(i => `angle_${i}`);
                property = new ImgSelectionProperty(angles, name, value, img_names);
            }
            else if (name == "reason") {
                const text = plane_ts.reasonMsg(value);
                makeConstantProperty(grid, nest + 1, name, text);
                continue;
            }
            else if (name == "equation") {
                plane_ts.assert(value instanceof plane_ts.App);
                makeTexProperty(grid, nest + 1, name, value.tex());
                continue;
            }
            else if (name == "terms") {
                plane_ts.assert(Array.isArray(value));
                const terms = value;
                plane_ts.assert(terms.every(x => x instanceof plane_ts.Term));
                const text = terms.map(x => x.tex()).join("\\quad , \\quad");
                makeTexProperty(grid, nest + 1, name, text);
                continue;
            }
            else if (name == "selectedShapes" || name == "auxiliaryShapes") {
                property = new ShapesProperty(widgets, name, value);
            }
            else if (name == "line") {
                property = new ShapesProperty(widgets, name, [value]);
            }
            else {
                switch (typeof value) {
                    case "string":
                        if (name == "color") {
                            property = new ColorProperty(widgets, name, value);
                        }
                        else {
                            property = new StringProperty(widgets, name, value);
                        }
                        break;
                    case "number":
                        if (name == "interval") {
                            property = new NumberProperty(widgets, name, value, 0.1, 0, 10000);
                        }
                        else if (name == "lineKind") {
                            property = new ImgSelectionProperty(widgets, name, value, lineKindImgNames);
                        }
                        else if (name == "lengthKind") {
                            property = new NumberProperty(widgets, name, value, 1, 0, 3);
                        }
                        else if (name == "id" || name == "order") {
                            makeConstantProperty(grid, nest + 1, name, `${value}`);
                            continue;
                        }
                        else {
                            property = new NumberProperty(widgets, name, value, 0.1, -100, 100);
                        }
                        break;
                    case "boolean":
                        property = new BooleanProperty(widgets, name, value);
                        break;
                    case "object":
                        if (value instanceof plane_ts.Widget) {
                            showProperty(value, nest + 1);
                        }
                        else if (value instanceof plane_ts.Vec2) {
                            const text = `x:${value.x.toFixed(1)} y:${value.y.toFixed(1)}`;
                            makeConstantProperty(grid, nest + 1, name, text);
                        }
                        else {
                            plane_ts.msg(`unknown property:${value.constructor.name}`);
                        }
                        continue;
                    default:
                        throw new plane_ts.MyError();
                }
            }
            try {
                const ui = property.ui();
                appendRow(grid, nest + 1, property.name, ui);
            }
            catch (e) {
                plane_ts.msg(`no property:${property.name}`);
            }
            used_property_names.add(property_name);
        }
        if (i18n_ts.appMode == i18n_ts.AppMode.play) {
            return;
        }
        if (nest == 0 && widget instanceof plane_ts.MathEntity) {
            //++++++++++        appendDelete(tbl, widget);
        }
        layout_ts.Layout.root.updateRootLayout();
    }
    plane_ts.showProperty = showProperty;
    async function showPropertyDlg(widget, operation) {
        const basic_names = ["name", "lineKind", "angleMark"];
        const names = widget.getProperties().filter(x => basic_names.includes(x));
        const grid = $grid({
            columns: "50% 50%",
            children: [],
        });
        const propertyMap = new Map();
        for (const name of names) {
            const value = widget[name];
            if (value == undefined) {
                continue;
            }
            let property;
            switch (name) {
                case "name":
                    property = new StringProperty([widget], name, value);
                    break;
                case "lineKind":
                    property = new ImgSelectionProperty([widget], name, value, lineKindImgNames);
                    break;
                case "angleMark":
                    {
                        const img_names = plane_ts.range(plane_ts.Angle.numMarks).map(i => `angle_${i}`);
                        property = new ImgSelectionProperty([widget], name, value, img_names);
                    }
                    break;
                default:
                    continue;
            }
            propertyMap.set(name, property);
            const ui = property.ui();
            appendRow(grid, 1, property.name, ui);
        }
        const dlg = layout_ts.$dialog({
            content: grid
        });
        dlg.showModal();
        if (plane_ts.View.isPlayBack) {
            if (operation instanceof plane_ts.PropertySetting) {
                // View.current.addOperation(operation);
                const text = propertySettingText.get(operation.name);
                plane_ts.assert(text != undefined);
                const speech = i18n_ts.AbstractSpeech.one;
                await speech.speak(text);
                // msg(`opr ${operation.id} ${operation.toString()}`);
                const property = propertyMap.get(operation.name);
                plane_ts.assert(property != undefined);
                let item;
                switch (operation.name) {
                    case "angleMark":
                    case "lineKind":
                        {
                            const value = operation.value;
                            const all_buttons = Array.from(dlg.html().getElementsByTagName("button"));
                            const buttons = all_buttons.filter(x => x.dataset.property_name == operation.name);
                            item = buttons.find(x => x.dataset.operation_value == `${operation.value}`);
                            plane_ts.assert(item != undefined);
                            await plane_ts.movePointerAndHighlight(item);
                            if (operation.name == "angleMark") {
                                widget.setAngleMark(value);
                            }
                            else {
                                widget.lineKind = value;
                            }
                        }
                        break;
                    case "name":
                        {
                            const input = property.input.html();
                            await plane_ts.movePointerToElement(input);
                            await plane_ts.typeIntoInput(input, operation.value);
                            widget.setName(operation.value);
                        }
                        break;
                    default:
                        throw new plane_ts.MyError();
                }
                await speech.waitEnd();
            }
            else {
                throw new plane_ts.MyError();
            }
        }
        else {
            await plane_ts.waitForClick(dlg.html());
            // View.current.addOperation(new EnumSelection(value));
        }
        dlg.close();
    }
    plane_ts.showPropertyDlg = showPropertyDlg;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function addEqualLengths(lengthSymbolA, lengthSymbolB) {
        let set = plane_ts.equalLengths.find(x => x.has(lengthSymbolA) || x.has(lengthSymbolB));
        if (set == undefined) {
            set = new plane_ts.MySet([lengthSymbolA, lengthSymbolB]);
            plane_ts.equalLengths.push(set);
        }
        else {
            set.add(lengthSymbolA);
            set.add(lengthSymbolB);
        }
    }
    plane_ts.addEqualLengths = addEqualLengths;
    function getCommonPoint(lengthSymbolA, lengthSymbolB) {
        const [AA, AB] = [lengthSymbolA.pointA, lengthSymbolA.pointB];
        const [BA, BB] = [lengthSymbolB.pointA, lengthSymbolB.pointB];
        if (AA == BA) {
            return [AA, AB, BB];
        }
        else if (AA == BB) {
            return [AA, AB, BA];
        }
        else if (AB == BA) {
            return [AB, AA, BB];
        }
        else if (AB == BB) {
            return [AB, AA, BA];
        }
        else {
            return undefined;
        }
    }
    function getParallelLinesByPointsPair(As, Bs) {
        const lineA = plane_ts.getCommonLineOfPoints(As[0], As[1]);
        const lineB = plane_ts.getCommonLineOfPoints(Bs[0], Bs[1]);
        if (lineA == undefined || lineB == undefined) {
            return undefined;
        }
        if (plane_ts.isParallel(lineA, lineB)) {
            return [lineA, lineB];
        }
        else {
            return undefined;
        }
    }
    plane_ts.getParallelLinesByPointsPair = getParallelLinesByPointsPair;
    function findParallelLinesOfLengthSymbols(lengthSymbolA, lengthSymbolB) {
        const As = [lengthSymbolA.pointA, lengthSymbolA.pointB];
        const Bs = [lengthSymbolB.pointA, lengthSymbolB.pointB];
        const line_pair1 = getParallelLinesByPointsPair(As, Bs);
        if (line_pair1 == undefined) {
            return undefined;
        }
        for (const idx of [0, 1]) {
            let Cs;
            let Ds;
            if (idx == 0) {
                Cs = [As[0], Bs[0]];
                Ds = [As[1], Bs[1]];
            }
            else {
                Cs = [As[0], Bs[1]];
                Ds = [As[1], Bs[0]];
            }
            const line_pair2 = getParallelLinesByPointsPair(Cs, Ds);
            if (line_pair2 != undefined) {
                return line_pair2;
            }
        }
        return undefined;
    }
    function findTrianglePairByLengthSymbols(lengthSymbolA, lengthSymbolB, triangles_list) {
        for (const triangles of triangles_list) {
            const trianglesA = plane_ts.getTrianglesByLengthSymbol(lengthSymbolA, triangles);
            if (trianglesA.length == 0) {
                continue;
            }
            const trianglesB = plane_ts.getTrianglesByLengthSymbol(lengthSymbolB, triangles);
            if (trianglesB.length == 0) {
                continue;
            }
            for (const triangleA of trianglesA) {
                const idxA = triangleA.lines.indexOf(lengthSymbolA.line);
                plane_ts.assert(idxA != -1);
                for (const triangleB of trianglesB) {
                    const idxB = triangleB.lines.indexOf(lengthSymbolB.line);
                    plane_ts.assert(idxB != -1);
                    if (idxA == idxB) {
                        return [triangleA, triangleB];
                    }
                    else {
                        plane_ts.msg(`make Angle Equality By Congruent Triangles : idx-A:${idxA} != idx-B:${idxB}`);
                    }
                }
            }
        }
    }
    function makeEqualLengthByCongruentTriangles(lengthSymbolA, lengthSymbolB) {
        const triangleAB = findTrianglePairByLengthSymbols(lengthSymbolA, lengthSymbolB, plane_ts.congruentTriangles);
        if (triangleAB != undefined) {
            const [triangleA, triangleB] = triangleAB;
            // msg(`equal length:congruent triangles`);
            return new LengthEquality({
                reason: plane_ts.LengthEqualityReason.congruent_triangles,
                auxiliaryShapes: [triangleA, triangleB],
                shapes: [lengthSymbolA, lengthSymbolB]
            });
        }
        else {
            plane_ts.msg(`can not find congruent triangles`);
            return undefined;
        }
    }
    plane_ts.makeEqualLengthByCongruentTriangles = makeEqualLengthByCongruentTriangles;
    function makeEqualLengthByRadiiEqual(lengthSymbolA, lengthSymbolB) {
        if (lengthSymbolA.circle != undefined && lengthSymbolB.circle != undefined && plane_ts.areEqualCircleArcs(lengthSymbolA.circle, lengthSymbolB.circle)) {
            // msg(`radii-equal`);
            return new LengthEquality({
                reason: plane_ts.LengthEqualityReason.radii_equal,
                auxiliaryShapes: [lengthSymbolA.circle, lengthSymbolB.circle],
                shapes: [lengthSymbolA, lengthSymbolB]
            });
        }
        return undefined;
    }
    plane_ts.makeEqualLengthByRadiiEqual = makeEqualLengthByRadiiEqual;
    function makeEqualLengthByCommonCircle(lengthSymbolA, lengthSymbolB, circle) {
        const ABC = getCommonPoint(lengthSymbolA, lengthSymbolB);
        if (ABC != undefined) {
            const [A, B, C] = ABC;
            if (circle.center == A && circle.includesPoint(B) && circle.includesPoint(C)) {
                // msg(`common-circle`);
                return new LengthEquality({
                    reason: plane_ts.LengthEqualityReason.common_circle,
                    auxiliaryShapes: [circle],
                    shapes: [lengthSymbolA, lengthSymbolB]
                });
            }
        }
        return undefined;
    }
    plane_ts.makeEqualLengthByCommonCircle = makeEqualLengthByCommonCircle;
    function makeEqualLengthByParallelLines(lengthSymbolA, lengthSymbolB, parallel_lines) {
        if (!plane_ts.isParallel(parallel_lines[0], parallel_lines[1])) {
            return undefined;
        }
        if (lengthSymbolA.line != undefined && lengthSymbolB.line != undefined && plane_ts.isParallel(lengthSymbolA.line, lengthSymbolB.line)) {
        }
        else {
            return undefined;
        }
        const [line1, line2] = parallel_lines;
        for (const lengthSymbol of [lengthSymbolA, lengthSymbolB]) {
            const [A, B] = [lengthSymbol.pointA, lengthSymbol.pointB];
            if (line1.includesPoint(A) && line2.includesPoint(B) || line1.includesPoint(B) && line2.includesPoint(A)) {
                continue;
            }
            return undefined;
        }
        plane_ts.msg(`parallel-lines`);
        return new LengthEquality({
            reason: plane_ts.LengthEqualityReason.parallel_lines_distance,
            auxiliaryShapes: parallel_lines,
            shapes: [lengthSymbolA, lengthSymbolB]
        });
    }
    plane_ts.makeEqualLengthByParallelLines = makeEqualLengthByParallelLines;
    function makeEqualLengthByParallelLinesAuto(lengthSymbolA, lengthSymbolB) {
        const parallel_lines = findParallelLinesOfLengthSymbols(lengthSymbolA, lengthSymbolB);
        if (parallel_lines != undefined) {
            plane_ts.msg(`parallel-lines`);
            return new LengthEquality({
                reason: plane_ts.LengthEqualityReason.parallel_lines_distance,
                auxiliaryShapes: parallel_lines,
                shapes: [lengthSymbolA, lengthSymbolB]
            });
        }
        return undefined;
    }
    plane_ts.makeEqualLengthByParallelLinesAuto = makeEqualLengthByParallelLinesAuto;
    function makeEqualLengthByParallelogramOppositeSides(lengthSymbolA, lengthSymbolB) {
        let points = [lengthSymbolA.pointA, lengthSymbolA.pointB, lengthSymbolB.pointA, lengthSymbolB.pointB];
        points = plane_ts.toClockwisePoints(points);
        const parallelogramClassifier = plane_ts.getParallelogramClassifier(points);
        if (parallelogramClassifier == undefined) {
            plane_ts.msg(`no parallelogram`);
            return undefined;
        }
        const parallelogram = new plane_ts.Quadrilateral({
            points,
            lines: []
        });
        // msg(`parallelogram-sides`);
        return new LengthEquality({
            reason: plane_ts.LengthEqualityReason.parallelogram_opposite_sides,
            auxiliaryShapes: [parallelogram],
            shapes: [lengthSymbolA, lengthSymbolB]
        });
    }
    plane_ts.makeEqualLengthByParallelogramOppositeSides = makeEqualLengthByParallelogramOppositeSides;
    function makeEqualLengthByParallelogramDiagonalBisection(lengthSymbolA, lengthSymbolB) {
        const parallelograms = plane_ts.getParallelogramsByDiagonalLengthSymbols(lengthSymbolA, lengthSymbolB);
        for (const parallelogram of parallelograms) {
            const diagonal_intersection = parallelogram.diagonalIntersection();
            if (diagonal_intersection != undefined) {
                let lengthSymbol_points_pair = [lengthSymbolA.points(), lengthSymbolB.points()];
                if (lengthSymbol_points_pair.every(x => x.includes(diagonal_intersection))) {
                    let lengthSymbol_vertices = lengthSymbol_points_pair.map(x => x[0] == diagonal_intersection ? x[1] : x[0]);
                    if (plane_ts.areSetsEqual(lengthSymbol_vertices, [parallelogram.points[0], parallelogram.points[2]]) ||
                        plane_ts.areSetsEqual(lengthSymbol_vertices, [parallelogram.points[1], parallelogram.points[3]])) {
                        // msg(`parallelogram-diagonal-bisection`);
                        return new LengthEquality({
                            reason: plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection,
                            auxiliaryShapes: [parallelogram],
                            shapes: [lengthSymbolA, lengthSymbolB]
                        });
                    }
                }
            }
        }
        return undefined;
    }
    plane_ts.makeEqualLengthByParallelogramDiagonalBisection = makeEqualLengthByParallelogramDiagonalBisection;
    function makeEqualLengthByEquivalenceClass(lengthSymbolA, lengthSymbolB) {
        if (lengthSymbolA.isEqual(lengthSymbolB)) {
            return new LengthEquality({
                reason: plane_ts.LengthEqualityReason.equivalence_class,
                shapes: [lengthSymbolA, lengthSymbolB]
            });
        }
        return undefined;
    }
    plane_ts.makeEqualLengthByEquivalenceClass = makeEqualLengthByEquivalenceClass;
    function showPrompt(text) {
        const dlg = plane_ts.$dlg("help-dlg");
        plane_ts.$("help-msg").innerText = text;
        // dlg.remove();
        // document.body.append(dlg);
        dlg.show();
        const timeout = (plane_ts.getPlayMode() == plane_ts.PlayMode.fastForward ? 50 : 3000);
        setTimeout(() => {
            dlg.close();
        }, timeout);
    }
    plane_ts.showPrompt = showPrompt;
    class LengthEquality extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
            plane_ts.LengthSymbol.setEqualLengthKinds(this.selectedShapes);
        }
        reading() {
            return this.textReading(plane_ts.TT("the two length symbols are of equal length."));
        }
        setRelations() {
            super.setRelations();
            const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
            addEqualLengths(lengthSymbolA, lengthSymbolB);
        }
        verify() {
            let lengthEquality;
            switch (this.reason) {
                case plane_ts.LengthEqualityReason.radii_equal:
                    {
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByRadiiEqual(lengthSymbolA, lengthSymbolB);
                    }
                    break;
                case plane_ts.LengthEqualityReason.common_circle:
                    {
                        const circle = this.auxiliaryShapes[0];
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByCommonCircle(lengthSymbolA, lengthSymbolB, circle);
                        if (lengthEquality == undefined) {
                            lengthEquality = makeEqualLengthByCommonCircle(lengthSymbolA, lengthSymbolB, circle);
                        }
                    }
                    break;
                case plane_ts.LengthEqualityReason.parallel_lines_distance:
                    {
                        const parallel_lines = this.auxiliaryShapes;
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByParallelLines(lengthSymbolA, lengthSymbolB, parallel_lines);
                        plane_ts.linesSelector_2.clear();
                    }
                    break;
                case plane_ts.LengthEqualityReason.congruent_triangles:
                    {
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByCongruentTriangles(lengthSymbolA, lengthSymbolB);
                    }
                    break;
                case plane_ts.LengthEqualityReason.parallelogram_opposite_sides:
                    {
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByParallelogramOppositeSides(lengthSymbolA, lengthSymbolB);
                    }
                    break;
                case plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection:
                    {
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByParallelogramDiagonalBisection(lengthSymbolA, lengthSymbolB);
                    }
                    break;
                case plane_ts.LengthEqualityReason.equivalence_class:
                    {
                        const [lengthSymbolA, lengthSymbolB] = this.selectedShapes;
                        lengthEquality = makeEqualLengthByEquivalenceClass(lengthSymbolA, lengthSymbolB);
                    }
                    break;
                case plane_ts.LengthEqualityReason.midpoint:
                case plane_ts.LengthEqualityReason.not_used:
                default:
                    throw new plane_ts.MyError();
            }
            const reason_str = plane_ts.reasonMsg(this.reason);
            if (lengthEquality == undefined) {
                throw new plane_ts.MyError(`can not make Length-Equality: ${reason_str}`);
            }
            else {
                plane_ts.msg(`make Length-Equality OK: ${reason_str}`);
            }
            return lengthEquality;
        }
    }
    plane_ts.LengthEquality = LengthEquality;
    function isEqualLength(lengthSymbolA, lengthSymbolB) {
        if (lengthSymbolA == lengthSymbolB) {
            return true;
        }
        return plane_ts.equalLengths.find(x => x.has(lengthSymbolA) && x.has(lengthSymbolB)) != undefined;
    }
    plane_ts.isEqualLength = isEqualLength;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function angleKey(lineA, directionA, lineB, directionB, intersection) {
        return `${lineA.id}:${directionA}:${lineB.id}:${directionB}:${intersection.id}`;
    }
    plane_ts.angleKey = angleKey;
    function angleMatches3points(angle, points) {
        if (angle.intersection == points[1] && angle.lineA.includesPoint(points[2]) && angle.lineB.includesPoint(points[0])) {
            const vB = points[0].sub(points[1]); // a vector form point1 to point0
            const vA = points[2].sub(points[1]); // a vector form point1 to point2
            if (0 < vB.dot(angle.eB) && 0 < vA.dot(angle.eA)) {
                return true;
            }
        }
        return false;
    }
    plane_ts.angleMatches3points = angleMatches3points;
    function findAngleBy3points(angles, points) {
        const matched_angles = angles.filter(x => angleMatches3points(x, points));
        if (matched_angles.length == 0) {
            return undefined;
        }
        plane_ts.assert(matched_angles.length == 1);
        return matched_angles[0];
    }
    plane_ts.findAngleBy3points = findAngleBy3points;
    function findEqualAnglesBy3pointsPair(points1, points2) {
        plane_ts.assert(plane_ts.isClockwise(points1));
        plane_ts.assert(plane_ts.isClockwise(points2));
        const angles_list = plane_ts.supplementaryAngles.flat();
        angles_list.push(plane_ts.rightAngles);
        for (const angle_set of angles_list) {
            const angles = angle_set.toArray();
            const angle1 = findAngleBy3points(angles, points1);
            if (angle1 != undefined) {
                const angle2 = findAngleBy3points(angles, points2);
                if (angle2 != undefined) {
                    return [angle1, angle2];
                }
                else {
                    return undefined;
                }
            }
        }
        return undefined;
    }
    plane_ts.findEqualAnglesBy3pointsPair = findEqualAnglesBy3pointsPair;
    function findAnglesInPolygon(points_arg) {
        const all_angles = Array.from(plane_ts.angleMap.values());
        const points = plane_ts.toClockwisePoints(points_arg);
        const angles = [];
        for (const idx of plane_ts.range(points.length)) {
            const pts = [0, 1, 2].map(i => points[(idx + i) % points.length]);
            const angle = findAngleBy3points(all_angles, pts);
            plane_ts.assert(angle != undefined);
            angles.push(angle);
        }
        return angles;
    }
    plane_ts.findAnglesInPolygon = findAnglesInPolygon;
    function findAngle(angle_points_arg) {
        let angle_points = angle_points_arg.slice();
        if (!plane_ts.isClockwise(angle_points)) {
            angle_points = [2, 1, 0].map(i => angle_points_arg[i]);
        }
        const [B, C, A] = angle_points;
        const lineA = plane_ts.getCommonLineOfPoints(C, A);
        const lineB = plane_ts.getCommonLineOfPoints(C, B);
        if (lineA == undefined || lineB == undefined) {
            return undefined;
        }
        const CA = A.sub(C);
        const CB = B.sub(C);
        const directionA = Math.sign(CA.dot(lineA.e));
        const directionB = Math.sign(CB.dot(lineB.e));
        const key = angleKey(lineA, directionA, lineB, directionB, C);
        const angle = plane_ts.angleMap.get(key);
        if (angle == undefined) {
            const point_ids = angle_points.map(x => `${x.id}`).join(", ");
            // msg(`point ids:${point_ids}  key:${key}`);
            for (const map_key of plane_ts.angleMap.keys()) {
                // msg(`map key:${map_key}`);
            }
        }
        return angle;
    }
    plane_ts.findAngle = findAngle;
    function addSupplementaryAngles(angle1, angle2) {
        if (plane_ts.supplementaryAngles.some(x => x[0].has(angle1) && x[1].has(angle2) || x[0].has(angle2) && x[1].has(angle1))) {
            return;
        }
        const pair = plane_ts.supplementaryAngles.find(x => x[0].has(angle1) || x[0].has(angle2) || x[1].has(angle1) || x[1].has(angle2));
        if (pair != undefined) {
            const angles = [angle1, angle2];
            for (const [i, angle_set] of pair.entries()) {
                for (const [j, angle] of angles.entries()) {
                    if (angle_set.has(angle)) {
                        pair[1 - i].add(angles[1 - j]);
                        return;
                    }
                }
            }
        }
        plane_ts.supplementaryAngles.push([new plane_ts.MySet([angle1]), new plane_ts.MySet([angle2])]);
    }
    plane_ts.addSupplementaryAngles = addSupplementaryAngles;
    function checkSupplementaryAngles(root) {
        if (root.isRootEq()) {
            for (const [side1, side2] of plane_ts.permutation(root.args)) {
                if (side1 instanceof plane_ts.RefVar && side1.name == "pi") {
                    if (side2.isAdd()) {
                        const add = side2;
                        if (add.args.length == 2 && add.args.every(x => x instanceof plane_ts.RefVar)) {
                            const all_angles = plane_ts.View.current.allRealShapes().filter(x => x instanceof plane_ts.Angle);
                            const refs = add.args;
                            const angles = refs.map(x => all_angles.find(y => y.name == x.name));
                            if (angles.every(x => x != undefined)) {
                                // msg(`check-Supplementary-Angles ${angles[0].name} ${angles[1].name}`);
                                addSupplementaryAngles(angles[0], angles[1]);
                            }
                        }
                    }
                }
            }
        }
    }
    plane_ts.checkSupplementaryAngles = checkSupplementaryAngles;
    function addEqualAngles(angle1, angle2) {
        const angle_sets = plane_ts.supplementaryAngles.flat().filter(x => x.has(angle1) || x.has(angle2));
        let angle_set;
        switch (angle_sets.length) {
            case 0:
                angle_set = new plane_ts.MySet();
                plane_ts.supplementaryAngles.push([angle_set, new plane_ts.MySet()]);
                break;
            case 1:
                angle_set = angle_sets[0];
                break;
            default:
                throw new plane_ts.MyError();
        }
        angle_set.add(angle1);
        angle_set.add(angle2);
        const angle_equality_propositions = plane_ts.propositions.filter(x => x instanceof plane_ts.ShapeProposition && x.reason == plane_ts.PropositionReason.angle_equality).toArray();
        const proven_proposition = angle_equality_propositions.find(x => plane_ts.areSetsEqual(x.selectedShapes, [angle1, angle2]));
    }
    plane_ts.addEqualAngles = addEqualAngles;
    function isEqualAngle(angleA, angleB) {
        if (angleA.isRightAngle() && angleB.isRightAngle()) {
            return true;
        }
        for (const angle_set of plane_ts.supplementaryAngles.flat()) {
            if (angle_set.has(angleA)) {
                return angle_set.has(angleB);
            }
        }
        return false;
    }
    plane_ts.isEqualAngle = isEqualAngle;
    function isEqualAnglePoints(angle_pointsA, angle_pointsB) {
        const angleA = findAngle(angle_pointsA);
        const angleB = findAngle(angle_pointsB);
        if (angleA != undefined && angleB != undefined) {
            return isEqualAngle(angleA, angleB);
        }
        return false;
    }
    plane_ts.isEqualAnglePoints = isEqualAnglePoints;
    function findTrianglePairByAngles(angleA, angleB, triangles_list) {
        for (const triangles of triangles_list) {
            const trianglesA = plane_ts.getTrianglesByAngle(angleA, triangles);
            if (trianglesA.length == 0) {
                continue;
            }
            const trianglesB = plane_ts.getTrianglesByAngle(angleB, triangles);
            if (trianglesB.length == 0) {
                continue;
            }
            for (const triangleA of trianglesA) {
                const idxA = triangleA.points.indexOf(angleA.intersection);
                plane_ts.assert(idxA != -1);
                for (const triangleB of trianglesB) {
                    const idxB = triangleB.points.indexOf(angleB.intersection);
                    plane_ts.assert(idxB != -1);
                    if (idxA == idxB) {
                        return [triangleA, triangleB];
                    }
                    else {
                        plane_ts.msg(`make Angle Equality By Congruent Triangles : idx-A:${idxA} != idx-B:${idxB}`);
                    }
                }
            }
        }
    }
    function makeAngleEqualityByCongruentTriangles(angleA, angleB) {
        const triangleAB = findTrianglePairByAngles(angleA, angleB, plane_ts.congruentTriangles);
        if (triangleAB != undefined) {
            const [triangleA, triangleB] = triangleAB;
            // msg(`equal angle:congruent triangles`);
            return new AngleEquality({
                reason: plane_ts.AngleEqualityReason.congruent_triangles,
                auxiliaryShapes: [
                    triangleA, triangleB
                ],
                shapes: [
                    angleA, angleB
                ]
            });
        }
        else {
            plane_ts.msg(`can not find congruent triangles`);
            return undefined;
        }
    }
    plane_ts.makeAngleEqualityByCongruentTriangles = makeAngleEqualityByCongruentTriangles;
    function makeAngleEqualityBySimilarTriangles(angleA, angleB) {
        const triangleAB = findTrianglePairByAngles(angleA, angleB, plane_ts.similarTriangles);
        if (triangleAB != undefined) {
            const [triangleA, triangleB] = triangleAB;
            return new AngleEquality({
                reason: plane_ts.AngleEqualityReason.similar_triangles,
                auxiliaryShapes: [triangleA, triangleB],
                shapes: [angleA, angleB]
            });
        }
        else {
            plane_ts.msg(`can not find similar triangles`);
            return undefined;
        }
    }
    plane_ts.makeAngleEqualityBySimilarTriangles = makeAngleEqualityBySimilarTriangles;
    function makeAngleEqualityByIsoscelesTriangleBaseAngles(angleA, angleB) {
        for (const [angle1, angle2] of plane_ts.permutation([angleA, angleB])) {
            if (angle1.lineA == angle2.lineB && angle1.directionA == -angle2.directionB) {
                const triangle = plane_ts.isoscelesTriangle.find(x => x.points[1] == angle1.intersection && x.points[2] == angle2.intersection);
                if (triangle == undefined) {
                    return undefined;
                }
                const vertex = plane_ts.getCommonPointOfLines(angle1.lineB, angle2.lineA);
                if (vertex != triangle.points[0]) {
                    return undefined;
                }
                return new AngleEquality({
                    reason: plane_ts.AngleEqualityReason.isosceles_triangle_base_angles,
                    auxiliaryShapes: [triangle],
                    shapes: [angleA, angleB]
                });
            }
        }
        return undefined;
    }
    plane_ts.makeAngleEqualityByIsoscelesTriangleBaseAngles = makeAngleEqualityByIsoscelesTriangleBaseAngles;
    function getAngleUnitVectors(angleA, angleB) {
        const e_AA = angleA.lineA.e.mul(angleA.directionA);
        const e_AB = angleA.lineB.e.mul(angleA.directionB);
        const e_BA = angleB.lineA.e.mul(angleB.directionA);
        const e_BB = angleB.lineB.e.mul(angleB.directionB);
        return [e_AA, e_AB, e_BA, e_BB];
    }
    function makeAngleEqualityByVertical_angles(angleA, angleB) {
        if (angleA.intersection == angleB.intersection) {
            // msg("intersectionA == intersectionB");
            if (angleA.lineA == angleB.lineA && angleA.lineB == angleB.lineB) {
                // msg("lineAA == lineBB & lineAB == lineBB");
                const [e_AA, e_AB, e_BA, e_BB] = getAngleUnitVectors(angleA, angleB);
                if (Math.sign(e_AA.dot(e_BA)) == -1 && Math.sign(e_AB.dot(e_BB)) == -1) {
                    // msg(`equal angle:vertical angle`);
                    return new AngleEquality({
                        reason: plane_ts.AngleEqualityReason.vertical_angles,
                        auxiliaryShapes: [
                            angleA.lineA, angleA.lineB
                        ],
                        shapes: [
                            angleA, angleB
                        ]
                    });
                }
                else {
                    plane_ts.msg(`AA.BA = ${(e_AA.dot(e_BA)).toFixed(1)} : AB.BB = ${(e_AB.dot(e_BB)).toFixed(1)}`);
                }
            }
            return undefined;
        }
        return undefined;
    }
    plane_ts.makeAngleEqualityByVertical_angles = makeAngleEqualityByVertical_angles;
    function makeAngleEqualityByParallelLines(angleA, angleB) {
        let angle_lines = plane_ts.unique([angleA.lineA, angleA.lineB, angleB.lineA, angleB.lineB]);
        if (angle_lines.length != 3) {
            plane_ts.msg("no cross line.");
            return undefined;
        }
        const cross_line = angle_lines.find(x => [angleA.lineA, angleA.lineB].includes(x) && [angleB.lineA, angleB.lineB].includes(x));
        plane_ts.assert(cross_line != undefined);
        const parallel_lines = angle_lines.filter(x => x != cross_line);
        plane_ts.assert(parallel_lines.length == 2);
        if (!plane_ts.isParallel(parallel_lines[0], parallel_lines[1])) {
            plane_ts.msg("not parallel");
            return undefined;
        }
        let cross_sign;
        let parallel_sign;
        const [e_AA, e_AB, e_BA, e_BB] = getAngleUnitVectors(angleA, angleB);
        if (angleA.lineA == angleB.lineA && angleA.lineA == cross_line && plane_ts.areSetsEqual(parallel_lines, [angleA.lineB, angleB.lineB])) {
            // msg("lineA == lineA");
            cross_sign = Math.sign(e_AA.dot(e_BA));
            parallel_sign = Math.sign(e_AB.dot(e_BB));
        }
        else if (angleA.lineB == angleB.lineB && angleA.lineB == cross_line && plane_ts.areSetsEqual(parallel_lines, [angleA.lineA, angleB.lineA])) {
            // msg("lineB == lineB");
            cross_sign = Math.sign(e_AB.dot(e_BB));
            parallel_sign = Math.sign(e_AA.dot(e_BA));
        }
        else {
            plane_ts.msg("illegal angle");
            return undefined;
        }
        if (cross_sign * parallel_sign == 1) {
            // msg(`equal angle:parallel lines`);
            return new AngleEquality({
                reason: plane_ts.AngleEqualityReason.parallel_line_angles,
                auxiliaryShapes: parallel_lines.concat(cross_line),
                shapes: [
                    angleA, angleB
                ]
            });
        }
        else {
            plane_ts.msg("make-Equal-Angle:cross_sign * parallel_sign != 1");
            return undefined;
        }
    }
    plane_ts.makeAngleEqualityByParallelLines = makeAngleEqualityByParallelLines;
    function makeAngleEqualityByAngleBisector(angleA, angleB, angle_bisector) {
        const [lineA, lineB] = [angleA.lineA, angleB.lineB];
        return new AngleEquality({
            reason: plane_ts.AngleEqualityReason.angle_bisector,
            auxiliaryShapes: [lineA, lineB, angle_bisector],
            shapes: [angleA, angleB]
        });
    }
    plane_ts.makeAngleEqualityByAngleBisector = makeAngleEqualityByAngleBisector;
    function makeAngleEqualityByParallelogramOppositeAngles(angleA, angleB, parallelogram) {
        if (!parallelogram.isParallelogram()) {
            return undefined;
        }
        const intersections = [angleA.intersection, angleB.intersection];
        const [pt0, pt1, pt2, pt3] = parallelogram.points;
        if (plane_ts.areSetsEqual([pt0, pt2], intersections) || plane_ts.areSetsEqual([pt1, pt3], intersections)) {
            const points = plane_ts.toClockwisePoints(parallelogram.points);
            let triad_pair;
            if (intersections.includes(points[0])) {
                triad_pair = [[points[3], points[0], points[1]], [points[1], points[2], points[3]]];
            }
            else {
                triad_pair = [[points[0], points[1], points[2]], [points[2], points[3], points[0]]];
            }
            const angles = [angleA, angleB];
            if (triad_pair[0][1] == angleB.intersection) {
                triad_pair.reverse();
            }
            for (const [idx, triad] of triad_pair.entries()) {
                const angle = angles[idx];
                plane_ts.assert(triad[1] == angle.intersection);
                if (angle.lineA.includesPoint(triad[2]) && angle.lineB.includesPoint(triad[0])) {
                    // msg(`equal angle:parallelogram`);
                    return new AngleEquality({
                        reason: plane_ts.AngleEqualityReason.parallelogram_opposite_angles,
                        auxiliaryShapes: [parallelogram],
                        shapes: [
                            angleA, angleB
                        ]
                    });
                }
            }
        }
        return undefined;
    }
    plane_ts.makeAngleEqualityByParallelogramOppositeAngles = makeAngleEqualityByParallelogramOppositeAngles;
    class AngleEquality extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
            const angles = this.selectedShapes;
            plane_ts.Angle.setEqualAngleMarks(angles);
        }
        reading() {
            return this.textReading(plane_ts.TT("the two angles are equal."));
        }
        setRelations() {
            super.setRelations();
            const [angleA, angleB] = this.selectedShapes;
            addEqualAngles(angleA, angleB);
        }
        verify() {
            let angleEquality;
            const [angleA, angleB] = this.selectedShapes;
            const reason_str = plane_ts.reasonMsg(this.reason);
            switch (this.reason) {
                case plane_ts.AngleEqualityReason.vertical_angles:
                    angleEquality = makeAngleEqualityByVertical_angles(angleA, angleB);
                    break;
                case plane_ts.AngleEqualityReason.parallel_line_angles:
                    {
                        angleEquality = makeAngleEqualityByParallelLines(angleA, angleB);
                    }
                    break;
                case plane_ts.AngleEqualityReason.angle_bisector:
                    {
                        const angle_bisector = this.auxiliaryShapes[2];
                        angleEquality = makeAngleEqualityByAngleBisector(angleA, angleB, angle_bisector);
                    }
                    break;
                case plane_ts.AngleEqualityReason.congruent_triangles:
                    angleEquality = makeAngleEqualityByCongruentTriangles(angleA, angleB);
                    break;
                case plane_ts.AngleEqualityReason.parallelogram_opposite_angles:
                    {
                        const parallelogram = this.auxiliaryShapes[0];
                        angleEquality = makeAngleEqualityByParallelogramOppositeAngles(angleA, angleB, parallelogram);
                    }
                    break;
                case plane_ts.AngleEqualityReason.similar_triangles:
                    angleEquality = makeAngleEqualityBySimilarTriangles(angleA, angleB);
                    break;
                default:
                    throw new plane_ts.MyError(`unknown Angle-Equality reason: ${this.reason} ${reason_str}`);
            }
            if (angleEquality == undefined) {
                throw new plane_ts.MyError(`can not make Angle-Equality: ${reason_str}`);
            }
            else {
                plane_ts.msg(`make Angle-Equality OK: ${reason_str}`);
            }
            return angleEquality;
        }
    }
    plane_ts.AngleEquality = AngleEquality;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function makeQuadrilateralClassifier(points, reason) {
        let equalSideLengthSymbolsA;
        let equalSideLengthSymbolsB;
        let parallelLinesA;
        let parallelLinesB;
        let equalAnglesA;
        let equalAnglesB;
        let diagonalBisectionLengthSymbolsA;
        let diagonalBisectionLengthSymbolsB;
        equalSideLengthSymbolsA = plane_ts.findEqualLengthsByPointsPair([points[0], points[1]], [points[2], points[3]]);
        equalSideLengthSymbolsB = plane_ts.findEqualLengthsByPointsPair([points[1], points[2]], [points[3], points[0]]);
        parallelLinesA = plane_ts.getParallelLinesByPointsPair([points[0], points[1]], [points[2], points[3]]);
        parallelLinesB = plane_ts.getParallelLinesByPointsPair([points[1], points[2]], [points[3], points[0]]);
        equalAnglesA = plane_ts.findEqualAnglesBy3pointsPair([points[0], points[1], points[2]], [points[2], points[3], points[0]]);
        equalAnglesB = plane_ts.findEqualAnglesBy3pointsPair([points[1], points[2], points[3]], [points[3], points[0], points[1]]);
        diagonalBisectionLengthSymbolsA = undefined;
        diagonalBisectionLengthSymbolsB = undefined;
        const diagonalA = plane_ts.getCommonLineOfPoints(points[0], points[2]);
        const diagonalB = plane_ts.getCommonLineOfPoints(points[1], points[3]);
        if (diagonalA != undefined && diagonalB != undefined) {
            const intersection = plane_ts.getCommonPointOfLines(diagonalA, diagonalB);
            if (intersection != undefined) {
                diagonalBisectionLengthSymbolsA = plane_ts.findEqualLengthsByPointsPair([points[0], intersection], [points[2], intersection]);
                diagonalBisectionLengthSymbolsB = plane_ts.findEqualLengthsByPointsPair([points[1], intersection], [points[3], intersection]);
            }
        }
        const lines = plane_ts.range(4).map(i => plane_ts.getCommonLineOfPoints(points[i], points[(i + 1) % 4]));
        if (lines.some(x => x == undefined)) {
            throw new plane_ts.MyError();
        }
        const quadrilateral = new plane_ts.Quadrilateral({ points, lines });
        switch (reason) {
            case plane_ts.ParallelogramReason.each_opposite_sides_are_equal:
                if (equalSideLengthSymbolsA != undefined && equalSideLengthSymbolsB != undefined) {
                    return new ParallelogramClassifier({
                        reason: reason,
                        auxiliaryShapes: equalSideLengthSymbolsA.concat(equalSideLengthSymbolsB),
                        shapes: [quadrilateral]
                    });
                }
                break;
            case plane_ts.ParallelogramReason.each_opposite_sides_are_parallel:
                if (parallelLinesA != undefined && parallelLinesB != undefined) {
                    return new ParallelogramClassifier({
                        reason: reason,
                        auxiliaryShapes: parallelLinesA.concat(parallelLinesB),
                        shapes: [quadrilateral]
                    });
                }
                break;
            case plane_ts.ParallelogramReason.each_opposite_angles_are_equal:
                if (equalAnglesA != undefined && equalAnglesB != undefined) {
                    return new ParallelogramClassifier({
                        reason: reason,
                        auxiliaryShapes: equalAnglesA.concat(equalAnglesB),
                        shapes: [quadrilateral]
                    });
                }
            case plane_ts.ParallelogramReason.one_opposite_sides_are_parallel_and_equal: {
                let auxiliaryShapes;
                if (parallelLinesA != undefined && equalSideLengthSymbolsA != undefined) {
                    plane_ts.assert(plane_ts.range(2).every(i => parallelLinesA[i] == equalSideLengthSymbolsA[i].line));
                    auxiliaryShapes = equalSideLengthSymbolsA;
                }
                else if (parallelLinesB != undefined && equalSideLengthSymbolsB != undefined) {
                    plane_ts.assert(plane_ts.range(2).every(i => parallelLinesB[i] == equalSideLengthSymbolsB[i].line));
                    auxiliaryShapes = equalSideLengthSymbolsB;
                }
                else {
                    break;
                }
                return new ParallelogramClassifier({
                    reason,
                    auxiliaryShapes,
                    shapes: [quadrilateral]
                });
            }
            case plane_ts.ParallelogramReason.each_diagonal_bisections:
                if (diagonalBisectionLengthSymbolsA != undefined && diagonalBisectionLengthSymbolsB != undefined) {
                    return new ParallelogramClassifier({
                        reason,
                        auxiliaryShapes: diagonalBisectionLengthSymbolsA.concat(diagonalBisectionLengthSymbolsB),
                        shapes: [quadrilateral]
                    });
                }
                break;
            case plane_ts.RhombusReason.all_sides_are_equal:
                if (equalSideLengthSymbolsA != undefined && equalSideLengthSymbolsB != undefined) {
                    if (plane_ts.isEqualLength(equalSideLengthSymbolsA[0], equalSideLengthSymbolsB[0])) {
                        return new RhombusClassifier({
                            reason: reason,
                            auxiliaryShapes: equalSideLengthSymbolsA.concat(equalSideLengthSymbolsB),
                            shapes: [quadrilateral]
                        });
                    }
                }
                break;
        }
        return undefined;
    }
    plane_ts.makeQuadrilateralClassifier = makeQuadrilateralClassifier;
    class TriangleQuadrilateralDetector extends plane_ts.Statement {
        shapeClass;
    }
    plane_ts.TriangleQuadrilateralDetector = TriangleQuadrilateralDetector;
    class QuadrilateralClassifier extends TriangleQuadrilateralDetector {
        quadrilateral() {
            plane_ts.assert(this.selectedShapes.length == 1 && this.selectedShapes[0] instanceof plane_ts.Quadrilateral);
            return this.selectedShapes[0];
        }
        isParallelogram() {
            return this.shapeClass == plane_ts.TriangleQuadrilateralClass.parallelogram || this.shapeClass == plane_ts.TriangleQuadrilateralClass.rhombus;
        }
        setRelations() {
            super.setRelations();
            plane_ts.parallelogramClassifiers.add(this);
        }
        draw() {
            plane_ts.assert(this.selectedShapes.length == 1 && this.selectedShapes[0] instanceof plane_ts.Quadrilateral);
            const quadrilateral = this.selectedShapes[0];
            const shapes = this.auxiliaryShapes.filter(x => x.mode != plane_ts.Mode.none);
            for (const shape of shapes) {
                let p1;
                let p2;
                if (shape instanceof plane_ts.LengthSymbol) {
                    [p1, p2] = [shape.pointA, shape.pointB];
                }
                else if (shape instanceof plane_ts.AbstractLine) {
                    const line = shape;
                    const idx = quadrilateral.lines.indexOf(line);
                    if (idx == -1) {
                        plane_ts.msg(`Quadrilateral-Classifier error:${this.id} shape:${shape.id}:${shape.constructor.name}`);
                        continue;
                    }
                    plane_ts.assert(idx != -1);
                    [p1, p2] = [quadrilateral.points[idx], quadrilateral.points[(idx + 1) % quadrilateral.points.length]];
                }
                else {
                    shape.draw();
                    continue;
                }
                const color = shape.modeColor();
                const line_width = shape.modeLineWidth();
                plane_ts.View.current.canvas.drawLineRaw(p1.position, p2.position, color, line_width);
            }
        }
    }
    class ParallelogramClassifier extends QuadrilateralClassifier {
        reading() {
            return this.textReading(plane_ts.TT("this is a parallelogram."));
        }
    }
    plane_ts.ParallelogramClassifier = ParallelogramClassifier;
    class RhombusClassifier extends ParallelogramClassifier {
        reading() {
            return this.textReading(plane_ts.TT("this is a rhombus."));
        }
    }
    plane_ts.RhombusClassifier = RhombusClassifier;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function makeParallelDetectorByParallelogram(lineA, lineB) {
        const lines = [lineA, lineB];
        for (const classifier of plane_ts.parallelogramClassifiers) {
            const parallelogram = classifier.quadrilateral();
            if (plane_ts.isSubSet(lines, parallelogram.lines)) {
                // msg(`Parallel-Detector-By-Parallelogram`);
                return new ParallelDetector({
                    reason: plane_ts.ParallelReason.parallelogram,
                    auxiliaryShapes: [parallelogram],
                    shapes: [lineA, lineB]
                });
            }
        }
        return undefined;
    }
    plane_ts.makeParallelDetectorByParallelogram = makeParallelDetectorByParallelogram;
    function makeParallelDetectorByCorrespondingAlternateAnglesEqual(angleA, angleB) {
        if (angleA.intersection != angleB.intersection && plane_ts.isEqualAngle(angleA, angleB)) {
            let lineA;
            let lineB;
            if (angleA.lineA == angleB.lineA) {
                lineA = angleA.lineB;
                lineB = angleB.lineB;
            }
            else if (angleA.lineB == angleB.lineB) {
                lineA = angleA.lineA;
                lineB = angleB.lineA;
            }
            else {
                return undefined;
            }
            // msg(`Parallel-Detector-By-Corresponding-Alternate-Angles-Equal`);
            return new ParallelDetector({
                reason: plane_ts.ParallelReason.corresponding_angles_or_alternate_angles_are_equal,
                auxiliaryShapes: [angleA, angleB],
                shapes: [lineA, lineB]
            });
        }
        return undefined;
    }
    plane_ts.makeParallelDetectorByCorrespondingAlternateAnglesEqual = makeParallelDetectorByCorrespondingAlternateAnglesEqual;
    function makeParallelDetectorBySupplementaryAngles(angleA, angleB) {
        for (const [angle1, angle2] of plane_ts.permutation([angleA, angleB])) {
            if (angle1.lineB == angle2.lineA && angle1.directionB == -angle2.directionA) {
                const lines = [angle1.lineA, angle2.lineB];
                // msg(`Parallel-Detector-By-Supplementary-Angles`);
                return new ParallelDetector({
                    reason: plane_ts.ParallelReason.supplementary_angles,
                    auxiliaryShapes: [angle1, angle2],
                    shapes: lines
                });
            }
        }
        return undefined;
    }
    plane_ts.makeParallelDetectorBySupplementaryAngles = makeParallelDetectorBySupplementaryAngles;
    class ParallelDetector extends plane_ts.Statement {
        reading() {
            return this.textReading(plane_ts.TT("these two lines are parallel."));
        }
        setRelations() {
            super.setRelations();
            plane_ts.assert(this.selectedShapes.length == 2 && this.selectedShapes.every(x => x instanceof plane_ts.AbstractLine));
            const [lineA, lineB] = this.selectedShapes;
            plane_ts.addParallelLines(lineA, lineB);
        }
    }
    plane_ts.ParallelDetector = ParallelDetector;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function makeTriangleSimilarity(A, B) {
        const equal_angle_pairs = [];
        for (const idx of plane_ts.range(3)) {
            const angle_pointsA = [A.points[idx], A.points[(idx + 1) % 3], A.points[(idx + 2) % 3]];
            const angle_pointsB = [B.points[idx], B.points[(idx + 1) % 3], B.points[(idx + 2) % 3]];
            const angleA = plane_ts.findAngle(angle_pointsA);
            if (angleA != undefined) {
                const angleB = plane_ts.findAngle(angle_pointsB);
                if (angleB != undefined) {
                    if (plane_ts.isEqualAngle(angleA, angleB)) {
                        equal_angle_pairs.push(angleA, angleB);
                    }
                }
            }
        }
        if (equal_angle_pairs.length == 4) {
            return new TriangleSimilarity({
                reason: plane_ts.TriangleSimilarityReason.two_equal_angle_pairs,
                shapes: [A, B],
                auxiliaryShapes: equal_angle_pairs
            });
        }
        return undefined;
    }
    plane_ts.makeTriangleSimilarity = makeTriangleSimilarity;
    class TriangleSimilarity extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
        }
        reading() {
            return this.textReading(plane_ts.TT("the two triangles are similar."));
        }
        setRelations() {
            super.setRelations();
            const triangles = this.selectedShapes;
            plane_ts.addSimilarTriangles(triangles[0], triangles[1]);
        }
    }
    plane_ts.TriangleSimilarity = TriangleSimilarity;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    class TriangleDetector extends plane_ts.TriangleQuadrilateralDetector {
        constructor(obj) {
            super(obj);
            const triangle = this.selectedShapes[0];
            plane_ts.assert(triangle instanceof plane_ts.Triangle);
            if (this.reason == plane_ts.IsoscelesTriangleReason.two_sides_are_equal) {
                plane_ts.isoscelesTriangle.push(triangle);
            }
        }
        reading() {
            switch (this.reason) {
                case plane_ts.IsoscelesTriangleReason.two_sides_are_equal:
                    return this.textReading(plane_ts.TT("The triangle is an isosceles triangle."));
            }
            throw new plane_ts.MyError();
        }
    }
    plane_ts.TriangleDetector = TriangleDetector;
    function makeIsoscelesTriangleDetector(points, reason) {
        switch (reason) {
            case plane_ts.IsoscelesTriangleReason.two_sides_are_equal:
                for (const length_symbol_set of plane_ts.equalLengths) {
                    const length_symbols = Array.from(length_symbol_set).filter(x => points.includes(x.pointA) && points.includes(x.pointB));
                    if (length_symbols.length == 3) {
                        const triangle = plane_ts.Triangle.fromPoints(points);
                        return new TriangleDetector({
                            reason: reason,
                            auxiliaryShapes: length_symbols,
                            shapes: [triangle]
                        });
                    }
                    else if (length_symbols.length == 2) {
                        const points_list = length_symbols.map(x => [x.pointA, x.pointB]);
                        const vertex_idx = plane_ts.range(3).find(i => points_list.every(pts => pts.includes(points[i])));
                        plane_ts.assert(vertex_idx != undefined);
                        const points2 = [points[vertex_idx], points[(vertex_idx + 1) % 3], points[(vertex_idx + 2) % 3]];
                        const triangle = plane_ts.Triangle.fromPoints(points2);
                        return new TriangleDetector({
                            reason: reason,
                            auxiliaryShapes: length_symbols,
                            shapes: [triangle]
                        });
                    }
                }
                break;
            default:
                throw new plane_ts.MyError();
        }
        return undefined;
    }
    plane_ts.makeIsoscelesTriangleDetector = makeIsoscelesTriangleDetector;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    plane_ts.Term = parser_ts.Term;
    plane_ts.RefVar = parser_ts.RefVar;
    plane_ts.App = parser_ts.App;
    function isEquationTextBlock(x) {
        if (x == undefined) {
            return false;
        }
        const classes = [plane_ts.AngleEqualityConstraint, plane_ts.Assumption, plane_ts.ExprTransform, ShapeEquation];
        return classes.some(c => x instanceof c);
    }
    plane_ts.isEquationTextBlock = isEquationTextBlock;
    function makeEquationTextBlock(parent, equation) {
        const view = plane_ts.View.current;
        const text_block = new plane_ts.TextBlock({
            parent,
            text: equation.tex(),
            isTex: true,
            offset: plane_ts.Vec2.zero(),
        });
        text_block.setTextPosition(view.textBase.x, view.textBase.y);
        text_block.updateTextDiv();
        const rect = text_block.div.children[0].getBoundingClientRect();
        view.textBase.y -= view.fromYPixScale(rect.height + 10);
        return text_block;
    }
    plane_ts.makeEquationTextBlock = makeEquationTextBlock;
    async function makeShapeEquationByEquationText(reason, auxiliaryShapes, text) {
        // msg(`angles eq: ${text}`);
        const equation = parser_ts.parseMath(text);
        if (!equation.isEq()) {
            plane_ts.msg(`can not make an equation: ${text}`);
            return undefined;
        }
        if (plane_ts.View.isPlayBack) {
            const speech = plane_ts.AbstractSpeech.one;
            await plane_ts.speakReason(speech, reason);
            await plane_ts.showAuxiliaryShapes(reason, auxiliaryShapes);
            await speech.waitEnd();
        }
        return new ShapeEquation({
            reason,
            auxiliaryShapes,
            shapes: [],
            equation
        });
    }
    async function makeSumOfAnglesIsPi(angles_arg) {
        const angles_list = plane_ts.permutation(angles_arg);
        for (const angles of angles_list) {
            if (plane_ts.range(angles.length - 1).every(i => angles[i].commonLineBA(angles[i + 1]))) {
                const [first_angle, last_angle] = [angles[0], plane_ts.last(angles)];
                if (first_angle.lineA == last_angle.lineB && first_angle.directionA == -last_angle.directionB) {
                    const text = angles.map(x => x.name).join(" + ") + " = pi";
                    return await makeShapeEquationByEquationText(plane_ts.ShapeEquationReason.sum_of_angles_is_pi, angles, text);
                }
            }
        }
        return undefined;
    }
    plane_ts.makeSumOfAnglesIsPi = makeSumOfAnglesIsPi;
    async function makeSumOfAnglesIsEqual(angles_arg) {
        plane_ts.check(3 <= angles_arg.length);
        const angles_list = plane_ts.permutation(angles_arg);
        for (const angles of angles_list) {
            const outer_angle = angles[0];
            const inner_angles = angles.slice(1);
            if (outer_angle.commonLineAA(inner_angles[0]) && outer_angle.commonLineBB(plane_ts.last(inner_angles))) {
                if (plane_ts.range(inner_angles.length - 1).every(i => inner_angles[i].commonLineBA(inner_angles[i + 1]))) {
                    const text = `${outer_angle.name} = ` + inner_angles.map(x => x.name).join(" + ");
                    return await makeShapeEquationByEquationText(plane_ts.ShapeEquationReason.sum_of_angles_is_equal, angles, text);
                }
            }
        }
        return undefined;
    }
    plane_ts.makeSumOfAnglesIsEqual = makeSumOfAnglesIsEqual;
    async function makeShapeEquationByExteriorAngleTheorem(angles) {
        for (const [angle1, angle2, angle3] of plane_ts.permutation(angles)) {
            if (angle1.lineA == angle2.lineB && angle1.directionA == -angle2.directionB) {
                const intersection = plane_ts.getCommonPointOfLines(angle1.lineB, angle2.lineA);
                if (angle3.intersection == intersection) {
                    if (plane_ts.areSetsEqual([angle1.lineB, angle2.lineA], [angle3.lineA, angle3.lineB])) {
                        const text = `${angle1.name} + ${angle2.name} = ${angle3.name}`;
                        return await makeShapeEquationByEquationText(plane_ts.ShapeEquationReason.exterior_angle_theorem, angles, text);
                    }
                }
            }
        }
        return undefined;
    }
    plane_ts.makeShapeEquationByExteriorAngleTheorem = makeShapeEquationByExteriorAngleTheorem;
    async function makeSumOfTriangleQuadrilateralAngles(angles, reason) {
        let num_vertices;
        let sum_angles;
        if (reason == plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi) {
            num_vertices = 3;
            sum_angles = "pi";
        }
        else {
            num_vertices = 4;
            sum_angles = "2 * pi";
        }
        plane_ts.check(angles.length == num_vertices);
        plane_ts.check(angles.every(x => x.name != ""));
        const text = angles.map(x => x.name).join(" + ") + " = " + sum_angles;
        return await makeShapeEquationByEquationText(reason, angles, text);
    }
    plane_ts.makeSumOfTriangleQuadrilateralAngles = makeSumOfTriangleQuadrilateralAngles;
    async function makeShapeEquation(reason, shapes) {
        switch (reason) {
            case plane_ts.ShapeEquationReason.sum_of_angles_is_pi:
            case plane_ts.ShapeEquationReason.sum_of_angles_is_equal:
            case plane_ts.ShapeEquationReason.exterior_angle_theorem: {
                plane_ts.check(shapes.every(x => x instanceof plane_ts.Angle && x.name != ""), plane_ts.TT("The selected shapes are not named angles."));
                const angles = shapes;
                if (reason == plane_ts.ShapeEquationReason.exterior_angle_theorem) {
                    return await makeShapeEquationByExteriorAngleTheorem(angles);
                }
                const intersections = plane_ts.unique(angles.map(x => plane_ts.intersection));
                if (intersections.length != 1) {
                    plane_ts.msg(plane_ts.TT("The vertices of the angles do not match."));
                    return undefined;
                }
                if (reason == plane_ts.ShapeEquationReason.sum_of_angles_is_pi) {
                    return await makeSumOfAnglesIsPi(angles);
                }
                else {
                    return await makeSumOfAnglesIsEqual(angles);
                }
            }
            case plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi:
            case plane_ts.ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi: {
                plane_ts.assert(shapes.every(x => x instanceof plane_ts.Point));
                const angles = plane_ts.findAnglesInPolygon(shapes);
                return await makeSumOfTriangleQuadrilateralAngles(angles, reason);
            }
            default:
                throw new plane_ts.MyError();
        }
    }
    plane_ts.makeShapeEquation = makeShapeEquation;
    class ShapeEquation extends plane_ts.Statement {
        equation;
        textBlock;
        constructor(obj) {
            super(obj);
            this.equation = obj.equation;
            this.textBlock = makeEquationTextBlock(this, this.equation);
            if (this.reason == plane_ts.ShapeEquationReason.sum_of_angles_is_pi && this.auxiliaryShapes.length == 2) {
                plane_ts.assert(this.auxiliaryShapes.every(x => x instanceof plane_ts.Angle));
                const [angle1, angle2] = this.auxiliaryShapes;
                plane_ts.addSupplementaryAngles(angle1, angle2);
                // msg(`add-Supplementary-Angles ${angle1.name} ${angle2.name}`);
            }
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return this.textReading(plane_ts.TT(""));
        }
        show() {
            this.textBlock.show();
        }
        hide() {
            this.textBlock.hide();
        }
    }
    plane_ts.ShapeEquation = ShapeEquation;
    async function simplifyEquationTextBlock(eqText) {
        const textBlock = eqText.textBlock;
        const speech = new plane_ts.Speech();
        eqText.equation = await algebra_ts.simplify(speech, textBlock.div, eqText.equation);
        textBlock.text = eqText.equation.tex();
        textBlock.updateTextDiv();
        plane_ts.checkSupplementaryAngles(eqText.equation);
    }
    plane_ts.simplifyEquationTextBlock = simplifyEquationTextBlock;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    async function makeExprTransformByTransposition(term, textBlock, speech) {
        const [equation, term_cp] = term.cloneRoot();
        await algebra_ts.transpose(equation, term_cp, textBlock.div, speech);
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.transposition,
            equation: equation,
            terms: [term_cp]
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformByTransposition = makeExprTransformByTransposition;
    function setEqualShapes(refvars) {
        const map = new Map();
        plane_ts.View.current.allRealShapes().filter(x => x.name != "").forEach(x => map.set(x.name, x));
        const ref_shapes = refvars.map(x => map.get(x.name)).filter(x => x != undefined);
        if (ref_shapes.every(x => x instanceof plane_ts.Angle)) {
            // msg(`eq angles:${ref_shapes.map(x => x.name).join(" = ")}`);
            for (const i of plane_ts.range(ref_shapes.length - 1)) {
                const angleA = ref_shapes[i];
                const angleB = ref_shapes[i + 1];
                plane_ts.addEqualAngles(angleA, angleB);
            }
        }
    }
    /*
        a = e , b = e ⇒ a = b
    */
    async function makeExprTransformByEquality(terms, textBlocks, speech) {
        const refvars = [];
        let eq_expr;
        let roots = [];
        for (const term of terms) {
            const [equation, term_cp] = term.cloneRoot();
            if (!(term_cp instanceof plane_ts.RefVar)) {
                return undefined;
            }
            if (!equation.isEq() || equation.args.length != 2) {
                return undefined;
            }
            const term_idx = equation.args.indexOf(term_cp);
            if (term_idx == -1) {
                return undefined;
            }
            const expr = equation.args[1 - term_idx];
            if (eq_expr == undefined) {
                eq_expr = expr;
            }
            else {
                if (!eq_expr.equal(expr)) {
                    return undefined;
                }
            }
            refvars.push(term_cp);
            roots.push(term.getRoot());
        }
        for (const [idx, term] of terms.entries()) {
            term.colorName = "blue";
            plane_ts.renderKatexSub(textBlocks[idx].div, roots[idx].tex());
        }
        await plane_ts.sleep(1000);
        refvars.forEach(x => x.colorName = undefined);
        const text = refvars.map(x => x.name).join(" = ");
        const equation = parser_ts.parseMath(text);
        setEqualShapes(refvars);
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.equality,
            equation: equation,
            terms: refvars
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformByEquality = makeExprTransformByEquality;
    async function makeExprTransformByAddEquation(terms, textBlocks, speech) {
        const divs = textBlocks.map(x => x.div);
        const equation = await algebra_ts.addEquations(terms, divs, speech);
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.add_equation,
            equation: equation,
            terms
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformByAddEquation = makeExprTransformByAddEquation;
    async function makeExprTransformBySubstitution(terms, textBlocks, speech) {
        const equation = await algebra_ts.substitute(terms[0], terms[1], textBlocks[0].div, textBlocks[1].div, speech);
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.substitution,
            equation: equation,
            terms
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformBySubstitution = makeExprTransformBySubstitution;
    async function makeExprTransformByDividingEquation(root, mathText, textBlock, speech) {
        const term = parser_ts.parseMath(mathText);
        const equation = await algebra_ts.divideEquation(root, term, textBlock.div, speech);
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.dividing_equation,
            equation,
            terms: [root, term]
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformByDividingEquation = makeExprTransformByDividingEquation;
    async function makeExprTransformByArgShift(term, shift, textBlock, speech) {
        const equation = term.getRoot();
        const exprTransform = new ExprTransform({
            reason: plane_ts.ExprTransformReason.arg_shift,
            equation: equation,
            terms: [term]
        });
        return exprTransform;
    }
    plane_ts.makeExprTransformByArgShift = makeExprTransformByArgShift;
    class ExprTransform extends plane_ts.MathEntity {
        reason;
        equation;
        terms;
        textBlock;
        constructor(obj) {
            super(obj);
            this.reason = obj.reason;
            this.equation = obj.equation;
            this.terms = obj.terms;
            this.textBlock = plane_ts.makeEquationTextBlock(this, this.equation);
        }
        getProperties() {
            return super.getProperties().concat([
                "reason", "equation", "terms"
            ]);
        }
        getAllShapes(shapes) {
            super.getAllShapes(shapes);
            shapes.push(this.textBlock);
        }
        reading() {
            // msg(`empty reading:${this.constructor.name}`);
            return new Reading(this, "", []);
        }
        async speakExprTransform(speech) {
            const text = plane_ts.reasonMsg(this.reason);
            await speech.speak(text);
        }
        show() {
            this.textBlock.show();
        }
        hide() {
            this.textBlock.hide();
        }
    }
    plane_ts.ExprTransform = ExprTransform;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    class Proposition extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
            plane_ts.propositions.push(this);
        }
    }
    plane_ts.Proposition = Proposition;
    class ShapeProposition extends plane_ts.Statement {
        constructor(obj) {
            super(obj);
        }
    }
    plane_ts.ShapeProposition = ShapeProposition;
    class EquationProposition extends plane_ts.Statement {
        equation;
        textBlock;
        constructor(obj) {
            super(obj);
            this.equation = obj.equation;
            plane_ts.assert(this.selectedShapes.length == 1 && this.selectedShapes[0] instanceof plane_ts.TextBlock);
            this.textBlock = this.selectedShapes[0];
        }
    }
    plane_ts.EquationProposition = EquationProposition;
    function makeShapeProposition(reason, shapes) {
        return new ShapeProposition({
            reason,
            auxiliaryShapes: [],
            shapes,
        });
    }
    plane_ts.makeShapeProposition = makeShapeProposition;
    function makeEquationProposition(reason, mathText) {
        const equation = parser_ts.parseMath(mathText);
        plane_ts.assert(equation.isRootEq());
        return new EquationProposition({
            reason,
            auxiliaryShapes: [],
            shapes: [],
            equation
        });
    }
    plane_ts.makeEquationProposition = makeEquationProposition;
})(plane_ts || (plane_ts = {}));
///<reference path="inference.ts" />
///<reference path="deduction/length_equality.ts" />
///<reference path="deduction/angle_equality.ts" />
///<reference path="deduction/quadrilateral.ts" />
///<reference path="deduction/parallel_detector.ts" />
///<reference path="deduction/triangle_similarity.ts" />
///<reference path="deduction/triangle_detector.ts" />
///<reference path="deduction/shape_equation.ts" />
///<reference path="deduction/expr_transform.ts" />
///<reference path="deduction/proposition.ts" />
///<reference path="constraint.ts" />
var plane_ts;
(function (plane_ts) {
    //
    function addShapeSetRelations(view, shape) {
        view.addShape(shape);
        shape.setRelations();
    }
    class shapesSelector {
        numShapes;
        shapes = [];
        constructor(numShapes) {
            this.numShapes = numShapes;
        }
        clear() {
            this.shapes = [];
        }
        async click(view, position, shape) {
            if (this.isInstanceof(shape)) {
                this.shapes.push(shape);
            }
        }
        drawTool(view) {
            this.shapes.forEach(x => x.draw());
        }
        done() {
            return this.shapes.length == this.numShapes;
        }
    }
    class LinesSelector extends shapesSelector {
        isInstanceof(shape) {
            return shape instanceof plane_ts.AbstractLine;
        }
    }
    class CircleArcsSelector extends shapesSelector {
        isInstanceof(shape) {
            return shape instanceof plane_ts.CircleArc;
        }
    }
    class PolygonsSelector {
        numVertices;
        points = [];
        polygon;
        constructor(numVertices) {
            this.numVertices = numVertices;
        }
        clear() {
            this.points = [];
            this.polygon = undefined;
        }
        async click(view, position, shape) {
            if (shape instanceof plane_ts.Point) {
                shape.setMode(plane_ts.Mode.depend);
                this.points.push(shape);
                if (this.points.length == this.numVertices) {
                    if (this.numVertices == 3) {
                        this.polygon = new plane_ts.Triangle({
                            points: this.points,
                            lines: []
                        });
                    }
                    else if (this.numVertices == 4) {
                        this.polygon = new plane_ts.Quadrilateral({
                            points: this.points,
                            lines: []
                        });
                    }
                    else {
                        throw new plane_ts.MyError();
                    }
                }
            }
        }
        drawTool(view) {
            plane_ts.View.current.canvas.drawPartialPolygon(this.points, plane_ts.Mode.depend);
        }
        done() {
            return this.polygon != undefined;
        }
    }
    class TrianglePairSelector {
        selector = new PolygonsSelector(3);
        triangleA;
        triangleB;
        constructor() {
            this.selector;
        }
        triangles() {
            return [this.triangleA, this.triangleB];
        }
        clear() {
            this.selector.clear();
            this.triangleA = undefined;
            this.triangleB = undefined;
        }
        async click(view, position, shape) {
            this.selector.click(view, position, shape);
            if (this.selector.done()) {
                this.selector.polygon.setMode(plane_ts.Mode.depend);
                if (this.triangleA == undefined) {
                    this.triangleA = this.selector.polygon;
                }
                else {
                    this.triangleB = this.selector.polygon;
                }
                this.selector.clear();
            }
        }
        done() {
            return this.triangleA != undefined && this.triangleB != undefined;
        }
        drawTool(view) {
            this.selector.drawTool(view);
            [this.triangleA, this.triangleB].filter(x => x != undefined).forEach(x => x.draw());
        }
        areCongruentTriangles() {
            if (this.triangleA != undefined && this.triangleB != undefined) {
                return this.triangleA.isCongruent(this.triangleB);
            }
            throw new plane_ts.MyError();
        }
    }
    class QuadrilateralSelector extends PolygonsSelector {
        constructor() {
            super(4);
        }
    }
    plane_ts.linesSelector_2 = new LinesSelector(2);
    plane_ts.circleArcsSelector = new CircleArcsSelector(2);
    plane_ts.quadrilateralSelector = new QuadrilateralSelector();
    class Builder {
        static toolName;
        static tool;
        done = false;
        static async setToolByName(tool_name, record_operation) {
            Builder.toolName = tool_name;
            Builder.tool = makeToolByType(tool_name);
            if (record_operation) {
                if (tool_name != "SelectionTool" && tool_name != "RangeTool") {
                    plane_ts.View.current.addOperation(new plane_ts.ToolSelection(tool_name));
                }
            }
            await Builder.tool.init();
            if (tool_name == "RangeTool") {
                plane_ts.msg(`dump:\n${plane_ts.View.current.operations.map(x => x.dump()).join("\n")}`);
            }
        }
        static setToolByShape(shape) {
            if (shape instanceof plane_ts.TriangleCongruence) {
                plane_ts.msg("set Triangle Congruence Builder");
                Builder.tool = new TriangleCongruenceBuilder(shape);
            }
            else if (shape instanceof plane_ts.LengthEquality) {
                plane_ts.msg("set Equal Length Builder");
                Builder.tool = new LengthEqualityBuilder(shape);
            }
            else {
                plane_ts.msg("set Statement Builder");
                Builder.tool = new StatementBuilder(shape);
            }
        }
        static async builderResetTool(view) {
            while (view.operations.length != 0) {
                if (plane_ts.last(view.operations) instanceof plane_ts.ToolSelection) {
                    break;
                }
                view.operations.pop();
            }
            view.operations.forEach(x => plane_ts.msg(x.dump()));
            Builder.tool.resetTool(undefined);
            await Builder.setToolByName(Builder.toolName, false);
        }
        static cancelTool() {
            const view = plane_ts.View.current;
            while (view.operations.length != 0) {
                const last_operation = plane_ts.last(view.operations);
                if (last_operation instanceof plane_ts.ToolSelection) {
                    plane_ts.msg(`cancel tool:${last_operation.toolName}`);
                    break;
                }
                view.operations.pop();
            }
        }
        async init() {
        }
        async click(view, position, shape) {
        }
        async finish(view) {
            throw new plane_ts.MyError();
        }
        pointerdown(event, view, position, shape) {
        }
        pointermove(event, view, position, shape) {
        }
        pointerup(event, view, position, shape) {
        }
        getPosition(position, shape) {
            if (shape instanceof plane_ts.Point) {
                return shape.position;
            }
            else {
                return position;
            }
        }
        makePointOnClick(view, position, shape) {
            if (shape instanceof plane_ts.Point) {
                return shape;
            }
            else {
                const point = plane_ts.Point.fromArgs(position);
                if (shape instanceof plane_ts.AbstractLine || shape instanceof plane_ts.CircleArc) {
                    point.setBound(shape);
                }
                if (view.operations.length != 0) {
                    const last_operation = plane_ts.last(view.operations);
                    if (last_operation instanceof plane_ts.ClickShape && last_operation.position === position) {
                        last_operation.createdPoint = point;
                        // msg(`point is created.`);
                    }
                }
                return point;
            }
        }
        drawTool(view) {
        }
        drawPendingShape(shape) {
            const shapes = [];
            shape.getAllShapes(shapes);
            shapes.forEach(x => x.draw());
        }
        resetTool(shape) {
            if (plane_ts.View.current.operations.length != 0) {
                const last_operation = plane_ts.last(plane_ts.View.current.operations);
                last_operation.shapesLength = plane_ts.View.current.shapes.length;
                last_operation.relationLogsLength = plane_ts.View.current.relationLogs.length;
            }
            plane_ts.View.current.resetMode();
            if (shape != undefined) {
                plane_ts.showProperty(shape, 0);
            }
            this.done = true;
        }
        pendingShapes() {
            return [];
        }
    }
    plane_ts.Builder = Builder;
    class SelectionTool extends Builder {
        downOffset;
        selectedShape;
        minSave;
        maxSave;
        oldPosition;
        async click(view, position, shape) {
            plane_ts.msg(`selection click:${position}`);
            this.resetTool(undefined);
            if (shape != undefined) {
                shape.setMode(plane_ts.Mode.target);
                plane_ts.showProperty(shape, 0);
            }
        }
        pointerdown(event, view, position, shape) {
            plane_ts.msg(`selection pointerdown:${position}`);
            this.downOffset = new plane_ts.Vec2(event.offsetX, event.offsetY);
            this.selectedShape = shape;
            this.minSave = view.min.copy();
            this.maxSave = view.max.copy();
            if (shape != undefined) {
                shape.shapePointerdown(position);
                if (shape instanceof plane_ts.Point) {
                    this.oldPosition = shape.position;
                }
            }
        }
        pointermove(event, view, position, shape) {
            if (this.downOffset != undefined) {
                const offset = new plane_ts.Vec2(event.offsetX, event.offsetY);
                const diff = view.fromPixScale(offset.sub(this.downOffset));
                diff.y *= -1;
                if (this.selectedShape == undefined) {
                    view.min = this.minSave.sub(diff);
                    view.max = this.maxSave.sub(diff);
                    view.allRealShapes().forEach(x => x.updateCaption());
                }
                else {
                    view.changed.clear();
                    this.selectedShape.shapePointermove(position, diff);
                    view.updateShapes();
                }
                view.dirty = true;
            }
        }
        pointerup(event, view, position, shape) {
            plane_ts.msg(`selection pointerup:${position}`);
            if (this instanceof MotionBuilder && this.selectedShape instanceof plane_ts.Point && !this.selectedShape.position.equals(this.oldPosition)) {
                plane_ts.msg(`position changed:`);
                this.animation.addPropertyChange(this.selectedShape, "position", this.oldPosition, this.selectedShape.position);
            }
            this.downOffset = undefined;
            this.selectedShape = undefined;
            this.minSave = undefined;
            this.maxSave = undefined;
        }
    }
    plane_ts.SelectionTool = SelectionTool;
    class RangeTool extends Builder {
        selections = [];
        downPosition;
        movePosition;
        async click(view, position, shape) {
            plane_ts.msg("range click");
        }
        pointerdown(event, view, position, shape) {
            plane_ts.msg("range down");
            this.resetTool(undefined);
            this.downPosition = position;
            this.movePosition = undefined;
            this.selections = [];
        }
        pointermove(event, view, position, shape) {
            plane_ts.msg(`move ${event.buttons}`);
            if (this.downPosition == undefined || event.buttons != 1) {
                return;
            }
            this.movePosition = position;
            const [min_x, min_y, max_x, max_y] = plane_ts.MinMaxXY(this.downPosition, this.movePosition);
            this.selections = [];
            for (const shape of plane_ts.View.current.allShapes()) {
                if (shape instanceof plane_ts.Point) {
                    const pos = shape.position;
                    if (min_x <= pos.x && pos.x <= max_x && min_y <= pos.y && pos.y <= max_y) {
                        this.selections.push(shape);
                        shape.setMode(plane_ts.Mode.depend);
                    }
                }
            }
            view.dirty = true;
        }
        pointerup(event, view, position, shape) {
            plane_ts.msg("range up");
            if (this.selections.length != 0) {
                plane_ts.showProperty(this.selections, 0);
            }
        }
        drawTool(view) {
            if (this.downPosition == undefined || this.movePosition == undefined) {
                return;
            }
            plane_ts.View.current.canvas.drawRect(undefined, this.downPosition, this.movePosition);
        }
    }
    plane_ts.RangeTool = RangeTool;
    class PointBuilder extends Builder {
        async click(view, position, shape) {
            if (shape == undefined || shape instanceof plane_ts.AbstractLine || shape instanceof plane_ts.Circle) {
                const new_point = this.makePointOnClick(view, position, shape);
                if (shape != undefined) {
                    new_point.setBound(shape);
                }
                new_point.updateCaption();
                addShapeSetRelations(view, new_point);
                this.resetTool(new_point);
            }
        }
    }
    plane_ts.PointBuilder = PointBuilder;
    class MidpointBuilder extends Builder {
        pointA;
        async click(view, position, shape) {
            if (this.pointA == undefined) {
                if (shape instanceof plane_ts.Point) {
                    this.pointA = shape;
                    this.pointA.setMode(plane_ts.Mode.depend);
                }
            }
            else if (shape instanceof plane_ts.Point) {
                const mid_point = new plane_ts.Midpoint({ position: plane_ts.Vec2.zero(), pointA: this.pointA, pointB: shape });
                const lengthSymbolA = new plane_ts.LengthSymbol({ pointA: this.pointA, pointB: mid_point, lengthKind: 0 });
                const lengthSymbolB = new plane_ts.LengthSymbol({ pointA: mid_point, pointB: shape, lengthKind: 0 });
                const lengthEquality = new plane_ts.LengthEquality({
                    reason: plane_ts.LengthEqualityReason.midpoint,
                    auxiliaryShapes: [mid_point],
                    shapes: [lengthSymbolA, lengthSymbolB]
                });
                addShapeSetRelations(view, mid_point);
                addShapeSetRelations(view, lengthSymbolA);
                addShapeSetRelations(view, lengthSymbolB);
                addShapeSetRelations(view, lengthEquality);
                this.pointA = undefined;
                this.resetTool(mid_point);
            }
        }
    }
    class CircleByPointBuilder extends Builder {
        center;
        position;
        async click(view, position, shape) {
            if (this.center == undefined) {
                this.center = this.makePointOnClick(view, position, shape);
                this.center.setMode(plane_ts.Mode.depend);
                this.position = position;
            }
            else {
                const point = this.makePointOnClick(view, position, shape);
                const circle = new plane_ts.CircleByPoint({ center: this.center, point });
                addShapeSetRelations(view, circle);
                this.resetTool(circle);
                this.center = undefined;
            }
        }
        pointermove(event, view, position, shape) {
            this.position = position;
            plane_ts.View.current.dirty = true;
        }
        drawTool(view) {
            if (this.center != undefined) {
                const radius = this.position.distance(this.center.position);
                plane_ts.View.current.canvas.drawCircleRaw(this.center.position, radius, plane_ts.fgColor, plane_ts.defaultLineWidth);
            }
        }
    }
    class CircleByRadiusBuilder extends Builder {
        center;
        position;
        async click(view, position, shape) {
            if (this.center == undefined) {
                this.center = this.makePointOnClick(view, position, shape);
                this.center.setMode(plane_ts.Mode.depend);
                this.position = this.center.position;
            }
            else {
                if (shape instanceof plane_ts.LengthSymbol) {
                    const circle = new plane_ts.CircleByRadius({ center: this.center, lengthSymbol: shape });
                    addShapeSetRelations(view, circle);
                    this.center = undefined;
                    this.position = undefined;
                    this.resetTool(circle);
                }
            }
        }
        pointermove(event, view, position, shape) {
            if (this.center != undefined) {
                this.position = this.getPosition(position, shape);
                plane_ts.View.current.dirty = true;
            }
        }
        drawTool(view) {
            if (this.center != undefined) {
                const radius = this.center.position.distance(this.position);
                plane_ts.View.current.canvas.drawCircleRaw(this.center.position, radius, plane_ts.fgColor, plane_ts.defaultLineWidth);
            }
        }
    }
    class EllipseBuilder extends Builder {
        center;
        xPoint;
        radiusY = 0;
        async click(view, position, shape) {
            if (this.center == undefined) {
                this.center = this.makePointOnClick(view, position, shape);
                this.center.setMode(plane_ts.Mode.depend);
            }
            else if (this.xPoint == undefined) {
                this.xPoint = this.makePointOnClick(view, position, shape);
                this.xPoint.setMode(plane_ts.Mode.depend);
            }
            else {
                this.radiusY = this.getRadiusY(position);
                const ellipse = new plane_ts.Ellipse({ center: this.center, xPoint: this.xPoint, radiusY: this.radiusY });
                addShapeSetRelations(view, ellipse);
                this.resetTool(ellipse);
                this.center = undefined;
                this.xPoint = undefined;
            }
        }
        pointermove(event, view, position, shape) {
            if (this.center != undefined && this.xPoint != undefined) {
                this.radiusY = this.getRadiusY(position);
            }
        }
        getRadiusY(position) {
            if (this.center == undefined || this.xPoint == undefined) {
                throw new plane_ts.MyError();
            }
            const foot = plane_ts.calcFootFrom2Pos(position, this.center.position, this.xPoint.position);
            const radius_y = foot.distance(position);
            return radius_y;
        }
    }
    class ArcByPointBuilder extends Builder {
        center;
        pointA;
        lastPosition;
        async click(view, position, shape) {
            if (this.center == undefined) {
                this.center = this.makePointOnClick(view, position, shape);
                this.center.setMode(plane_ts.Mode.depend);
            }
            else if (this.pointA == undefined) {
                this.pointA = this.makePointOnClick(view, position, shape);
                this.pointA.setMode(plane_ts.Mode.depend);
                this.lastPosition = position;
            }
            else {
                const pointB = this.makePointOnClick(view, position, shape);
                const arc = new plane_ts.ArcByPoint({ center: this.center, pointA: this.pointA, pointB });
                addShapeSetRelations(view, arc);
                this.resetTool(arc);
                this.center = undefined;
                this.pointA = undefined;
            }
        }
        pointermove(event, view, position, shape) {
            this.lastPosition = position;
            view.dirty = true;
        }
        drawTool(view) {
            [this.center, this.pointA].filter(x => x != undefined).forEach(x => x.draw());
            if (this.pointA != undefined) {
                const radius = this.center.position.distance(this.pointA.position);
                const [startAngle, endAngle] = plane_ts.Arc.getAngles(this.center, this.pointA, this.lastPosition);
                plane_ts.View.current.canvas.drawArcRaw(this.center.position, radius, startAngle, endAngle, plane_ts.fgColor, plane_ts.defaultLineWidth);
            }
        }
    }
    class ArcByRadiusBuilder extends Builder {
        center;
        lengthSymbol;
        circle;
        pointA;
        position;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.LengthSymbol) {
                this.lengthSymbol = shape;
                shape.setMode(plane_ts.Mode.depend);
                this.circle = undefined;
            }
            else if (shape instanceof plane_ts.CircleArc) {
                this.circle = shape;
                shape.setMode(plane_ts.Mode.depend);
                this.lengthSymbol = undefined;
            }
            else if (this.center == undefined) {
                this.center = this.makePointOnClick(view, position, shape);
                this.center.setMode(plane_ts.Mode.depend);
            }
            else if ((this.lengthSymbol != undefined || this.circle != undefined) && this.center != undefined) {
                this.position = position;
                if (this.pointA == undefined) {
                    this.pointA = this.makePointOnClick(view, position, shape);
                    this.pointA.setMode(plane_ts.Mode.depend);
                }
                else {
                    const [startAngle, endAngle] = plane_ts.Arc.getAngles(this.center, this.pointA, position);
                    let arc;
                    if (this.lengthSymbol != undefined) {
                        arc = new plane_ts.ArcByLengthSymbol({ center: this.center, lengthSymbol: this.lengthSymbol, startAngle, endAngle });
                    }
                    else {
                        arc = new plane_ts.ArcByCircle({ center: this.center, circle: this.circle, startAngle, endAngle });
                    }
                    addShapeSetRelations(view, arc);
                    this.center = undefined;
                    this.lengthSymbol = undefined;
                    this.circle = undefined;
                    this.pointA = undefined;
                    this.resetTool(arc);
                }
            }
        }
        pointermove(event, view, position, shape) {
            if (this.pointA != undefined) {
                this.position = position;
                view.dirty = true;
            }
        }
        drawTool(view) {
            [this.center, this.lengthSymbol, this.circle, this.pointA].filter(x => x != undefined).forEach(x => x.draw());
            if ((this.lengthSymbol != undefined || this.circle != undefined) && this.center != undefined && this.pointA != undefined) {
                const radius = (this.lengthSymbol != undefined ? this.lengthSymbol.length() : this.circle.radius());
                const [startAngle, endAngle] = plane_ts.Arc.getAngles(this.center, this.pointA, this.position);
                plane_ts.View.current.canvas.drawArcRaw(this.center.position, radius, startAngle, endAngle, plane_ts.fgColor, plane_ts.defaultLineWidth);
            }
        }
    }
    class LineByPointsBuilder extends Builder {
        pointA;
        position;
        async click(view, position, shape) {
            if (this.pointA == undefined) {
                this.pointA = this.makePointOnClick(view, position, shape);
                this.pointA.setMode(plane_ts.Mode.depend);
                this.position = position;
            }
            else {
                const pointB = this.makePointOnClick(view, position, shape);
                let line;
                if (this instanceof LineSegmentBuilder) {
                    line = plane_ts.makeLineSegment(this.pointA, pointB);
                }
                else {
                    line = plane_ts.makeRay(this.pointA, pointB);
                }
                addShapeSetRelations(view, line);
                this.pointA = undefined;
                this.position = undefined;
                this.resetTool(line);
            }
        }
        pointermove(event, view, position, shape) {
            if (this.pointA != undefined) {
                if (shape instanceof plane_ts.Point) {
                    this.position = shape.position;
                }
                else {
                    this.position = position;
                }
                view.dirty = true;
            }
        }
        drawTool(view) {
            if (this.pointA != undefined) {
                this.pointA.draw();
                view.canvas.drawLineRaw(this.pointA.position, this.position, plane_ts.fgColor, plane_ts.defaultLineWidth);
            }
        }
    }
    class LineSegmentBuilder extends LineByPointsBuilder {
    }
    class PolygonBuilder extends Builder {
        points = [];
        lines = [];
        lastPosition;
        pendingShapes() {
            return this.points;
        }
        async click(view, position, shape) {
            const point = this.makePointOnClick(view, position, shape);
            if (this.points.length != 0) {
                const pointA = plane_ts.last(this.points);
                let line = plane_ts.getCommonLineOfPoints(pointA, point);
                if (line == undefined) {
                    line = plane_ts.makeLineSegment(pointA, point);
                }
                this.lines.push(line);
            }
            if (3 <= this.points.length && this.points[0] == point) {
                const polygon = new plane_ts.Polygon({ points: this.points, lines: this.lines });
                addShapeSetRelations(view, polygon);
                this.resetTool(polygon);
                this.points = [];
                this.lines = [];
            }
            else {
                point.setMode(plane_ts.Mode.depend);
                this.points.push(point);
            }
        }
        pointermove(event, view, position, shape) {
            if (this.points.length != 0) {
                this.lastPosition = position;
                plane_ts.View.current.dirty = true;
            }
        }
        drawTool(view) {
            if (this.points.length != 0 && this.lastPosition != undefined) {
                this.points.forEach(x => x.draw());
                for (const [idx, point] of this.points.entries()) {
                    let position;
                    if (idx + 1 < this.points.length) {
                        position = this.points[idx + 1].position;
                    }
                    else {
                        position = this.lastPosition;
                    }
                    view.canvas.drawLineRaw(point.position, position, plane_ts.dependColor, plane_ts.defaultLineWidth);
                }
            }
        }
    }
    class ParallelLineBuilder extends Builder {
        line;
        point;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.Point) {
                this.point = this.makePointOnClick(view, position, shape);
                this.point.setMode(plane_ts.Mode.depend);
            }
            else if (shape instanceof plane_ts.AbstractLine) {
                this.line = shape;
                this.line.setMode(plane_ts.Mode.depend);
            }
            if (this.line != undefined && this.point != undefined) {
                const parallel_line = new plane_ts.ParallelLine({ lineKind: plane_ts.LineKind.line, pointA: this.point, line: this.line });
                addShapeSetRelations(view, parallel_line);
                this.line = undefined;
                this.point = undefined;
                this.resetTool(parallel_line);
            }
        }
        pointermove(event, view, position, shape) {
        }
    }
    class PerpendicularBuilder extends Builder {
        point;
        line;
        async click(view, position, shape) {
            if (this.point == undefined && shape instanceof plane_ts.Point) {
                this.point = this.makePointOnClick(view, position, shape);
                this.point.setMode(plane_ts.Mode.depend);
            }
            else if (shape instanceof plane_ts.AbstractLine) {
                this.line = shape;
            }
            if (this.point != undefined && this.line != undefined) {
                const foot = plane_ts.Point.fromArgs(plane_ts.Vec2.nan());
                const perpendicular = new plane_ts.FootOfPerpendicular({ lineKind: 3, pointA: this.point, line: this.line, foot });
                addShapeSetRelations(view, perpendicular);
                this.point = undefined;
                this.line = undefined;
                this.resetTool(perpendicular);
            }
        }
    }
    class PerpendicularLineBuilder extends Builder {
        line;
        pointA;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.AbstractLine) {
                this.line = shape;
            }
            else if (shape instanceof plane_ts.Point) {
                this.pointA = shape;
            }
            if (this.line != undefined && this.pointA != undefined) {
                if (this.line.includesPoint(this.pointA)) {
                    const line = new plane_ts.PerpendicularLine({ lineKind: plane_ts.LineKind.line, line: this.line, pointA: this.pointA });
                    addShapeSetRelations(view, line);
                    this.line = undefined;
                    this.pointA = undefined;
                    this.resetTool(line);
                }
                else {
                    plane_ts.msg("The point is not on the line.");
                }
            }
        }
    }
    class IntersectionBuilder extends Builder {
        shape1;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.AbstractLine || shape instanceof plane_ts.CircleArc) {
                if (this.shape1 == undefined) {
                    this.shape1 = shape;
                    this.shape1.setMode(plane_ts.Mode.depend);
                }
                else {
                    this.shape1.setMode(plane_ts.Mode.none);
                    let new_shape;
                    if (this.shape1 instanceof plane_ts.AbstractLine && shape instanceof plane_ts.AbstractLine) {
                        const [lineA, lineB] = [this.shape1, shape];
                        const position = plane_ts.calcLineLineIntersection(lineA, lineB);
                        new_shape = new plane_ts.LineLineIntersection({ lineA, lineB, position });
                    }
                    else if (this.shape1 instanceof plane_ts.CircleArc && shape instanceof plane_ts.CircleArc) {
                        const pointA = plane_ts.Point.fromArgs(plane_ts.Vec2.zero());
                        const pointB = plane_ts.Point.fromArgs(plane_ts.Vec2.zero());
                        new_shape = new plane_ts.ArcArcIntersection({ arc1: this.shape1, arc2: shape, pointA, pointB });
                    }
                    else {
                        let line;
                        let circle;
                        if (this.shape1 instanceof plane_ts.AbstractLine) {
                            line = this.shape1;
                            circle = shape;
                        }
                        else {
                            circle = this.shape1;
                            line = shape;
                        }
                        const pointA = plane_ts.Point.fromArgs(plane_ts.Vec2.zero());
                        const pointB = plane_ts.Point.fromArgs(plane_ts.Vec2.zero());
                        new_shape = new plane_ts.LineArcIntersection({ line, arc: circle, pointA, pointB });
                    }
                    addShapeSetRelations(view, new_shape);
                    this.shape1 = undefined;
                    this.resetTool(new_shape);
                }
            }
        }
    }
    class CirclePointTangentBuilder extends Builder {
        circle;
        point;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.Circle) {
                this.circle = shape;
            }
            if (shape instanceof plane_ts.Point) {
                this.point = this.makePointOnClick(view, position, shape);
            }
            if (this.circle != undefined && this.point != undefined) {
                const tangent = new plane_ts.CirclePointTangent({ circle: this.circle, point: this.point });
                addShapeSetRelations(view, tangent);
                this.circle = undefined;
                this.point = undefined;
                this.resetTool(tangent);
            }
        }
    }
    class CircleCircleTangentBuilder extends Builder {
        circle;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.Circle) {
                if (this.circle == undefined) {
                    this.circle = shape;
                }
                else {
                    const tangent = new plane_ts.CircleCircleTangent({ circle1: this.circle, circle2: shape });
                    addShapeSetRelations(view, tangent);
                    this.circle = undefined;
                    this.resetTool(tangent);
                }
            }
        }
    }
    class AbstractAngleBuilder extends Builder {
        line1;
        pos1;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.AbstractLine) {
                if (this.line1 == undefined) {
                    this.line1 = shape;
                    this.line1.setMode(plane_ts.Mode.depend);
                    this.pos1 = position;
                }
                else {
                    const [lineA, pos1, lineB, pos2] = [this.line1, this.pos1, shape, position];
                    lineB.setMode(plane_ts.Mode.depend);
                    lineA.calc();
                    lineB.calc();
                    const common_point = plane_ts.getCommonPointOfLines(lineA, lineB);
                    if (common_point == undefined) {
                        throw new plane_ts.MyError();
                    }
                    const directionA = Math.sign(pos1.sub(common_point.position).dot(lineA.e));
                    const directionB = Math.sign(pos2.sub(common_point.position).dot(lineB.e));
                    let target;
                    if (this instanceof AngleBuilder) {
                        let angleMark = 1;
                        if (plane_ts.isPerpendicular(lineA, lineB)) {
                            angleMark = plane_ts.Angle.RightAngleMark;
                        }
                        target = new plane_ts.Angle({ angleMark, lineA, directionA, lineB, directionB });
                        target.calc();
                        addShapeSetRelations(view, target);
                    }
                    else {
                        target = new plane_ts.AngleBisector({ lineKind: 0, lineA, directionA, lineB, directionB });
                        addShapeSetRelations(view, target);
                        const angleA = new plane_ts.Angle({ angleMark: 1, lineA, directionA, lineB: target, directionB: 1 });
                        const angleB = new plane_ts.Angle({ angleMark: 1, lineA: target, directionA: 1, lineB, directionB });
                        const angleEquality = plane_ts.makeAngleEqualityByAngleBisector(angleA, angleB, target);
                        addShapeSetRelations(view, angleA);
                        addShapeSetRelations(view, angleB);
                        addShapeSetRelations(view, angleEquality);
                    }
                    this.line1 = undefined;
                    this.resetTool(target);
                }
            }
        }
    }
    class AngleBuilder extends AbstractAngleBuilder {
    }
    class AngleBisectorBuilder extends AbstractAngleBuilder {
    }
    class DimensionLineBuilder extends Builder {
        pointA;
        pointB;
        dimLine;
        async click(view, position, shape) {
            if (this.dimLine == undefined) {
                if (shape instanceof plane_ts.Point) {
                    if (this.pointA == undefined) {
                        this.pointA = this.makePointOnClick(view, position, shape);
                        this.pointA.setMode(plane_ts.Mode.depend);
                    }
                    else {
                        this.pointB = this.makePointOnClick(view, position, shape);
                        this.pointB.setMode(plane_ts.Mode.depend);
                        const caption = new plane_ts.TextBlock({ text: "\\int \\frac{1}{2}", isTex: true, offset: plane_ts.Vec2.zero() });
                        this.dimLine = new plane_ts.DimensionLine({ caption, pointA: this.pointA, pointB: this.pointB, shift: 0 });
                    }
                    plane_ts.View.current.dirty = true;
                }
            }
            else {
                addShapeSetRelations(view, this.dimLine);
                this.resetTool(this.dimLine);
                this.pointA = undefined;
                this.pointB = undefined;
                this.dimLine = undefined;
            }
        }
        pointermove(event, view, position, shape) {
            if (this.dimLine != undefined) {
                const normal = this.pointB.sub(this.pointA).rot90().unit();
                const shift = position.sub(this.pointB.position).dot(normal);
                this.dimLine.setShift(shift);
            }
        }
        drawTool(view) {
            if (this.dimLine != undefined) {
                this.dimLine.draw();
            }
        }
    }
    class LengthSymbolBuilder extends LineByPointsBuilder {
        async click(view, position, shape) {
            if (shape instanceof plane_ts.LineByPoints) {
                const symbol = new plane_ts.LengthSymbol({ pointA: shape.pointA, pointB: shape.pointB, lengthKind: 0 });
                addShapeSetRelations(view, symbol);
            }
            else {
                if (this.pointA == undefined) {
                    this.pointA = this.makePointOnClick(view, position, shape);
                    this.position = position;
                }
                else {
                    const clicked_point = this.makePointOnClick(view, position, shape);
                    const [pointA, pointB] = plane_ts.sortShape([this.pointA, clicked_point]);
                    let line = plane_ts.getCommonLineOfPoints(pointA, pointB);
                    if (line == undefined) {
                        line = plane_ts.makeLineSegment(pointA, pointB);
                        // msg(`make line:${pointA.id} - ${line.id} - ${pointB.id}`);
                        addShapeSetRelations(view, line);
                    }
                    const symbol = new plane_ts.LengthSymbol({ pointA, pointB, lengthKind: 0 });
                    addShapeSetRelations(view, symbol);
                    this.pointA = undefined;
                    this.position = undefined;
                    this.resetTool(symbol);
                }
            }
        }
    }
    class TextBlockBuilder extends Builder {
        async click(view, position, shape) {
            const text_block = new plane_ts.TextBlock({ text: "Text", isTex: false, offset: position });
            text_block.updateTextPosition();
            addShapeSetRelations(view, text_block);
            this.resetTool(text_block);
        }
    }
    class AssumptionBuilder extends Builder {
        async init() {
            const view = plane_ts.View.current;
            const mathText = plane_ts.inputTextPrompt(plane_ts.TT("Enter a mathematical expression."));
            if (mathText == null) {
                Builder.cancelTool();
            }
            else {
                const equation = parser_ts.parseMath(mathText);
                let assumption;
                assumption = new plane_ts.Assumption({ equation });
                addShapeSetRelations(view, assumption);
            }
        }
    }
    plane_ts.AssumptionBuilder = AssumptionBuilder;
    class StatementBuilder extends Builder {
        statement;
        specifiedShapes = [];
        constructor(statement) {
            super();
            if (statement == undefined) {
                this.statement = new plane_ts.Statement({ shapes: [] });
                plane_ts.View.current.addShape(this.statement);
            }
            else {
                this.statement = statement;
            }
            plane_ts.showProperty(this.statement, 0);
        }
        async clickWithMouseEvent(event, view, position, shape) {
            if (shape != undefined) {
                let selected_shape = shape;
                if (event.ctrlKey) {
                    if (shape instanceof plane_ts.Shape) {
                        shape.setMode(plane_ts.Mode.depend);
                        this.specifiedShapes.push(shape);
                    }
                    return;
                }
                else {
                    if (this.specifiedShapes.length != 0) {
                        if (shape instanceof plane_ts.Shape) {
                            this.specifiedShapes.push(shape);
                            this.statement.selectedShapes.push(...this.specifiedShapes);
                            this.specifiedShapes.forEach(x => x.setMode(plane_ts.Mode.none));
                            this.specifiedShapes = [];
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        this.statement.selectedShapes.push(shape);
                    }
                }
                const button = makeShapeButton(selected_shape, false);
                button.button.style.position = "";
                if (plane_ts.ShapesProperty.one.buttonsUI instanceof layout_ts.Grid) {
                    plane_ts.ShapesProperty.one.buttonsUI.addChild(button);
                }
                else {
                    throw new plane_ts.MyError();
                }
            }
        }
    }
    plane_ts.StatementBuilder = StatementBuilder;
    class TriangleCongruenceSimilarityBuilder extends Builder {
        trianglePairSelector = new TrianglePairSelector();
        async click(view, position, shape) {
            this.trianglePairSelector.click(view, position, shape);
            if (this.trianglePairSelector.done()) {
                const triangle_statement = this.makeTriangleCongruenceSimilarity(this.trianglePairSelector.triangleA, this.trianglePairSelector.triangleB);
                if (triangle_statement != undefined) {
                    addShapeSetRelations(view, triangle_statement);
                    this.resetTool(triangle_statement);
                }
                else {
                    this.resetTool(undefined);
                }
                this.trianglePairSelector.clear();
            }
        }
        drawTool(view) {
            this.trianglePairSelector.drawTool(view);
        }
    }
    class TriangleCongruenceBuilder extends TriangleCongruenceSimilarityBuilder {
        constructor(triangleCongruence) {
            super();
        }
        makeTriangleCongruenceSimilarity(A, B) {
            return plane_ts.makeTriangleCongruence(A, B);
        }
    }
    plane_ts.TriangleCongruenceBuilder = TriangleCongruenceBuilder;
    class TriangleSimilarityBuilder extends TriangleCongruenceSimilarityBuilder {
        constructor(triangleSimilarity) {
            super();
        }
        makeTriangleCongruenceSimilarity(A, B) {
            return plane_ts.makeTriangleSimilarity(A, B);
        }
    }
    plane_ts.TriangleSimilarityBuilder = TriangleSimilarityBuilder;
    class LengthEqualityBuilder extends Builder {
        lengthSymbolA;
        lengthSymbolB;
        lengthEqualityReason;
        trianglePairSelector;
        constructor(lengthEquality) {
            super();
        }
        async init() {
            this.lengthEqualityReason = await plane_ts.showMenu(plane_ts.LengthEqualityReason);
        }
        clear() {
            this.lengthSymbolA = undefined;
            this.lengthSymbolB = undefined;
            this.lengthEqualityReason = plane_ts.LengthEqualityReason.none;
        }
        async click(view, position, shape) {
            let lengthEquality;
            if (shape instanceof plane_ts.LengthSymbol) {
                if (this.lengthSymbolA == undefined) {
                    this.lengthSymbolA = shape;
                    shape.setMode(plane_ts.Mode.depend);
                }
                else if (this.lengthSymbolB == undefined) {
                    this.lengthSymbolB = shape;
                    shape.setMode(plane_ts.Mode.depend);
                    switch (this.lengthEqualityReason) {
                        case plane_ts.LengthEqualityReason.radii_equal:
                            lengthEquality = plane_ts.makeEqualLengthByRadiiEqual(this.lengthSymbolA, this.lengthSymbolB);
                            break;
                        case plane_ts.LengthEqualityReason.common_circle:
                            plane_ts.showPrompt(plane_ts.TT("click the common circle."));
                            break;
                        case plane_ts.LengthEqualityReason.parallel_lines_distance:
                            plane_ts.linesSelector_2.clear();
                            plane_ts.showPrompt(plane_ts.TT("click two parallel lines."));
                            break;
                        case plane_ts.LengthEqualityReason.congruent_triangles:
                            lengthEquality = plane_ts.makeEqualLengthByCongruentTriangles(this.lengthSymbolA, this.lengthSymbolB);
                            break;
                        case plane_ts.LengthEqualityReason.parallelogram_opposite_sides:
                            lengthEquality = plane_ts.makeEqualLengthByParallelogramOppositeSides(this.lengthSymbolA, this.lengthSymbolB);
                            break;
                        case plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection:
                            lengthEquality = plane_ts.makeEqualLengthByParallelogramDiagonalBisection(this.lengthSymbolA, this.lengthSymbolB);
                            break;
                        case plane_ts.LengthEqualityReason.equivalence_class:
                            lengthEquality = plane_ts.makeEqualLengthByEquivalenceClass(this.lengthSymbolA, this.lengthSymbolB);
                            break;
                        case plane_ts.LengthEqualityReason.not_used:
                        default:
                            throw new plane_ts.MyError();
                    }
                }
            }
            else {
                if (this.lengthSymbolA == undefined || this.lengthSymbolB == undefined) {
                    throw new plane_ts.MyError();
                }
                switch (this.lengthEqualityReason) {
                    // case LengthEqualityReason.radii_equal:
                    case plane_ts.LengthEqualityReason.common_circle:
                        if (shape instanceof plane_ts.CircleArc) {
                            lengthEquality = plane_ts.makeEqualLengthByCommonCircle(this.lengthSymbolA, this.lengthSymbolB, shape);
                        }
                        break;
                    case plane_ts.LengthEqualityReason.parallel_lines_distance:
                        plane_ts.linesSelector_2.click(view, position, shape);
                        if (plane_ts.linesSelector_2.done()) {
                            lengthEquality = plane_ts.makeEqualLengthByParallelLines(this.lengthSymbolA, this.lengthSymbolB, plane_ts.linesSelector_2.shapes);
                            plane_ts.linesSelector_2.clear();
                        }
                        break;
                    // case LengthEqualityReason.circle_by_radius:
                    case plane_ts.LengthEqualityReason.congruent_triangles:
                        break;
                    case plane_ts.LengthEqualityReason.parallelogram_opposite_sides:
                        break;
                    case plane_ts.LengthEqualityReason.parallelogram_diagonal_bisection:
                        break;
                    default:
                        throw new plane_ts.MyError();
                }
            }
            if (lengthEquality != undefined) {
                addShapeSetRelations(view, lengthEquality);
                this.resetTool(lengthEquality);
                this.clear();
            }
        }
        drawTool(view) {
            if (this.trianglePairSelector != undefined) {
                this.trianglePairSelector.drawTool(view);
            }
        }
    }
    plane_ts.LengthEqualityBuilder = LengthEqualityBuilder;
    class AngleEqualityBuilder extends Builder {
        angleA;
        angleB;
        angleEqualityReason = plane_ts.AngleEqualityReason.none;
        trianglePairSelector;
        constructor(angleEquality) {
            super();
        }
        async init() {
            this.angleEqualityReason = await plane_ts.showMenu(plane_ts.AngleEqualityReason);
        }
        clear() {
            this.angleA = undefined;
            this.angleB = undefined;
            this.angleEqualityReason = plane_ts.AngleEqualityReason.none;
            this.trianglePairSelector = undefined;
        }
        async click(view, position, shape) {
            let angleEquality;
            if (this.angleA == undefined || this.angleB == undefined) {
                if (shape instanceof plane_ts.Angle) {
                    if (this.angleA == undefined) {
                        this.angleA = shape;
                        shape.setMode(plane_ts.Mode.depend);
                    }
                    else if (this.angleB == undefined) {
                        this.angleB = shape;
                        shape.setMode(plane_ts.Mode.depend);
                        switch (this.angleEqualityReason) {
                            case plane_ts.AngleEqualityReason.vertical_angles:
                                angleEquality = plane_ts.makeAngleEqualityByVertical_angles(this.angleA, this.angleB);
                                break;
                            case plane_ts.AngleEqualityReason.parallel_line_angles:
                                angleEquality = plane_ts.makeAngleEqualityByParallelLines(this.angleA, this.angleB);
                                break;
                            case plane_ts.AngleEqualityReason.angle_bisector:
                                break;
                            case plane_ts.AngleEqualityReason.congruent_triangles:
                                angleEquality = plane_ts.makeAngleEqualityByCongruentTriangles(this.angleA, this.angleB);
                                break;
                            case plane_ts.AngleEqualityReason.parallelogram_opposite_angles:
                                plane_ts.quadrilateralSelector.clear();
                                break;
                            case plane_ts.AngleEqualityReason.similar_triangles:
                                angleEquality = plane_ts.makeAngleEqualityBySimilarTriangles(this.angleA, this.angleB);
                                break;
                            case plane_ts.AngleEqualityReason.isosceles_triangle_base_angles:
                                angleEquality = plane_ts.makeAngleEqualityByIsoscelesTriangleBaseAngles(this.angleA, this.angleB);
                                break;
                            default:
                                throw new plane_ts.MyError();
                        }
                    }
                }
            }
            else {
                switch (this.angleEqualityReason) {
                    case plane_ts.AngleEqualityReason.vertical_angles:
                        break;
                    case plane_ts.AngleEqualityReason.parallel_line_angles:
                        break;
                    case plane_ts.AngleEqualityReason.angle_bisector:
                        break;
                    case plane_ts.AngleEqualityReason.congruent_triangles:
                        break;
                    case plane_ts.AngleEqualityReason.parallelogram_opposite_angles:
                        plane_ts.quadrilateralSelector.click(view, position, shape);
                        if (plane_ts.quadrilateralSelector.done()) {
                            const parallelogram = plane_ts.quadrilateralSelector.polygon;
                            angleEquality = plane_ts.makeAngleEqualityByParallelogramOppositeAngles(this.angleA, this.angleB, parallelogram);
                        }
                        break;
                    case plane_ts.AngleEqualityReason.similar_triangles:
                        break;
                    default:
                        throw new plane_ts.MyError();
                }
            }
            if (angleEquality != undefined) {
                addShapeSetRelations(view, angleEquality);
                this.resetTool(angleEquality);
                this.clear();
            }
        }
        drawTool(view) {
            if (this.trianglePairSelector != undefined) {
                this.trianglePairSelector.drawTool(view);
            }
        }
    }
    plane_ts.AngleEqualityBuilder = AngleEqualityBuilder;
    class ParallelDetectorBuilder extends Builder {
        parallelReason;
        lineA;
        angles = [];
        async init() {
            this.parallelReason = await plane_ts.showMenu(plane_ts.ParallelReason);
        }
        clear() {
            this.lineA = undefined;
            this.angles = [];
        }
        async click(view, position, shape) {
            let detector;
            let finished = false;
            switch (this.parallelReason) {
                case plane_ts.ParallelReason.parallelogram:
                    if (shape instanceof plane_ts.AbstractLine) {
                        if (this.lineA == undefined) {
                            this.lineA = shape;
                            shape.setMode(plane_ts.Mode.depend);
                        }
                        else {
                            shape.setMode(plane_ts.Mode.depend);
                            finished = true;
                            detector = plane_ts.makeParallelDetectorByParallelogram(this.lineA, shape);
                        }
                    }
                    break;
                case plane_ts.ParallelReason.corresponding_angles_or_alternate_angles_are_equal:
                case plane_ts.ParallelReason.supplementary_angles:
                    if (shape instanceof plane_ts.Angle) {
                        this.angles.push(shape);
                        shape.setMode(plane_ts.Mode.depend);
                        if (this.angles.length == 2) {
                            finished = true;
                            if (this.parallelReason == plane_ts.ParallelReason.corresponding_angles_or_alternate_angles_are_equal) {
                                detector = plane_ts.makeParallelDetectorByCorrespondingAlternateAnglesEqual(this.angles[0], this.angles[1]);
                            }
                            else {
                                detector = plane_ts.makeParallelDetectorBySupplementaryAngles(this.angles[0], this.angles[1]);
                            }
                        }
                    }
                    break;
                default:
                    throw new plane_ts.MyError();
            }
            if (detector != undefined) {
                addShapeSetRelations(view, detector);
                this.resetTool(detector);
                this.clear();
            }
        }
    }
    plane_ts.ParallelDetectorBuilder = ParallelDetectorBuilder;
    class EqualityConstraintBuilder extends Builder {
        lengthSymbolA;
        angleA;
        async click(view, position, shape) {
            let constraint;
            if (shape instanceof plane_ts.LengthSymbol) {
                if (this.lengthSymbolA == undefined) {
                    this.lengthSymbolA = shape;
                    shape.setMode(plane_ts.Mode.depend);
                }
                else {
                    constraint = new plane_ts.LengthEqualityConstraint({
                        lengthSymbolA: this.lengthSymbolA,
                        lengthSymbolB: shape
                    });
                }
            }
            else if (shape instanceof plane_ts.Angle) {
                if (this.angleA == undefined) {
                    this.angleA = shape;
                    shape.setMode(plane_ts.Mode.depend);
                }
                else {
                    constraint = new plane_ts.AngleEqualityConstraint({
                        shapes: [this.angleA, shape]
                    });
                }
            }
            if (constraint != undefined) {
                addShapeSetRelations(view, constraint);
                this.resetTool(constraint);
                this.lengthSymbolA = undefined;
                this.angleA = undefined;
            }
        }
    }
    plane_ts.EqualityConstraintBuilder = EqualityConstraintBuilder;
    class ParallelPerpendicularLineBuilder extends Builder {
        line;
        async click(view, position, shape) {
            if (shape instanceof plane_ts.AbstractLine) {
                if (this.line == undefined) {
                    this.line = shape;
                    this.line.setMode(plane_ts.Mode.depend);
                }
                else {
                    const [lineA, lineB] = plane_ts.sortShape([this.line, shape]);
                    if (lineB instanceof plane_ts.LineByPoints) {
                        let constraint;
                        if (this instanceof ParallelConstraintBuilder) {
                            constraint = new plane_ts.ParallelConstraint({ lineA, lineB });
                        }
                        else {
                            constraint = new plane_ts.PerpendicularConstraint({ lineA, lineB });
                        }
                        addShapeSetRelations(view, constraint);
                        this.line = undefined;
                        this.resetTool(constraint);
                    }
                    else {
                        this.line.setMode(plane_ts.Mode.none);
                        this.line = undefined;
                    }
                }
            }
        }
    }
    class ParallelConstraintBuilder extends ParallelPerpendicularLineBuilder {
    }
    class PerpendicularConstraintBuilder extends ParallelPerpendicularLineBuilder {
    }
    class ClassifierBuilder extends Builder {
    }
    class QuadrilateralClassifierBuilder extends ClassifierBuilder {
        shapeType;
        reason;
        points = [];
        async init() {
            this.shapeType = await plane_ts.showMenu(plane_ts.ShapeType);
            switch (this.shapeType) {
                case plane_ts.ShapeType.parallelogram:
                    this.reason = await plane_ts.showMenu(plane_ts.ParallelogramReason);
                    break;
                case plane_ts.ShapeType.rhombus:
                    this.reason = await plane_ts.showMenu(plane_ts.RhombusReason);
                    break;
                case plane_ts.ShapeType.isosceles_triangle:
                    this.reason = await plane_ts.showMenu(plane_ts.IsoscelesTriangleReason);
                    break;
                default:
                    throw new plane_ts.MyError();
            }
        }
        async click(view, position, shape) {
            if (shape instanceof plane_ts.Point) {
                this.points.push(shape);
                shape.setMode(plane_ts.Mode.depend);
                const num_points = (this.shapeType == plane_ts.ShapeType.isosceles_triangle ? 3 : 4);
                if (this.points.length == num_points) {
                    // msg(`reason:[${reason}]`);
                    const points = plane_ts.toClockwisePoints(this.points);
                    let detector;
                    if (this.shapeType == plane_ts.ShapeType.isosceles_triangle) {
                        detector = plane_ts.makeIsoscelesTriangleDetector(points, this.reason);
                    }
                    else {
                        detector = plane_ts.makeQuadrilateralClassifier(points, this.reason);
                    }
                    if (detector != undefined) {
                        addShapeSetRelations(view, detector);
                        this.resetTool(detector);
                    }
                    this.points = [];
                }
            }
        }
    }
    class ShapeEquationBuilder extends Builder {
        reason = plane_ts.ShapeEquationReason.none;
        shapes = [];
        async init() {
            this.reason = await plane_ts.showMenu(plane_ts.ShapeEquationReason);
        }
        async click(view, position, shape) {
            if (shape == undefined || this.shapes.includes(shape)) {
                return;
            }
            switch (this.reason) {
                case plane_ts.ShapeEquationReason.sum_of_angles_is_pi:
                case plane_ts.ShapeEquationReason.sum_of_angles_is_equal:
                case plane_ts.ShapeEquationReason.exterior_angle_theorem:
                    if (shape instanceof plane_ts.Angle) {
                        if (shape.name == "") {
                            plane_ts.msg(plane_ts.TT("The name of the shape is blank."));
                            return;
                        }
                        this.shapes.push(shape);
                        shape.setMode(plane_ts.Mode.depend);
                        // msg(`click eq ${this.shapes.length}`);
                        if (this.reason == plane_ts.ShapeEquationReason.exterior_angle_theorem && this.shapes.length == 3) {
                            await this.finish(view);
                        }
                    }
                    break;
                case plane_ts.ShapeEquationReason.sum_of_lengths_is_equal:
                    throw new plane_ts.MyError();
                case plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi:
                case plane_ts.ShapeEquationReason.sum_of_interior_angles_of_quadrilateral_is_2pi:
                    if (shape instanceof plane_ts.Point) {
                        this.shapes.push(shape);
                        shape.setMode(plane_ts.Mode.depend);
                        const num_vertices = (this.reason == plane_ts.ShapeEquationReason.sum_of_interior_angles_of_triangle_is_pi ? 3 : 4);
                        if (this.shapes.length == num_vertices) {
                            await this.finish(view);
                        }
                    }
                    break;
                default:
                    throw new plane_ts.MyError();
            }
        }
        async finish(view) {
            // msg(`finish shapes ${this.shapes.length}`);
            const shapeEquation = await plane_ts.makeShapeEquation(this.reason, this.shapes);
            if (shapeEquation != undefined) {
                addShapeSetRelations(view, shapeEquation);
                this.resetTool(shapeEquation);
                await plane_ts.simplifyEquationTextBlock(shapeEquation);
            }
            this.shapes = [];
        }
    }
    plane_ts.ShapeEquationBuilder = ShapeEquationBuilder;
    class ExprTransformBuilder extends Builder {
        reason = plane_ts.ExprTransformReason.none;
        terms = [];
        textBlocks = [];
        mathText = null;
        root;
        shift = 0;
        async init() {
            this.reason = await plane_ts.showMenu(plane_ts.ExprTransformReason);
        }
        async click(view, position, shape) {
            // msg(`click eq ${this.terms.length}`);
        }
        async dblclick(view, position, shape) {
            plane_ts.msg(`dblclick eq ${this.terms.length}`);
        }
        async termClick(term, textBlock) {
            // msg(`term click ${this.terms.length}`);
            if (!this.terms.includes(term)) {
                this.terms.push(term);
                this.textBlocks.push(textBlock);
                if (this.reason == plane_ts.ExprTransformReason.dividing_equation) {
                    plane_ts.assert(term.isRootEq());
                    this.root = term;
                    this.mathText = plane_ts.inputTextPrompt(plane_ts.TT("Enter a mathematical expression."));
                    if (this.mathText == null) {
                        Builder.cancelTool();
                    }
                    else {
                        await this.finish(plane_ts.View.current);
                    }
                }
                else if (this.reason == plane_ts.ExprTransformReason.arg_shift) {
                    term.colorName = "blue";
                    plane_ts.renderKatexSub(textBlock.div, term.getRoot().tex());
                }
            }
        }
        getDstTermRect(termRects, srcTermRect) {
            if (this.reason == plane_ts.ExprTransformReason.add_equation) {
                for (let term = srcTermRect.term; term.parent != null; term = term.parent) {
                    if (term.parent.isEq()) {
                        const dstTermRect = termRects.find(x => x.term == term);
                        if (dstTermRect == undefined) {
                            throw new plane_ts.MyError();
                        }
                        dstTermRect.span.style.backgroundColor = "blue";
                        return dstTermRect;
                    }
                }
                throw new plane_ts.MyError();
            }
            else if (this.reason == plane_ts.ExprTransformReason.dividing_equation) {
                const root = srcTermRect.term.getRoot();
                const dstTermRect = termRects.find(x => x.term == root);
                if (dstTermRect == undefined) {
                    throw new plane_ts.MyError();
                }
                dstTermRect.span.style.backgroundColor = "blue";
                return dstTermRect;
            }
            else if (this.reason == plane_ts.ExprTransformReason.substitution) {
                let dstTermRect;
                if (this.terms.length == 0) {
                    const side = srcTermRect.term.getEqSide();
                    if (side != null) {
                        dstTermRect = termRects.find(x => x.term == side);
                    }
                }
                else {
                    const src_term = this.terms[0];
                    algebra_ts.initHashTerm();
                    algebra_ts.setHashTerm([], src_term);
                    for (let dst_term = srcTermRect.term; dst_term.parent != null; dst_term = dst_term.parent) {
                        algebra_ts.setHashTerm([], dst_term);
                        if (src_term.hash == dst_term.hash) {
                            dstTermRect = termRects.find(x => x.term == dst_term);
                            if (dstTermRect != undefined) {
                                break;
                            }
                        }
                    }
                }
                if (dstTermRect != undefined) {
                    dstTermRect.span.style.backgroundColor = "blue";
                    return dstTermRect;
                }
                throw new plane_ts.MyError();
            }
            else {
                srcTermRect.span.style.backgroundColor = "blue";
                return srcTermRect;
            }
        }
        async finish(view) {
            // msg(`finish terms ${this.terms.length}`);
            const speech = new plane_ts.Speech();
            let exprTransform;
            plane_ts.msg(`expr:${plane_ts.enumToImgName.get(this.reason)}`);
            this.terms.forEach(x => plane_ts.msg(`${x.getRoot().str()}[${x.str()}]`));
            switch (this.reason) {
                case plane_ts.ExprTransformReason.transposition:
                    // msg("Expr-Transform-Reason.transposition");
                    if (this.terms.length == 1) {
                        exprTransform = await plane_ts.makeExprTransformByTransposition(this.terms[0], this.textBlocks[0], speech);
                    }
                    else {
                        throw new plane_ts.MyError(`terms length != 1`);
                    }
                    break;
                case plane_ts.ExprTransformReason.equality:
                    // msg("Expr-Transform-Reason.equality");
                    if (2 <= this.terms.length) {
                        exprTransform = await plane_ts.makeExprTransformByEquality(this.terms, this.textBlocks, speech);
                    }
                    else {
                        throw new plane_ts.MyError(`terms length < 2`);
                    }
                    break;
                case plane_ts.ExprTransformReason.add_equation:
                    // msg("Expr-Transform-Reason.add-equation");
                    exprTransform = await plane_ts.makeExprTransformByAddEquation(this.terms, this.textBlocks, speech);
                    break;
                case plane_ts.ExprTransformReason.substitution:
                    // msg("Expr-Transform-Reason.substitution");
                    exprTransform = await plane_ts.makeExprTransformBySubstitution(this.terms, this.textBlocks, speech);
                    break;
                case plane_ts.ExprTransformReason.dividing_equation:
                    // msg("Expr-Transform-Reason.dividing-equation");
                    plane_ts.assert(this.textBlocks.length == 1);
                    exprTransform = await plane_ts.makeExprTransformByDividingEquation(this.root, this.mathText, this.textBlocks[0], speech);
                    break;
                case plane_ts.ExprTransformReason.arg_shift:
                    // msg("ExprTransformReason.arg_shift");
                    throw new plane_ts.MyError();
            }
            if (exprTransform != undefined) {
                plane_ts.msg(`result:${exprTransform.equation.str()}`);
                addShapeSetRelations(view, exprTransform);
                this.resetTool(exprTransform);
                await plane_ts.simplifyEquationTextBlock(exprTransform);
            }
        }
    }
    plane_ts.ExprTransformBuilder = ExprTransformBuilder;
    class PropositionBuilder extends Builder {
        reason = plane_ts.PropositionReason.none;
        shapes = [];
        async init() {
            this.reason = await plane_ts.showMenu(plane_ts.PropositionReason);
        }
        async click(view, position, shape) {
            if (shape == undefined || this.shapes.includes(shape)) {
                return;
            }
            switch (this.reason) {
                case plane_ts.PropositionReason.angle_equality:
                case plane_ts.PropositionReason.length_equality:
                    if (this.reason == plane_ts.PropositionReason.angle_equality && shape instanceof plane_ts.Angle ||
                        this.reason == plane_ts.PropositionReason.length_equality && shape instanceof plane_ts.LengthSymbol) {
                        this.shapes.push(shape);
                        shape.setMode(plane_ts.Mode.depend);
                        if (this.shapes.length == 2) {
                            const proposition = plane_ts.makeShapeProposition(this.reason, this.shapes);
                            addShapeSetRelations(view, proposition);
                            this.resetTool(proposition);
                        }
                    }
                    break;
                case plane_ts.PropositionReason.equation:
                    {
                        const mathText = plane_ts.inputTextPrompt(plane_ts.TT("Enter a mathematical expression."));
                        if (mathText == null) {
                            Builder.cancelTool();
                        }
                        else {
                            const proposition = plane_ts.makeEquationProposition(this.reason, mathText);
                            if (proposition != undefined) {
                                addShapeSetRelations(view, proposition);
                                this.resetTool(proposition);
                                await plane_ts.simplifyEquationTextBlock(proposition);
                                return;
                            }
                        }
                        Builder.cancelTool();
                    }
                    throw new plane_ts.MyError();
                default:
                    throw new plane_ts.MyError();
            }
        }
    }
    plane_ts.PropositionBuilder = PropositionBuilder;
    class MotionBuilder extends SelectionTool {
        animation;
        constructor() {
            super();
            this.animation = new plane_ts.Motion({ propertyChanges: [] });
            plane_ts.View.current.addShape(this.animation);
            plane_ts.showProperty(this.animation, 0);
        }
    }
    plane_ts.MotionBuilder = MotionBuilder;
    const toolList = [
        [SelectionTool, "selection", plane_ts.TT("selection"), []],
        [PointBuilder, "point", plane_ts.TT("point"), [plane_ts.Point]],
        [MidpointBuilder, "mid_point", plane_ts.TT("mid point"), [plane_ts.Midpoint]],
        [IntersectionBuilder, "intersection", plane_ts.TT("intersection"), [plane_ts.LineLineIntersection, plane_ts.LineArcIntersection, plane_ts.ArcArcIntersection]],
        [LineSegmentBuilder, "line_segment", plane_ts.TT("line segment"), [plane_ts.LineByPoints]],
        [PolygonBuilder, "polygon", plane_ts.TT("polygon"), [plane_ts.Polygon]],
        [PerpendicularBuilder, "perpendicular", plane_ts.TT("perpendicular"), [plane_ts.FootOfPerpendicular]],
        [PerpendicularLineBuilder, "perpendicular_line", plane_ts.TT("perpendicular"), [plane_ts.PerpendicularLine]],
        [ParallelLineBuilder, "parallel_line", plane_ts.TT("parallel line"), [plane_ts.ParallelLine]],
        [AngleBisectorBuilder, "angle_bisector", plane_ts.TT("angle bisector"), [plane_ts.AngleBisector]],
        [CircleByPointBuilder, "circle_by_point", plane_ts.TT("circle by point"), [plane_ts.CircleByPoint]],
        [CircleByRadiusBuilder, "circle_by_radius", plane_ts.TT("circle by radius"), [plane_ts.CircleByRadius]],
        [ArcByPointBuilder, "arc_by_point", plane_ts.TT("arc by point"), [plane_ts.ArcByPoint]],
        [ArcByRadiusBuilder, "arc_by_radius", plane_ts.TT("arc by radius"), [plane_ts.ArcByLengthSymbol, plane_ts.ArcByCircle]],
        [AngleBuilder, "angle", plane_ts.TT("angle"), [plane_ts.Angle]],
        [LengthSymbolBuilder, "length_symbol", plane_ts.TT("length symbol"), [plane_ts.LengthSymbol]],
        [TriangleCongruenceBuilder, "triangle_congruence", plane_ts.TT("triangle congruence"), [plane_ts.TriangleCongruence]],
        [TriangleSimilarityBuilder, "triangle_similarity", plane_ts.TT("triangle similarity"), [plane_ts.TriangleSimilarity]],
        [LengthEqualityBuilder, "equal_length", plane_ts.TT("equal length"), [plane_ts.LengthEquality]],
        [AngleEqualityBuilder, "equal_angle", plane_ts.TT("equal angle"), [plane_ts.AngleEquality]],
        [ParallelDetectorBuilder, "parallel_detector", plane_ts.TT("parallel detector"), [plane_ts.ParallelDetector]],
        [EqualityConstraintBuilder, "equality_constraint", plane_ts.TT("equality constraint"), [plane_ts.LengthEqualityConstraint, plane_ts.AngleEqualityConstraint]],
        [AssumptionBuilder, "assumption", plane_ts.TT("assumption"), [plane_ts.Assumption]],
        [ParallelConstraintBuilder, "parallel_constraint", plane_ts.TT("parallel constraint"), [plane_ts.ParallelConstraint]],
        [PerpendicularConstraintBuilder, "perpendicular_constraint", plane_ts.TT("perpendicular constraint"), [plane_ts.PerpendicularConstraint]],
        [QuadrilateralClassifierBuilder, "quadrilateral_classifier", plane_ts.TT("quadrilateral classifier"), [plane_ts.ParallelogramClassifier, plane_ts.RhombusClassifier, plane_ts.TriangleDetector]],
        [ShapeEquationBuilder, "shape_equation", plane_ts.TT("shape equation"), [plane_ts.ShapeEquation]],
        [ExprTransformBuilder, "expr_transform", plane_ts.TT("expression transformation"), [plane_ts.ExprTransform]],
        [PropositionBuilder, "proposition", plane_ts.TT("proposition"), [plane_ts.Proposition]],
        [TextBlockBuilder, "text", plane_ts.TT("text"), [plane_ts.TextBlock]],
    ];
    const editToolList = [
        [RangeTool, "range", plane_ts.TT("range"), []],
        [EllipseBuilder, "ellipse", plane_ts.TT("ellipse"), [plane_ts.Ellipse]],
        [CirclePointTangentBuilder, "tangent_point", plane_ts.TT("tangent point"), [plane_ts.CirclePointTangent]],
        [CircleCircleTangentBuilder, "tangent_circles", plane_ts.TT("tangent circles"), [plane_ts.CircleCircleTangent]],
        [DimensionLineBuilder, "dimension_line", plane_ts.TT("dimension line"), [plane_ts.DimensionLine]],
        [StatementBuilder, "statement", plane_ts.TT("statement"), [plane_ts.Statement]],
        [MotionBuilder, "animation", plane_ts.TT("animation"), [plane_ts.Motion]],
    ];
    function initToolList() {
        if (i18n_ts.appMode == i18n_ts.AppMode.edit) {
            toolList.push(...editToolList);
        }
    }
    function makeShapeButton(shape, in_shape_history) {
        let shape_img_name;
        for (const [tool, img_name, title, shape_classes] of toolList) {
            if (shape_classes.some(x => x.name == shape.constructor.name)) {
                shape_img_name = img_name;
                break;
            }
        }
        if (shape_img_name == undefined) {
            if (shape instanceof plane_ts.Polygon) {
                shape_img_name = "polygon";
            }
            else {
                throw new plane_ts.MyError(`unknown shape class name:[${shape.constructor.name}]`);
            }
        }
        const button = layout_ts.$button({
            url: `${plane_ts.urlOrigin}/lib/plane/img/${shape_img_name}.png`,
            width: "20px",
            height: "20px",
        });
        button.click = async (ev) => {
            if (in_shape_history) {
                plane_ts.PlayBack.setStartIndex(shape);
                if (button.parent == plane_ts.Plane.one.shapes_block && shape instanceof plane_ts.Statement) {
                    Builder.setToolByShape(shape);
                }
                plane_ts.showProperty(shape, 0);
            }
            plane_ts.View.current.resetMode();
            shape.setMode(plane_ts.Mode.target);
        };
        return button;
    }
    plane_ts.makeShapeButton = makeShapeButton;
    function addToShapeHistory(shape) {
        const button = makeShapeButton(shape, true);
        plane_ts.Plane.one.shapes_block.addChild(button);
        plane_ts.assert(plane_ts.Plane.one.shapes_block.children.length == plane_ts.View.current.shapes.length);
        layout_ts.Layout.root.updateRootLayout();
    }
    plane_ts.addToShapeHistory = addToShapeHistory;
    function pushShapeList(ui) {
        plane_ts.Plane.one.shapes_block.addChild(ui);
        layout_ts.Layout.root.updateRootLayout();
    }
    plane_ts.pushShapeList = pushShapeList;
    function popShapeList() {
        const child = plane_ts.Plane.one.shapes_block.popChild();
        layout_ts.Layout.root.updateRootLayout();
        return child;
    }
    plane_ts.popShapeList = popShapeList;
    function clearShapeList() {
        plane_ts.Plane.one.shapes_block.clear();
        layout_ts.Layout.root.updateRootLayout();
    }
    plane_ts.clearShapeList = clearShapeList;
    function makeToolButtons() {
        initToolList();
        const tool_buttons = [];
        for (const [tool, img_name, title, shapes] of toolList) {
            const id = `${tool.name}-radio`;
            const radio = layout_ts.$radio({
                id,
                value: tool.name,
                title: title,
                url: `${plane_ts.urlOrigin}/lib/plane/img/${img_name}.png`,
                width: "36px",
                height: "36px",
            });
            tool_buttons.push(radio);
        }
        return tool_buttons;
    }
    plane_ts.makeToolButtons = makeToolButtons;
    function makeToolByType(tool_name) {
        for (const [tool, img_name, title, shapes] of toolList) {
            if (tool.name == tool_name) {
                return new tool();
            }
        }
        throw new plane_ts.MyError();
    }
    plane_ts.makeToolByType = makeToolByType;
})(plane_ts || (plane_ts = {}));
var plane_ts;
(function (plane_ts) {
    //
    function recalc(shape, changed) {
        const dependencies = shape.dependencies();
        for (const dep of dependencies) {
            recalc(dep, changed);
        }
        if (shape instanceof plane_ts.Shape && dependencies.some(x => changed.has(x))) {
            shape.calc();
            changed.add(shape);
        }
    }
    class View extends plane_ts.Widget {
        static nearThreshold = 8;
        static current;
        static isPlayBack = false;
        name = "";
        board;
        canvas;
        grid;
        operations = [];
        shapes = [];
        relationLogs = [];
        undoStack = [];
        changed = new Set();
        downPosition;
        movePosition;
        min;
        max;
        textBase;
        textBaseY;
        dirty = false;
        makeObj() {
            let obj = Object.assign(super.makeObj(), {
                name: this.name,
                scale: this.board.clientWidth / (this.max.x - this.min.x),
                min: this.min,
                max: this.max,
                shapes: this.shapes.map(x => x.toObj())
            });
            return obj;
        }
        isNear(real_distance) {
            const pix_distance = this.toXPixScale(real_distance);
            return pix_distance < View.nearThreshold;
        }
        constructor(canvas) {
            super({});
            this.board = canvas;
            this.board.innerHTML = "";
            this.canvas = new plane_ts.Canvas(this, this.board);
            this.grid = new CanvasGrid(this);
            this.board.width = this.board.clientWidth;
            this.board.height = this.board.clientHeight;
            const scale = 100;
            const span_x = this.board.clientWidth / scale;
            const min_x = -0.75 * span_x;
            const max_x = 0.25 * span_x;
            const span_y = this.board.clientHeight / scale;
            const max_y = 0.5 * span_y;
            const min_y = -max_y;
            plane_ts.msg(`min-x:${min_x} max-x:${max_x} max-y:${max_y}`);
            this.setMinMax(new plane_ts.Vec2(min_x, min_y), new plane_ts.Vec2(max_x, max_y));
            this.textBaseY = max_y - 0.1 * span_y;
            this.textBase = new plane_ts.Vec2(min_x + 0.05 * span_x, this.textBaseY);
            View.current = this;
            this.resizeView();
        }
        clearView() {
            const all_shapes = this.allShapes();
            all_shapes.forEach(x => x.hide());
            plane_ts.removeDiv();
            plane_ts.Widget.maxId = this.id;
            plane_ts.idMap.clear();
            plane_ts.idMap.set(this.id, this);
            this.operations = [];
            this.shapes = [];
            this.dirty = true;
            this.textBase.y = this.textBaseY;
            plane_ts.Plane.one.clearPlane();
            plane_ts.clearShapeList();
            plane_ts.initRelations();
        }
        setMinMax(min, max) {
            this.min = min;
            this.max = max;
            plane_ts.Point.radius = this.fromXPixScale(plane_ts.Point.radiusPix);
            plane_ts.Angle.radius1 = this.fromXPixScale(plane_ts.Angle.radius1Pix);
        }
        eventPosition(event) {
            const flipped_y = this.board.clientHeight - event.offsetY;
            const x = plane_ts.linear(0, event.offsetX, this.board.clientWidth, this.min.x, this.max.x);
            const y = plane_ts.linear(0, flipped_y, this.board.clientHeight, this.min.y, this.max.y);
            return new plane_ts.Vec2(x, y);
        }
        fromXPixScale(pix) {
            return (this.max.x - this.min.x) * (pix / this.board.clientWidth);
        }
        fromYPixScale(pix) {
            return (this.max.y - this.min.y) * (pix / this.board.clientHeight);
        }
        fromPixScale(position) {
            return new plane_ts.Vec2(this.fromXPixScale(position.x), this.fromYPixScale(position.y));
        }
        fromXPix(pix) {
            return plane_ts.linear(0, pix, this.board.clientWidth, this.min.x, this.max.x);
        }
        fromYPix(pix) {
            return plane_ts.linear(0, pix, this.board.clientHeight, this.min.y, this.max.y);
        }
        fromPix(position) {
            return new plane_ts.Vec2(this.fromXPix(position.x), this.fromYPix(position.y));
        }
        toXPixScale(n) {
            return this.board.clientWidth * n / (this.max.x - this.min.x);
        }
        toYPixScale(n) {
            return this.board.clientHeight * n / (this.max.y - this.min.y);
        }
        toXPix(x) {
            const x_pix = plane_ts.linear(this.min.x, x, this.max.x, 0, this.board.clientWidth);
            return x_pix;
        }
        toYPix(y) {
            const pix_y = plane_ts.linear(this.min.y, y, this.max.y, 0, this.board.clientHeight);
            const flipped_y = this.board.clientHeight - pix_y;
            return flipped_y;
        }
        toPixPosition(position) {
            const x_pix = this.toXPix(position.x);
            const y_pix = this.toYPix(position.y);
            return new plane_ts.Vec2(x_pix, y_pix);
        }
        getShapes() {
            return this.shapes.filter(x => x instanceof plane_ts.Shape);
        }
        allRealShapes() {
            return this.allShapes().filter(x => x instanceof plane_ts.Shape);
        }
        allShapes() {
            const shapes = [];
            this.shapes.forEach(x => x.getAllShapes(shapes));
            const unique_shapes = plane_ts.unique(shapes);
            return unique_shapes;
        }
        removeUnusedDivs() {
            const used_divs = this.allRealShapes().filter(x => x.caption != undefined).map(x => x.caption.div);
            const used_divs_set = new Set(used_divs);
            const canvas_divs = Array.from(this.board.getElementsByTagName("div"));
            const unused_divs = canvas_divs.filter(x => !used_divs_set.has);
            for (const div of unused_divs) {
                this.board.removeChild(div);
            }
        }
        resetMode() {
            this.allShapes().forEach(x => { x.setMode(plane_ts.Mode.none); x.isOver = false; });
            this.dirty = true;
        }
        resetOrders() {
            plane_ts.MathEntity.orderSet.clear();
            this.allShapes().forEach(x => x.order = NaN);
            this.shapes.forEach(x => x.setOrder());
        }
        drawShapes() {
            if (this.dirty) {
                this.dirty = false;
                // msg("redraw");
                this.canvas.clear();
                plane_ts.Polygon.colorIndex = 0;
                this.grid.showGrid(plane_ts.Plane.one.show_axis.checked(), plane_ts.Plane.one.show_grid.checked());
                const shapes = this.allRealShapes();
                const visible_shapes = shapes.filter(x => x.visible);
                if (plane_ts.getPlayMode() != plane_ts.PlayMode.stop || !plane_ts.Plane.one.editMode) {
                    visible_shapes.forEach(c => c.draw());
                }
                else {
                    shapes.forEach(c => c.draw());
                }
                visible_shapes.filter(x => x.mode != plane_ts.Mode.none).forEach(c => c.draw());
                plane_ts.Builder.tool.drawTool(this);
                if (plane_ts.Plane.one.snap_to_grid.checked()) {
                    this.grid.showPointer();
                }
            }
            window.requestAnimationFrame(this.drawShapes.bind(this));
        }
        async click(event) {
            plane_ts.msg("click");
            let position = this.eventPosition(event);
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                position = this.grid.snap(position);
            }
            plane_ts.Point.tempPoints = [];
            const shape = this.getShape(position);
            if (plane_ts.Builder.tool instanceof plane_ts.SelectionTool) {
                if (shape instanceof plane_ts.Point) {
                    const click_shape = this.operations.find(x => x instanceof plane_ts.ClickShape && x.createdPoint === shape);
                    if (click_shape != undefined) {
                        plane_ts.msg(`click shape position is changed: ${click_shape.position}=>${position}`);
                        click_shape.position = position;
                    }
                }
                await plane_ts.Builder.tool.click(this, position, shape);
            }
            else {
                this.addOperation(new plane_ts.ClickShape(position, (shape != undefined ? shape.id : NaN)));
                if (plane_ts.Builder.tool instanceof plane_ts.StatementBuilder) {
                    await plane_ts.Builder.tool.clickWithMouseEvent(event, this, position, shape);
                }
                else {
                    await plane_ts.Builder.tool.click(this, position, shape);
                }
            }
            this.dirty = true;
        }
        async dblclick(event) {
            let position = this.eventPosition(event);
            const shape = this.getShape(position);
            if (shape == undefined) {
                return;
            }
            if (plane_ts.Builder.tool instanceof plane_ts.SelectionTool) {
                this.resetMode();
                if (shape instanceof plane_ts.LengthSymbol) {
                    const length_symbols = plane_ts.equalLengths.find(x => x.has(shape));
                    if (length_symbols != undefined) {
                        Array.from(length_symbols.values()).forEach(x => x.setMode(plane_ts.Mode.depend));
                        this.dirty = true;
                    }
                }
                else if (shape instanceof plane_ts.Angle) {
                    const angles = Array.from(plane_ts.supplementaryAngles.flat()).find(x => x.has(shape));
                    if (angles != undefined) {
                        this.resetMode();
                        angles.forEach(x => x.setMode(plane_ts.Mode.depend));
                        this.dirty = true;
                    }
                }
                else if (shape instanceof plane_ts.AbstractLine) {
                    const points = plane_ts.getPointsFromLine(shape);
                    points.forEach(x => x.setMode(plane_ts.Mode.depend));
                    const parallel_lines = plane_ts.getParallelLines(shape);
                    if (parallel_lines != undefined) {
                        parallel_lines.forEach(x => x.setMode(plane_ts.Mode.target));
                    }
                    const perpendicular_lines = plane_ts.getPerpendicularLines(shape);
                    if (perpendicular_lines != undefined) {
                        perpendicular_lines.forEach(x => x.setMode(plane_ts.Mode.depend));
                    }
                }
                shape.setMode(plane_ts.Mode.target);
            }
            this.dirty = true;
        }
        pointerdown(event) {
            if (event.button != 0) {
                plane_ts.msg(`pointerdown:${event.button.toString(2)}`);
                return;
            }
            let position = this.eventPosition(event);
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                position = this.grid.snap(position);
            }
            this.downPosition = position;
            const shape = this.getShape(position);
            plane_ts.Builder.tool.pointerdown(event, this, position, shape);
        }
        pointermove(event) {
            // タッチによる画面スクロールを止める
            event.preventDefault();
            let position = this.eventPosition(event);
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                position = this.grid.snap(position);
            }
            const shapes = this.allShapes().concat(plane_ts.Builder.tool.pendingShapes());
            const old_near_shape = shapes.find(x => x.isOver);
            const near_shape = this.getShape(position);
            if (old_near_shape != near_shape) {
                if (old_near_shape != undefined) {
                    old_near_shape.isOver = false;
                }
                if (near_shape != undefined) {
                    near_shape.isOver = true;
                    // msg(`over:${near_shape.constructor.name}`);
                }
                this.dirty = true;
            }
            const shape = this.getShape(position);
            plane_ts.Builder.tool.pointermove(event, this, position, shape);
            this.movePosition = position;
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                const prev_snap_position = this.grid.snapPosition;
                this.grid.setSnapPosition();
                if (!prev_snap_position.equals(this.grid.snapPosition)) {
                    this.dirty = true;
                }
            }
        }
        pointerup(event) {
            if (event.button != 0) {
                plane_ts.msg(`pointerup:${event.button.toString(2)}`);
                return;
            }
            let position = this.eventPosition(event);
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                position = this.grid.snap(position);
            }
            const shape = this.getShape(position);
            plane_ts.Builder.tool.pointerup(event, this, position, shape);
            this.downPosition = undefined;
        }
        wheel(event) {
            event.preventDefault();
            let position = this.eventPosition(event);
            if (plane_ts.Plane.one.snap_to_grid.checked()) {
                position = this.grid.snap(position);
            }
            const ratio = 0.002 * event.deltaY;
            const min_x = this.min.x - (position.x - this.min.x) * ratio;
            const min_y = this.min.y - (position.y - this.min.y) * ratio;
            const max_x = this.max.x + (this.max.x - position.x) * ratio;
            const max_y = this.max.y + (this.max.y - position.y) * ratio;
            this.setMinMax(new plane_ts.Vec2(min_x, min_y), new plane_ts.Vec2(max_x, max_y));
            this.allRealShapes().forEach(x => x.updateCaption());
            View.current.dirty = true;
        }
        resizeView() {
            this.board.width = this.board.clientWidth;
            this.board.height = this.board.clientHeight;
            this.updateTextBlockPositions();
            this.dirty = true;
            plane_ts.msg(`resize: w:${this.board.width} h:${this.board.height} max:${this.max}`);
        }
        addOperation(operation) {
            this.operations.push(operation);
        }
        addShape(shape) {
            this.shapes.push(shape);
            shape.setOrder();
            plane_ts.addToShapeHistory(shape);
        }
        getShape(position) {
            const shapes = this.allRealShapes().concat(plane_ts.Builder.tool.pendingShapes());
            const point = shapes.filter(x => x instanceof plane_ts.Point).find(x => x.isNear(position));
            if (point != undefined) {
                return point;
            }
            const symbol = shapes.filter(x => x instanceof plane_ts.LengthSymbol).find(x => x.isNear(position));
            if (symbol != undefined) {
                return symbol;
            }
            const angle = shapes.filter(x => x instanceof plane_ts.Angle).find(x => x.isNear(position));
            if (angle != undefined) {
                return angle;
            }
            const line = shapes.filter(x => x instanceof plane_ts.AbstractLine).find(x => x.isNear(position));
            if (line != undefined) {
                return line;
            }
            const circle = shapes.filter(x => x instanceof plane_ts.CircleArcEllipse).find(x => x.isNear(position));
            return circle;
        }
        updateShapes() {
            for (const shape of this.getShapes()) {
                let shapes = [];
                shape.getAllShapes(shapes);
                const points = shapes.filter(x => x instanceof plane_ts.Point);
                for (const point of points) {
                    const bounds = point.getBounds();
                    if (bounds.length == 1) {
                        const bound = bounds[0];
                        bound.adjustPosition(point, point.position);
                        this.changed.add(point);
                    }
                }
                recalc(shape, this.changed);
            }
        }
        updateTextBlockPositions() {
            const shapes = this.allShapes();
            const parents = shapes.filter(x => (x instanceof plane_ts.Point || x instanceof plane_ts.DimensionLine) && x.caption != undefined);
            parents.forEach(x => x.updateCaption());
            const text_blocks = this.shapes.filter(x => x instanceof plane_ts.TextBlock);
            text_blocks.forEach(x => x.updateTextPosition());
        }
        async undo() {
            if (this.operations.length == 0) {
                return;
            }
            let undoData;
            for (let idx = this.operations.length - 1 - 1; 0 <= idx; idx--) {
                const operation = this.operations[idx];
                if (!isNaN(operation.shapesLength)) {
                    undoData = {
                        operations: this.operations.slice(idx + 1),
                        shapes: this.shapes.slice(operation.shapesLength),
                        relationLogs: this.relationLogs.slice(operation.relationLogsLength),
                        historyUIs: []
                    };
                    this.operations = this.operations.slice(0, idx + 1);
                    this.shapes = this.shapes.slice(0, operation.shapesLength);
                    this.relationLogs = this.relationLogs.slice(0, operation.relationLogsLength);
                    break;
                }
            }
            if (undoData == undefined) {
                undoData = {
                    operations: this.operations.slice(),
                    shapes: this.shapes.slice(),
                    relationLogs: this.relationLogs.slice(),
                    historyUIs: []
                };
                this.operations = [];
                this.shapes = [];
                this.relationLogs = [];
                plane_ts.initRelations();
            }
            undoData.shapes.forEach(x => x.hide());
            while (View.current.shapes.length < plane_ts.Plane.one.shapes_block.children.length) {
                const ui = plane_ts.popShapeList();
                if (ui != undefined) {
                    undoData.historyUIs.unshift(ui);
                }
            }
            this.undoStack.push(undoData);
            this.dirty = true;
        }
        async redo() {
            const view = View.current;
            if (this.undoStack.length == 0) {
                return;
            }
            const undoData = this.undoStack.pop();
            this.operations.push(...undoData.operations);
            this.shapes.push(...undoData.shapes);
            this.relationLogs.push(...undoData.relationLogs);
            undoData.shapes.forEach(x => x.show());
            undoData.historyUIs.forEach(x => plane_ts.pushShapeList(x));
            this.dirty = true;
        }
        restoreView() {
            const motions = this.shapes.filter(x => x instanceof plane_ts.Motion);
            motions.reverse().forEach(x => x.restorePropertyChanges());
        }
        texPosition() {
        }
    }
    plane_ts.View = View;
    class CanvasGrid {
        view;
        subSpanX;
        subSpanY;
        snapPosition = plane_ts.Vec2.zero();
        constructor(view) {
            this.view = view;
        }
        drawGridAxis(axis, show_grid, show_axis) {
            let size;
            let min_a;
            let max_a;
            let min_b;
            let max_b;
            if (axis == "X") {
                size = this.view.fromXPixScale(75);
                [min_a, max_a] = [this.view.min.x, this.view.max.x];
                [min_b, max_b] = [this.view.min.y, this.view.max.y];
            }
            else {
                size = this.view.fromYPixScale(75);
                [min_a, max_a] = [this.view.min.y, this.view.max.y];
                [min_b, max_b] = [this.view.min.x, this.view.max.x];
            }
            const power = Math.round(Math.log10(size));
            let fraction_digits;
            fraction_digits = -power;
            let main_span = 10 ** power;
            if (main_span < size) {
                if (Math.abs(2 * main_span - size) < size - main_span) {
                    main_span = 2 * main_span;
                }
            }
            else {
                if (Math.abs(0.5 * main_span - size) < main_span - size) {
                    main_span = 0.5 * main_span;
                    fraction_digits++;
                }
            }
            fraction_digits = Math.max(0, fraction_digits);
            let sub_span = main_span / 5;
            if (show_grid) {
                const n1 = Math.floor(min_a / sub_span);
                const n2 = Math.ceil(max_a / sub_span);
                const main_lines = [];
                const sub_lines = [];
                const axis_lines = [];
                for (let n = n1; n <= n2; n++) {
                    const a = n * sub_span;
                    let p1;
                    let p2;
                    if (axis == "X") {
                        p1 = new plane_ts.Vec2(a, min_b);
                        p2 = new plane_ts.Vec2(a, max_b);
                    }
                    else {
                        p1 = new plane_ts.Vec2(min_b, a);
                        p2 = new plane_ts.Vec2(max_b, a);
                    }
                    if (n == 0) {
                        axis_lines.push([p1, p2]);
                    }
                    else if (n % 5 == 0) {
                        main_lines.push([p1, p2]);
                    }
                    else {
                        sub_lines.push([p1, p2]);
                    }
                }
                this.view.canvas.drawLinesRaw(axis_lines, plane_ts.fgColor, 1.0);
                this.view.canvas.drawLinesRaw(main_lines, "gray", 0.5);
                this.view.canvas.drawLinesRaw(sub_lines, "gray", 0.2);
            }
            if (show_axis) {
                const n1 = Math.floor(min_a / main_span);
                const n2 = Math.ceil(max_a / main_span);
                for (let n = n1; n <= n2; n++) {
                    const a = n * main_span;
                    const text = (n == 0 ? "0" : a.toFixed(fraction_digits));
                    if (axis == "X") {
                        this.view.canvas.drawText(new plane_ts.Vec2(a, 0), text, plane_ts.fgColor);
                    }
                    else {
                        this.view.canvas.drawText(new plane_ts.Vec2(0, a), text, plane_ts.fgColor);
                    }
                }
            }
            if (axis == "X") {
                this.subSpanX = sub_span;
            }
            else {
                this.subSpanY = sub_span;
            }
        }
        showGrid(show_grid, show_axis) {
            if (show_grid || show_axis) {
                this.drawGridAxis("X", show_grid, show_axis);
                this.drawGridAxis("Y", show_grid, show_axis);
            }
        }
        setSnapPosition() {
            if (this.view.movePosition == undefined || this.subSpanX == undefined || this.subSpanY == undefined) {
                return;
            }
            this.snapPosition = this.snap(this.view.movePosition);
        }
        showPointer() {
            if (this.subSpanX == undefined || this.subSpanY == undefined) {
                return;
            }
            let position = this.snapPosition;
            const lines = [
                [new plane_ts.Vec2(position.x - this.subSpanX, position.y), new plane_ts.Vec2(position.x + this.subSpanX, position.y)],
                [new plane_ts.Vec2(position.x, position.y - this.subSpanY), new plane_ts.Vec2(position.x, position.y + this.subSpanY)]
            ];
            this.view.canvas.drawLinesRaw(lines, "blue", 1);
        }
        snap(position) {
            if (this.subSpanX == undefined || this.subSpanY == undefined) {
                return position;
            }
            const x = Math.round(position.x / this.subSpanX) * this.subSpanX;
            const y = Math.round(position.y / this.subSpanY) * this.subSpanY;
            return new plane_ts.Vec2(x, y);
        }
    }
})(plane_ts || (plane_ts = {}));
//# sourceMappingURL=data:application/json;base64,